{"version":3,"file":"component---src-page-components-entry-article-tsx-d4fb5feed7511d0264c0.js","mappings":"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","sources":["webpack://blog.nasustim.com/./node_modules/style-to-js/node_modules/style-to-object/node_modules/inline-style-parser/index.js","webpack://blog.nasustim.com/./node_modules/extend/index.js","webpack://blog.nasustim.com/./node_modules/style-to-js/node_modules/style-to-object/cjs/index.js","webpack://blog.nasustim.com/./node_modules/style-to-js/cjs/index.js","webpack://blog.nasustim.com/./node_modules/devlop/lib/default.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/estree-util-is-identifier-name/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/hast-util-whitespace/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/schema.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/merge.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/normalize.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/info.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/types.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/defined-info.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/create.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/aria.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/html.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/svg.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xlink.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xmlns.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/xml.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/find.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/property-information/lib/hast-to-react.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/unist-util-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/vfile-message/node_modules/unist-util-stringify-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/vfile-message/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/lib/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/comma-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/hast-util-to-jsx-runtime/node_modules/space-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/html-url-attributes/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://blog.nasustim.com/./node_modules/micromark-util-chunked/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/node_modules/micromark-util-subtokenize/index.js","webpack://blog.nasustim.com/./node_modules/micromark-util-combine-extensions/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-space/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-space/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/content.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/document.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/blank-line.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/node_modules/micromark-util-subtokenize/lib/splice-buffer.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/node_modules/micromark-util-subtokenize/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/content.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/flow.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/initialize/text.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/thematic-break.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/list.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/block-quote.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-destination/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-destination/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-label/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-label/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-title/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-title/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-whitespace/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-factory-whitespace/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/node_modules/micromark-util-normalize-identifier/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/definition.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/code-indented.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/heading-atx.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/setext-underline.js","webpack://blog.nasustim.com/./node_modules/micromark-util-html-tag-name/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/html-flow.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/code-fenced.js","webpack://blog.nasustim.com/./node_modules/decode-named-character-reference/index.dom.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/character-reference.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/character-escape.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/line-ending.js","webpack://blog.nasustim.com/./node_modules/micromark-util-resolve-all/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/label-end.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/label-start-image.js","webpack://blog.nasustim.com/./node_modules/micromark-util-classify-character/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-util-classify-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/attention.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/autolink.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/html-text.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/label-start-link.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/hard-break-escape.js","webpack://blog.nasustim.com/./node_modules/micromark-core-commonmark/lib/code-text.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/constructs.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/create-tokenizer.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/preprocess.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-numeric-character-reference/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark-util-decode-string/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark-util-normalize-identifier/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/unist-util-stringify-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/postprocess.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/node_modules/mdast-util-from-markdown/node_modules/micromark/lib/parse.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/remark-parse/lib/index.js","webpack://blog.nasustim.com/./node_modules/@ungap/structured-clone/esm/types.js","webpack://blog.nasustim.com/./node_modules/@ungap/structured-clone/esm/deserialize.js","webpack://blog.nasustim.com/./node_modules/@ungap/structured-clone/esm/serialize.js","webpack://blog.nasustim.com/./node_modules/@ungap/structured-clone/esm/index.js","webpack://blog.nasustim.com/./node_modules/micromark-util-sanitize-uri/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-util-sanitize-uri/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/footer.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/node_modules/unist-util-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/revert.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list-item.js","webpack://blog.nasustim.com/./node_modules/trim-lines/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/blockquote.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/break.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/code.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/delete.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/emphasis.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/footnote-reference.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/heading.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/html.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image-reference.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/image.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/inline-code.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link-reference.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/link.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/list.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/paragraph.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/root.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/strong.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-cell.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/table-row.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/text.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/handlers/thematic-break.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/state.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/node_modules/unist-util-visit/lib/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/node_modules/mdast-util-to-hast/lib/index.js","webpack://blog.nasustim.com/./node_modules/remark-rehype/lib/index.js","webpack://blog.nasustim.com/./node_modules/bail/index.js","webpack://blog.nasustim.com/./node_modules/is-plain-obj/index.js","webpack://blog.nasustim.com/./node_modules/trough/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/node_modules/vfile-message/node_modules/unist-util-stringify-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/node_modules/vfile-message/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/lib/minpath.browser.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/lib/minproc.browser.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/lib/minurl.shared.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/lib/minurl.browser.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/vfile/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/unified/lib/callable-instance.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/unified/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/lib/index.js","webpack://blog.nasustim.com/./node_modules/react-markdown/node_modules/unist-util-visit/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-autolink-literal/node_modules/ccount/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-find-and-replace/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-find-and-replace/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-find-and-replace/node_modules/escape-string-regexp/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-autolink-literal/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-footnote/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-strikethrough/lib/index.js","webpack://blog.nasustim.com/./node_modules/markdown-table/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://blog.nasustim.com/./node_modules/longest-streak/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-table/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/blockquote.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/pattern-in-scope.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/break.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/code.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-quote.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/encode-character-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/encode-info.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/emphasis.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-emphasis.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/mdast-util-to-string/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-heading-as-setext.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/unist-util-visit/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/html.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/image-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/inline-code.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-link-as-autolink.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/link-reference.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/node_modules/mdast-util-phrasing/lib/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/strong.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-strong.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-fence.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/format-code-as-indented.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/definition.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/heading.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-ordered.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-bullet-other.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/list-item.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-list-item-indent.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/paragraph.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/root.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/text.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/handle/thematic-break.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/node_modules/mdast-util-to-markdown/lib/util/check-rule-repetition.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm-task-list-item/lib/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-autolink-literal/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-autolink-literal/lib/syntax.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-footnote/node_modules/micromark-util-normalize-identifier/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-footnote/lib/syntax.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-strikethrough/lib/syntax.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-table/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-table/lib/edit-map.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-table/lib/infer.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-table/lib/syntax.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-task-list-item/node_modules/micromark-util-character/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm-task-list-item/lib/syntax.js","webpack://blog.nasustim.com/./node_modules/remark-gfm/lib/index.js","webpack://blog.nasustim.com/./node_modules/micromark-extension-gfm/index.js","webpack://blog.nasustim.com/./node_modules/mdast-util-gfm/lib/index.js","webpack://blog.nasustim.com/./src/components/organisms/markdown-renderer/index.css.ts","webpack://blog.nasustim.com/./src/components/organisms/tag-list/index.tsx","webpack://blog.nasustim.com/./src/components/organisms/tag-list/index.css.ts","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/schema.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/merge.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/normalize.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/info.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/types.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/defined-info.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/create.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/aria.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/html.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/svg.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/xlink.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/xmlns.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/xml.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/node_modules/comma-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/node_modules/hast-util-parse-selector/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/property-information/lib/find.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/node_modules/space-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/create-h.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/svg-case-sensitive-tag-names.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/hastscript/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/node_modules/vfile-location/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/web-namespaces/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-from-parse5/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/schema.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/merge.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/normalize.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/info.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/types.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/defined-info.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/create.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/xlink.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/xml.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/case-sensitive-transform.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/util/case-insensitive-transform.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/xmlns.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/aria.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/html.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/svg.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/property-information/lib/find.js","webpack://blog.nasustim.com/./node_modules/zwitch/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/comma-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/hast-util-to-parse5/node_modules/space-separated-tokens/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/html-void-elements/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/unicode.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/error-codes.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/preprocessor.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/token.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/node_modules/entities/dist/esm/generated/decode-data-html.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/node_modules/entities/dist/esm/decode-codepoint.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/node_modules/entities/dist/esm/decode.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/html.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/tokenizer/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/parser/open-element-stack.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/parser/formatting-element-list.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/tree-adapters/default.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/doctype.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/common/foreign-content.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/parser/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/node_modules/entities/dist/esm/escape.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/parse5/dist/serializer/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/unist-util-position/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/unist-util-visit/node_modules/unist-util-is/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/unist-util-visit/node_modules/unist-util-visit-parents/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/node_modules/hast-util-raw/node_modules/unist-util-visit/lib/index.js","webpack://blog.nasustim.com/./node_modules/rehype-raw/lib/index.js","webpack://blog.nasustim.com/./src/components/organisms/markdown-renderer/index.tsx","webpack://blog.nasustim.com/./src/page-components/entry/article.tsx","webpack://blog.nasustim.com/./node_modules/style-to-js/cjs/utilities.js"],"sourcesContent":["// http://www.w3.org/TR/CSS21/grammar.html\n// https://github.com/visionmedia/css-parse/pull/49#issuecomment-30088027\nvar COMMENT_REGEX = /\\/\\*[^*]*\\*+([^/*][^*]*\\*+)*\\//g;\n\nvar NEWLINE_REGEX = /\\n/g;\nvar WHITESPACE_REGEX = /^\\s*/;\n\n// declaration\nvar PROPERTY_REGEX = /^(\\*?[-#/*\\\\\\w]+(\\[[0-9a-z_-]+\\])?)\\s*/;\nvar COLON_REGEX = /^:\\s*/;\nvar VALUE_REGEX = /^((?:'(?:\\\\'|.)*?'|\"(?:\\\\\"|.)*?\"|\\([^)]*?\\)|[^};])+)/;\nvar SEMICOLON_REGEX = /^[;\\s]*/;\n\n// https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/String/Trim#Polyfill\nvar TRIM_REGEX = /^\\s+|\\s+$/g;\n\n// strings\nvar NEWLINE = '\\n';\nvar FORWARD_SLASH = '/';\nvar ASTERISK = '*';\nvar EMPTY_STRING = '';\n\n// types\nvar TYPE_COMMENT = 'comment';\nvar TYPE_DECLARATION = 'declaration';\n\n/**\n * @param {String} style\n * @param {Object} [options]\n * @return {Object[]}\n * @throws {TypeError}\n * @throws {Error}\n */\nmodule.exports = function (style, options) {\n  if (typeof style !== 'string') {\n    throw new TypeError('First argument must be a string');\n  }\n\n  if (!style) return [];\n\n  options = options || {};\n\n  /**\n   * Positional.\n   */\n  var lineno = 1;\n  var column = 1;\n\n  /**\n   * Update lineno and column based on `str`.\n   *\n   * @param {String} str\n   */\n  function updatePosition(str) {\n    var lines = str.match(NEWLINE_REGEX);\n    if (lines) lineno += lines.length;\n    var i = str.lastIndexOf(NEWLINE);\n    column = ~i ? str.length - i : column + str.length;\n  }\n\n  /**\n   * Mark position and patch `node.position`.\n   *\n   * @return {Function}\n   */\n  function position() {\n    var start = { line: lineno, column: column };\n    return function (node) {\n      node.position = new Position(start);\n      whitespace();\n      return node;\n    };\n  }\n\n  /**\n   * Store position information for a node.\n   *\n   * @constructor\n   * @property {Object} start\n   * @property {Object} end\n   * @property {undefined|String} source\n   */\n  function Position(start) {\n    this.start = start;\n    this.end = { line: lineno, column: column };\n    this.source = options.source;\n  }\n\n  /**\n   * Non-enumerable source string.\n   */\n  Position.prototype.content = style;\n\n  var errorsList = [];\n\n  /**\n   * Error `msg`.\n   *\n   * @param {String} msg\n   * @throws {Error}\n   */\n  function error(msg) {\n    var err = new Error(\n      options.source + ':' + lineno + ':' + column + ': ' + msg\n    );\n    err.reason = msg;\n    err.filename = options.source;\n    err.line = lineno;\n    err.column = column;\n    err.source = style;\n\n    if (options.silent) {\n      errorsList.push(err);\n    } else {\n      throw err;\n    }\n  }\n\n  /**\n   * Match `re` and return captures.\n   *\n   * @param {RegExp} re\n   * @return {undefined|Array}\n   */\n  function match(re) {\n    var m = re.exec(style);\n    if (!m) return;\n    var str = m[0];\n    updatePosition(str);\n    style = style.slice(str.length);\n    return m;\n  }\n\n  /**\n   * Parse whitespace.\n   */\n  function whitespace() {\n    match(WHITESPACE_REGEX);\n  }\n\n  /**\n   * Parse comments.\n   *\n   * @param {Object[]} [rules]\n   * @return {Object[]}\n   */\n  function comments(rules) {\n    var c;\n    rules = rules || [];\n    while ((c = comment())) {\n      if (c !== false) {\n        rules.push(c);\n      }\n    }\n    return rules;\n  }\n\n  /**\n   * Parse comment.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function comment() {\n    var pos = position();\n    if (FORWARD_SLASH != style.charAt(0) || ASTERISK != style.charAt(1)) return;\n\n    var i = 2;\n    while (\n      EMPTY_STRING != style.charAt(i) &&\n      (ASTERISK != style.charAt(i) || FORWARD_SLASH != style.charAt(i + 1))\n    ) {\n      ++i;\n    }\n    i += 2;\n\n    if (EMPTY_STRING === style.charAt(i - 1)) {\n      return error('End of comment missing');\n    }\n\n    var str = style.slice(2, i - 2);\n    column += 2;\n    updatePosition(str);\n    style = style.slice(i);\n    column += 2;\n\n    return pos({\n      type: TYPE_COMMENT,\n      comment: str\n    });\n  }\n\n  /**\n   * Parse declaration.\n   *\n   * @return {Object}\n   * @throws {Error}\n   */\n  function declaration() {\n    var pos = position();\n\n    // prop\n    var prop = match(PROPERTY_REGEX);\n    if (!prop) return;\n    comment();\n\n    // :\n    if (!match(COLON_REGEX)) return error(\"property missing ':'\");\n\n    // val\n    var val = match(VALUE_REGEX);\n\n    var ret = pos({\n      type: TYPE_DECLARATION,\n      property: trim(prop[0].replace(COMMENT_REGEX, EMPTY_STRING)),\n      value: val\n        ? trim(val[0].replace(COMMENT_REGEX, EMPTY_STRING))\n        : EMPTY_STRING\n    });\n\n    // ;\n    match(SEMICOLON_REGEX);\n\n    return ret;\n  }\n\n  /**\n   * Parse declarations.\n   *\n   * @return {Object[]}\n   */\n  function declarations() {\n    var decls = [];\n\n    comments(decls);\n\n    // declarations\n    var decl;\n    while ((decl = declaration())) {\n      if (decl !== false) {\n        decls.push(decl);\n        comments(decls);\n      }\n    }\n\n    return decls;\n  }\n\n  whitespace();\n  return declarations();\n};\n\n/**\n * Trim `str`.\n *\n * @param {String} str\n * @return {String}\n */\nfunction trim(str) {\n  return str ? str.replace(TRIM_REGEX, EMPTY_STRING) : EMPTY_STRING;\n}\n","'use strict';\n\nvar hasOwn = Object.prototype.hasOwnProperty;\nvar toStr = Object.prototype.toString;\nvar defineProperty = Object.defineProperty;\nvar gOPD = Object.getOwnPropertyDescriptor;\n\nvar isArray = function isArray(arr) {\n\tif (typeof Array.isArray === 'function') {\n\t\treturn Array.isArray(arr);\n\t}\n\n\treturn toStr.call(arr) === '[object Array]';\n};\n\nvar isPlainObject = function isPlainObject(obj) {\n\tif (!obj || toStr.call(obj) !== '[object Object]') {\n\t\treturn false;\n\t}\n\n\tvar hasOwnConstructor = hasOwn.call(obj, 'constructor');\n\tvar hasIsPrototypeOf = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');\n\t// Not own constructor property must be Object\n\tif (obj.constructor && !hasOwnConstructor && !hasIsPrototypeOf) {\n\t\treturn false;\n\t}\n\n\t// Own properties are enumerated firstly, so to speed up,\n\t// if last one is own, then all properties are own.\n\tvar key;\n\tfor (key in obj) { /**/ }\n\n\treturn typeof key === 'undefined' || hasOwn.call(obj, key);\n};\n\n// If name is '__proto__', and Object.defineProperty is available, define __proto__ as an own property on target\nvar setProperty = function setProperty(target, options) {\n\tif (defineProperty && options.name === '__proto__') {\n\t\tdefineProperty(target, options.name, {\n\t\t\tenumerable: true,\n\t\t\tconfigurable: true,\n\t\t\tvalue: options.newValue,\n\t\t\twritable: true\n\t\t});\n\t} else {\n\t\ttarget[options.name] = options.newValue;\n\t}\n};\n\n// Return undefined instead of __proto__ if '__proto__' is not an own property\nvar getProperty = function getProperty(obj, name) {\n\tif (name === '__proto__') {\n\t\tif (!hasOwn.call(obj, name)) {\n\t\t\treturn void 0;\n\t\t} else if (gOPD) {\n\t\t\t// In early versions of node, obj['__proto__'] is buggy when obj has\n\t\t\t// __proto__ as an own property. Object.getOwnPropertyDescriptor() works.\n\t\t\treturn gOPD(obj, name).value;\n\t\t}\n\t}\n\n\treturn obj[name];\n};\n\nmodule.exports = function extend() {\n\tvar options, name, src, copy, copyIsArray, clone;\n\tvar target = arguments[0];\n\tvar i = 1;\n\tvar length = arguments.length;\n\tvar deep = false;\n\n\t// Handle a deep copy situation\n\tif (typeof target === 'boolean') {\n\t\tdeep = target;\n\t\ttarget = arguments[1] || {};\n\t\t// skip the boolean and the target\n\t\ti = 2;\n\t}\n\tif (target == null || (typeof target !== 'object' && typeof target !== 'function')) {\n\t\ttarget = {};\n\t}\n\n\tfor (; i < length; ++i) {\n\t\toptions = arguments[i];\n\t\t// Only deal with non-null/undefined values\n\t\tif (options != null) {\n\t\t\t// Extend the base object\n\t\t\tfor (name in options) {\n\t\t\t\tsrc = getProperty(target, name);\n\t\t\t\tcopy = getProperty(options, name);\n\n\t\t\t\t// Prevent never-ending loop\n\t\t\t\tif (target !== copy) {\n\t\t\t\t\t// Recurse if we're merging plain objects or arrays\n\t\t\t\t\tif (deep && copy && (isPlainObject(copy) || (copyIsArray = isArray(copy)))) {\n\t\t\t\t\t\tif (copyIsArray) {\n\t\t\t\t\t\t\tcopyIsArray = false;\n\t\t\t\t\t\t\tclone = src && isArray(src) ? src : [];\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tclone = src && isPlainObject(src) ? src : {};\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Never move original objects, clone them\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: extend(deep, clone, copy) });\n\n\t\t\t\t\t// Don't bring in undefined values\n\t\t\t\t\t} else if (typeof copy !== 'undefined') {\n\t\t\t\t\t\tsetProperty(target, { name: name, newValue: copy });\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t// Return the modified object\n\treturn target;\n};\n","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.default = StyleToObject;\nvar inline_style_parser_1 = __importDefault(require(\"inline-style-parser\"));\n/**\n * Parses inline style to object.\n *\n * @param style - Inline style.\n * @param iterator - Iterator.\n * @returns - Style object or null.\n *\n * @example Parsing inline style to object:\n *\n * ```js\n * import parse from 'style-to-object';\n * parse('line-height: 42;'); // { 'line-height': '42' }\n * ```\n */\nfunction StyleToObject(style, iterator) {\n    var styleObject = null;\n    if (!style || typeof style !== 'string') {\n        return styleObject;\n    }\n    var declarations = (0, inline_style_parser_1.default)(style);\n    var hasIterator = typeof iterator === 'function';\n    declarations.forEach(function (declaration) {\n        if (declaration.type !== 'declaration') {\n            return;\n        }\n        var property = declaration.property, value = declaration.value;\n        if (hasIterator) {\n            iterator(property, value, declaration);\n        }\n        else if (value) {\n            styleObject = styleObject || {};\n            styleObject[property] = value;\n        }\n    });\n    return styleObject;\n}\n//# sourceMappingURL=index.js.map","\"use strict\";\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nvar style_to_object_1 = __importDefault(require(\"style-to-object\"));\nvar utilities_1 = require(\"./utilities\");\n/**\n * Parses CSS inline style to JavaScript object (camelCased).\n */\nfunction StyleToJS(style, options) {\n    var output = {};\n    if (!style || typeof style !== 'string') {\n        return output;\n    }\n    (0, style_to_object_1.default)(style, function (property, value) {\n        // skip CSS comment\n        if (property && value) {\n            output[(0, utilities_1.camelCase)(property, options)] = value;\n        }\n    });\n    return output;\n}\nStyleToJS.default = StyleToJS;\nmodule.exports = StyleToJS;\n//# sourceMappingURL=index.js.map","export function deprecate(fn) {\n  return fn\n}\n\nexport function equal() {}\n\nexport function ok() {}\n\nexport function unreachable() {}\n","/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [jsx=false]\n *   Support JSX identifiers (default: `false`).\n */\n\nconst startRe = /[$_\\p{ID_Start}]/u\nconst contRe = /[$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst contReJsx = /[-$_\\u{200C}\\u{200D}\\p{ID_Continue}]/u\nconst nameRe = /^[$_\\p{ID_Start}][$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\nconst nameReJsx = /^[$_\\p{ID_Start}][-$_\\u{200C}\\u{200D}\\p{ID_Continue}]*$/u\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Checks if the given code point can start an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @returns {boolean}\n *   Whether `code` can start an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function start(code) {\n  return code ? startRe.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given code point can continue an identifier.\n *\n * @param {number | undefined} code\n *   Code point to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `code` can continue an identifier.\n */\n// Note: `undefined` is supported so you can pass the result from `''.codePointAt`.\nexport function cont(code, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? contReJsx : contRe\n  return code ? re.test(String.fromCodePoint(code)) : false\n}\n\n/**\n * Checks if the given value is a valid identifier name.\n *\n * @param {string} name\n *   Identifier to check.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {boolean}\n *   Whether `name` can be an identifier.\n */\nexport function name(name, options) {\n  const settings = options || emptyOptions\n  const re = settings.jsx ? nameReJsx : nameRe\n  return re.test(name)\n}\n","/**\n * @typedef {import('hast').Nodes} Nodes\n */\n\n// HTML whitespace expression.\n// See <https://infra.spec.whatwg.org/#ascii-whitespace>.\nconst re = /[ \\t\\n\\f\\r]/g\n\n/**\n * Check if the given value is *inter-element whitespace*.\n *\n * @param {Nodes | string} thing\n *   Thing to check (`Node` or `string`).\n * @returns {boolean}\n *   Whether the `value` is inter-element whitespace (`boolean`): consisting of\n *   zero or more of space, tab (`\\t`), line feed (`\\n`), carriage return\n *   (`\\r`), or form feed (`\\f`); if a node is passed it must be a `Text` node,\n *   whose `value` field is checked.\n */\nexport function whitespace(thing) {\n  return typeof thing === 'object'\n    ? thing.type === 'text'\n      ? empty(thing.value)\n      : false\n    : empty(thing)\n}\n\n/**\n * @param {string} value\n * @returns {boolean}\n */\nfunction empty(value) {\n  return value.replace(re, '') === ''\n}\n","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Special cases for React (`Record<string, string>`).\n *\n * `hast` is close to `React` but differs in a couple of cases.\n * To get a React property from a hast property,\n * check if it is in `hastToReact`.\n * If it is, use the corresponding value;\n * otherwise, use the hast property.\n *\n * @type {Record<string, string>}\n */\nexport const hastToReact = {\n  classId: 'classID',\n  dataType: 'datatype',\n  itemId: 'itemID',\n  strokeDashArray: 'strokeDasharray',\n  strokeDashOffset: 'strokeDashoffset',\n  strokeLineCap: 'strokeLinecap',\n  strokeLineJoin: 'strokeLinejoin',\n  strokeMiterLimit: 'strokeMiterlimit',\n  typeOf: 'typeof',\n  xLinkActuate: 'xlinkActuate',\n  xLinkArcRole: 'xlinkArcrole',\n  xLinkHref: 'xlinkHref',\n  xLinkRole: 'xlinkRole',\n  xLinkShow: 'xlinkShow',\n  xLinkTitle: 'xlinkTitle',\n  xLinkType: 'xlinkType',\n  xmlnsXLink: 'xmlnsXlink'\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","/**\n * @import {Identifier, Literal, MemberExpression} from 'estree'\n * @import {Jsx, JsxDev, Options, Props} from 'hast-util-to-jsx-runtime'\n * @import {Element, Nodes, Parents, Root, Text} from 'hast'\n * @import {MdxFlowExpressionHast, MdxTextExpressionHast} from 'mdast-util-mdx-expression'\n * @import {MdxJsxFlowElementHast, MdxJsxTextElementHast} from 'mdast-util-mdx-jsx'\n * @import {MdxjsEsmHast} from 'mdast-util-mdxjs-esm'\n * @import {Position} from 'unist'\n * @import {Child, Create, Field, JsxElement, State, Style} from './types.js'\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {name as isIdentifierName} from 'estree-util-is-identifier-name'\nimport {whitespace} from 'hast-util-whitespace'\nimport {find, hastToReact, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport styleToJs from 'style-to-js'\nimport {pointStart} from 'unist-util-position'\nimport {VFileMessage} from 'vfile-message'\n\n// To do: next major: `Object.hasOwn`.\nconst own = {}.hasOwnProperty\n\n/** @type {Map<string, number>} */\nconst emptyMap = new Map()\n\nconst cap = /[A-Z]/g\n\n// `react-dom` triggers a warning for *any* white space in tables.\n// To follow GFM, `mdast-util-to-hast` injects line endings between elements.\n// Other tools might do so too, but they don’t do here, so we remove all of\n// that.\n\n// See: <https://github.com/facebook/react/pull/7081>.\n// See: <https://github.com/facebook/react/pull/7515>.\n// See: <https://github.com/remarkjs/remark-react/issues/64>.\n// See: <https://github.com/rehypejs/rehype-react/pull/29>.\n// See: <https://github.com/rehypejs/rehype-react/pull/32>.\n// See: <https://github.com/rehypejs/rehype-react/pull/45>.\nconst tableElements = new Set(['table', 'tbody', 'thead', 'tfoot', 'tr'])\n\nconst tableCellElement = new Set(['td', 'th'])\n\nconst docs = 'https://github.com/syntax-tree/hast-util-to-jsx-runtime'\n\n/**\n * Transform a hast tree to preact, react, solid, svelte, vue, etc.,\n * with an automatic JSX runtime.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options} options\n *   Configuration (required).\n * @returns {JsxElement}\n *   JSX element.\n */\n\nexport function toJsxRuntime(tree, options) {\n  if (!options || options.Fragment === undefined) {\n    throw new TypeError('Expected `Fragment` in options')\n  }\n\n  const filePath = options.filePath || undefined\n  /** @type {Create} */\n  let create\n\n  if (options.development) {\n    if (typeof options.jsxDEV !== 'function') {\n      throw new TypeError(\n        'Expected `jsxDEV` in options when `development: true`'\n      )\n    }\n\n    create = developmentCreate(filePath, options.jsxDEV)\n  } else {\n    if (typeof options.jsx !== 'function') {\n      throw new TypeError('Expected `jsx` in production options')\n    }\n\n    if (typeof options.jsxs !== 'function') {\n      throw new TypeError('Expected `jsxs` in production options')\n    }\n\n    create = productionCreate(filePath, options.jsx, options.jsxs)\n  }\n\n  /** @type {State} */\n  const state = {\n    Fragment: options.Fragment,\n    ancestors: [],\n    components: options.components || {},\n    create,\n    elementAttributeNameCase: options.elementAttributeNameCase || 'react',\n    evaluater: options.createEvaluater ? options.createEvaluater() : undefined,\n    filePath,\n    ignoreInvalidStyle: options.ignoreInvalidStyle || false,\n    passKeys: options.passKeys !== false,\n    passNode: options.passNode || false,\n    schema: options.space === 'svg' ? svg : html,\n    stylePropertyNameCase: options.stylePropertyNameCase || 'dom',\n    tableCellAlignToStyle: options.tableCellAlignToStyle !== false\n  }\n\n  const result = one(state, tree, undefined)\n\n  // JSX element.\n  if (result && typeof result !== 'string') {\n    return result\n  }\n\n  // Text node or something that turned into nothing.\n  return state.create(\n    tree,\n    state.Fragment,\n    {children: result || undefined},\n    undefined\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Nodes} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction one(state, node, key) {\n  if (node.type === 'element') {\n    return element(state, node, key)\n  }\n\n  if (node.type === 'mdxFlowExpression' || node.type === 'mdxTextExpression') {\n    return mdxExpression(state, node)\n  }\n\n  if (node.type === 'mdxJsxFlowElement' || node.type === 'mdxJsxTextElement') {\n    return mdxJsxElement(state, node, key)\n  }\n\n  if (node.type === 'mdxjsEsm') {\n    return mdxEsm(state, node)\n  }\n\n  if (node.type === 'root') {\n    return root(state, node, key)\n  }\n\n  if (node.type === 'text') {\n    return text(state, node)\n  }\n}\n\n/**\n * Handle element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction element(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.tagName.toLowerCase() === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type = findComponentFromName(state, node.tagName, false)\n  const props = createElementProps(state, node)\n  let children = createChildren(state, node)\n\n  if (tableElements.has(node.tagName)) {\n    children = children.filter(function (child) {\n      return typeof child === 'string' ? !whitespace(child) : true\n    })\n  }\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle MDX expression.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxFlowExpressionHast | MdxTextExpressionHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxExpression(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    const program = node.data.estree\n    const expression = program.body[0]\n    assert(expression.type === 'ExpressionStatement')\n\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateExpression(expression.expression)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX ESM.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxjsEsmHast} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxEsm(state, node) {\n  if (node.data && node.data.estree && state.evaluater) {\n    // Assume result is a child.\n    return /** @type {Child | undefined} */ (\n      state.evaluater.evaluateProgram(node.data.estree)\n    )\n  }\n\n  crashEstree(state, node.position)\n}\n\n/**\n * Handle MDX JSX.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction mdxJsxElement(state, node, key) {\n  const parentSchema = state.schema\n  let schema = parentSchema\n\n  if (node.name === 'svg' && parentSchema.space === 'html') {\n    schema = svg\n    state.schema = schema\n  }\n\n  state.ancestors.push(node)\n\n  const type =\n    node.name === null\n      ? state.Fragment\n      : findComponentFromName(state, node.name, true)\n  const props = createJsxElementProps(state, node)\n  const children = createChildren(state, node)\n\n  addNode(state, props, type, node)\n  addChildren(props, children)\n\n  // Restore.\n  state.ancestors.pop()\n  state.schema = parentSchema\n\n  return state.create(node, type, props, key)\n}\n\n/**\n * Handle root.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Root} node\n *   Current node.\n * @param {string | undefined} key\n *   Key.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction root(state, node, key) {\n  /** @type {Props} */\n  const props = {}\n\n  addChildren(props, createChildren(state, node))\n\n  return state.create(node, state.Fragment, props, key)\n}\n\n/**\n * Handle text.\n *\n * @param {State} _\n *   Info passed around.\n * @param {Text} node\n *   Current node.\n * @returns {Child | undefined}\n *   Child, optional.\n */\nfunction text(_, node) {\n  return node.value\n}\n\n/**\n * Add `node` to props.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Props} props\n *   Props.\n * @param {unknown} type\n *   Type.\n * @param {Element | MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addNode(state, props, type, node) {\n  // If this is swapped out for a component:\n  if (typeof type !== 'string' && type !== state.Fragment && state.passNode) {\n    props.node = node\n  }\n}\n\n/**\n * Add children to props.\n *\n * @param {Props} props\n *   Props.\n * @param {Array<Child>} children\n *   Children.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChildren(props, children) {\n  if (children.length > 0) {\n    const value = children.length > 1 ? children : children[0]\n\n    if (value) {\n      props.children = value\n    }\n  }\n}\n\n/**\n * @param {string | undefined} _\n *   Path to file.\n * @param {Jsx} jsx\n *   Dynamic.\n * @param {Jsx} jsxs\n *   Static.\n * @returns {Create}\n *   Create a production element.\n */\nfunction productionCreate(_, jsx, jsxs) {\n  return create\n  /** @type {Create} */\n  function create(_, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const fn = isStaticChildren ? jsxs : jsx\n    return key ? fn(type, props, key) : fn(type, props)\n  }\n}\n\n/**\n * @param {string | undefined} filePath\n *   Path to file.\n * @param {JsxDev} jsxDEV\n *   Development.\n * @returns {Create}\n *   Create a development element.\n */\nfunction developmentCreate(filePath, jsxDEV) {\n  return create\n  /** @type {Create} */\n  function create(node, type, props, key) {\n    // Only an array when there are 2 or more children.\n    const isStaticChildren = Array.isArray(props.children)\n    const point = pointStart(node)\n    return jsxDEV(\n      type,\n      props,\n      key,\n      isStaticChildren,\n      {\n        columnNumber: point ? point.column - 1 : undefined,\n        fileName: filePath,\n        lineNumber: point ? point.line : undefined\n      },\n      undefined\n    )\n  }\n}\n\n/**\n * Create props from an element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Element} node\n *   Current element.\n * @returns {Props}\n *   Props.\n */\nfunction createElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n  /** @type {string | undefined} */\n  let alignValue\n  /** @type {string} */\n  let prop\n\n  for (prop in node.properties) {\n    if (prop !== 'children' && own.call(node.properties, prop)) {\n      const result = createProperty(state, prop, node.properties[prop])\n\n      if (result) {\n        const [key, value] = result\n\n        if (\n          state.tableCellAlignToStyle &&\n          key === 'align' &&\n          typeof value === 'string' &&\n          tableCellElement.has(node.tagName)\n        ) {\n          alignValue = value\n        } else {\n          props[key] = value\n        }\n      }\n    }\n  }\n\n  if (alignValue) {\n    // Assume style is an object.\n    const style = /** @type {Style} */ (props.style || (props.style = {}))\n    style[state.stylePropertyNameCase === 'css' ? 'text-align' : 'textAlign'] =\n      alignValue\n  }\n\n  return props\n}\n\n/**\n * Create props from a JSX element.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdxJsxFlowElementHast | MdxJsxTextElementHast} node\n *   Current JSX element.\n * @returns {Props}\n *   Props.\n */\nfunction createJsxElementProps(state, node) {\n  /** @type {Props} */\n  const props = {}\n\n  for (const attribute of node.attributes) {\n    if (attribute.type === 'mdxJsxExpressionAttribute') {\n      if (attribute.data && attribute.data.estree && state.evaluater) {\n        const program = attribute.data.estree\n        const expression = program.body[0]\n        assert(expression.type === 'ExpressionStatement')\n        const objectExpression = expression.expression\n        assert(objectExpression.type === 'ObjectExpression')\n        const property = objectExpression.properties[0]\n        assert(property.type === 'SpreadElement')\n\n        Object.assign(\n          props,\n          state.evaluater.evaluateExpression(property.argument)\n        )\n      } else {\n        crashEstree(state, node.position)\n      }\n    } else {\n      // For JSX, the author is responsible of passing in the correct values.\n      const name = attribute.name\n      /** @type {unknown} */\n      let value\n\n      if (attribute.value && typeof attribute.value === 'object') {\n        if (\n          attribute.value.data &&\n          attribute.value.data.estree &&\n          state.evaluater\n        ) {\n          const program = attribute.value.data.estree\n          const expression = program.body[0]\n          assert(expression.type === 'ExpressionStatement')\n          value = state.evaluater.evaluateExpression(expression.expression)\n        } else {\n          crashEstree(state, node.position)\n        }\n      } else {\n        value = attribute.value === null ? true : attribute.value\n      }\n\n      // Assume a prop.\n      props[name] = /** @type {Props[keyof Props]} */ (value)\n    }\n  }\n\n  return props\n}\n\n/**\n * Create children.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Parents} node\n *   Current element.\n * @returns {Array<Child>}\n *   Children.\n */\nfunction createChildren(state, node) {\n  /** @type {Array<Child>} */\n  const children = []\n  let index = -1\n  /** @type {Map<string, number>} */\n  // Note: test this when Solid doesn’t want to merge my upcoming PR.\n  /* c8 ignore next */\n  const countsByName = state.passKeys ? new Map() : emptyMap\n\n  while (++index < node.children.length) {\n    const child = node.children[index]\n    /** @type {string | undefined} */\n    let key\n\n    if (state.passKeys) {\n      const name =\n        child.type === 'element'\n          ? child.tagName\n          : child.type === 'mdxJsxFlowElement' ||\n              child.type === 'mdxJsxTextElement'\n            ? child.name\n            : undefined\n\n      if (name) {\n        const count = countsByName.get(name) || 0\n        key = name + '-' + count\n        countsByName.set(name, count + 1)\n      }\n    }\n\n    const result = one(state, child, key)\n    if (result !== undefined) children.push(result)\n  }\n\n  return children\n}\n\n/**\n * Handle a property.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Field | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(state, prop, value) {\n  const info = find(state.schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value))\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  // React only accepts `style` as object.\n  if (info.property === 'style') {\n    let styleObject =\n      typeof value === 'object' ? value : parseStyle(state, String(value))\n\n    if (state.stylePropertyNameCase === 'css') {\n      styleObject = transformStylesToCssCasing(styleObject)\n    }\n\n    return ['style', styleObject]\n  }\n\n  return [\n    state.elementAttributeNameCase === 'react' && info.space\n      ? hastToReact[info.property] || info.property\n      : info.attribute,\n    value\n  ]\n}\n\n/**\n * Parse a CSS declaration to an object.\n *\n * @param {State} state\n *   Info passed around.\n * @param {string} value\n *   CSS declarations.\n * @returns {Style}\n *   Properties.\n * @throws\n *   Throws `VFileMessage` when CSS cannot be parsed.\n */\nfunction parseStyle(state, value) {\n  try {\n    return styleToJs(value, {reactCompat: true})\n  } catch (error) {\n    if (state.ignoreInvalidStyle) {\n      return {}\n    }\n\n    const cause = /** @type {Error} */ (error)\n    const message = new VFileMessage('Cannot parse `style` attribute', {\n      ancestors: state.ancestors,\n      cause,\n      ruleId: 'style',\n      source: 'hast-util-to-jsx-runtime'\n    })\n    message.file = state.filePath || undefined\n    message.url = docs + '#cannot-parse-style-attribute'\n\n    throw message\n  }\n}\n\n/**\n * Create a JSX name from a string.\n *\n * @param {State} state\n *   To do.\n * @param {string} name\n *   Name.\n * @param {boolean} allowExpression\n *   Allow member expressions and identifiers.\n * @returns {unknown}\n *   To do.\n */\nfunction findComponentFromName(state, name, allowExpression) {\n  /** @type {Identifier | Literal | MemberExpression} */\n  let result\n\n  if (!allowExpression) {\n    result = {type: 'Literal', value: name}\n  } else if (name.includes('.')) {\n    const identifiers = name.split('.')\n    let index = -1\n    /** @type {Identifier | Literal | MemberExpression | undefined} */\n    let node\n\n    while (++index < identifiers.length) {\n      /** @type {Identifier | Literal} */\n      const prop = isIdentifierName(identifiers[index])\n        ? {type: 'Identifier', name: identifiers[index]}\n        : {type: 'Literal', value: identifiers[index]}\n      node = node\n        ? {\n            type: 'MemberExpression',\n            object: node,\n            property: prop,\n            computed: Boolean(index && prop.type === 'Literal'),\n            optional: false\n          }\n        : prop\n    }\n\n    assert(node, 'always a result')\n    result = node\n  } else {\n    result =\n      isIdentifierName(name) && !/^[a-z]/.test(name)\n        ? {type: 'Identifier', name}\n        : {type: 'Literal', value: name}\n  }\n\n  // Only literals can be passed in `components` currently.\n  // No identifiers / member expressions.\n  if (result.type === 'Literal') {\n    const name = /** @type {string | number} */ (result.value)\n    return own.call(state.components, name) ? state.components[name] : name\n  }\n\n  // Assume component.\n  if (state.evaluater) {\n    return state.evaluater.evaluateExpression(result)\n  }\n\n  crashEstree(state)\n}\n\n/**\n * @param {State} state\n * @param {Position | undefined} [place]\n * @returns {never}\n */\nfunction crashEstree(state, place) {\n  const message = new VFileMessage(\n    'Cannot handle MDX estrees without `createEvaluater`',\n    {\n      ancestors: state.ancestors,\n      place,\n      ruleId: 'mdx-estree',\n      source: 'hast-util-to-jsx-runtime'\n    }\n  )\n  message.file = state.filePath || undefined\n  message.url = docs + '#cannot-handle-mdx-estrees-without-createevaluater'\n\n  throw message\n}\n\n/**\n * Transform a DOM casing style object to a CSS casing style object.\n *\n * @param {Style} domCasing\n * @returns {Style}\n */\nfunction transformStylesToCssCasing(domCasing) {\n  /** @type {Style} */\n  const cssCasing = {}\n  /** @type {string} */\n  let from\n\n  for (from in domCasing) {\n    if (own.call(domCasing, from)) {\n      cssCasing[transformStyleToCssCasing(from)] = domCasing[from]\n    }\n  }\n\n  return cssCasing\n}\n\n/**\n * Transform a DOM casing style field to a CSS casing style field.\n *\n * @param {string} from\n * @returns {string}\n */\nfunction transformStyleToCssCasing(from) {\n  let to = from.replace(cap, toDash)\n  // Handle `ms-xxx` -> `-ms-xxx`.\n  if (to.slice(0, 3) === 'ms-') to = '-' + to\n  return to\n}\n\n/**\n * Make `$0` dash cased.\n *\n * @param {string} $0\n *   Capitalized ASCII leter.\n * @returns {string}\n *   Dash and lower letter.\n */\nfunction toDash($0) {\n  return '-' + $0.toLowerCase()\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * HTML URL properties.\n *\n * Each key is a property name and each value is a list of tag names it applies\n * to or `null` if it applies to all elements.\n *\n * @type {Record<string, Array<string> | null>}\n */\nexport const urlAttributes = {\n  action: ['form'],\n  cite: ['blockquote', 'del', 'ins', 'q'],\n  data: ['object'],\n  formAction: ['button', 'input'],\n  href: ['a', 'area', 'base', 'link'],\n  icon: ['menuitem'],\n  itemId: null,\n  manifest: ['html'],\n  ping: ['a', 'area'],\n  poster: ['video'],\n  src: [\n    'audio',\n    'embed',\n    'iframe',\n    'img',\n    'input',\n    'script',\n    'source',\n    'track',\n    'video'\n  ]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * Like `Array#splice`, but smarter for giant arrays.\n *\n * `Array#splice` takes all items to be inserted as individual argument which\n * causes a stack overflow in V8 when trying to insert 100k items for instance.\n *\n * Otherwise, this does not return the removed items, and takes `items` as an\n * array instead of rest parameters.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {number} start\n *   Index to remove/insert at (can be negative).\n * @param {number} remove\n *   Number of items to remove.\n * @param {Array<T>} items\n *   Items to inject into `list`.\n * @returns {undefined}\n *   Nothing.\n */\nexport function splice(list, start, remove, items) {\n  const end = list.length;\n  let chunkStart = 0;\n  /** @type {Array<unknown>} */\n  let parameters;\n\n  // Make start between zero and `end` (included).\n  if (start < 0) {\n    start = -start > end ? 0 : end + start;\n  } else {\n    start = start > end ? end : start;\n  }\n  remove = remove > 0 ? remove : 0;\n\n  // No need to chunk the items if there’s only a couple (10k) items.\n  if (items.length < 10000) {\n    parameters = Array.from(items);\n    parameters.unshift(start, remove);\n    // @ts-expect-error Hush, it’s fine.\n    list.splice(...parameters);\n  } else {\n    // Delete `remove` items starting from `start`\n    if (remove) list.splice(start, remove);\n\n    // Insert the items in chunks to not cause stack overflows.\n    while (chunkStart < items.length) {\n      parameters = items.slice(chunkStart, chunkStart + 10000);\n      parameters.unshift(start, 0);\n      // @ts-expect-error Hush, it’s fine.\n      list.splice(...parameters);\n      chunkStart += 10000;\n      start += 10000;\n    }\n  }\n}\n\n/**\n * Append `items` (an array) at the end of `list` (another array).\n * When `list` was empty, returns `items` instead.\n *\n * This prevents a potentially expensive operation when `list` is empty,\n * and adds items in batches to prevent V8 from hanging.\n *\n * @template {unknown} T\n *   Item type.\n * @param {Array<T>} list\n *   List to operate on.\n * @param {Array<T>} items\n *   Items to add to `list`.\n * @returns {Array<T>}\n *   Either `list` or `items`.\n */\nexport function push(list, items) {\n  if (list.length > 0) {\n    splice(list, list.length, 0, items);\n    return list;\n  }\n  return items;\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Extension,\n *   Handles,\n *   HtmlExtension,\n *   NormalizedExtension\n * } from 'micromark-util-types'\n */\n\nimport {splice} from 'micromark-util-chunked'\n\nconst hasOwnProperty = {}.hasOwnProperty\n\n/**\n * Combine multiple syntax extensions into one.\n *\n * @param {ReadonlyArray<Extension>} extensions\n *   List of syntax extensions.\n * @returns {NormalizedExtension}\n *   A single combined extension.\n */\nexport function combineExtensions(extensions) {\n  /** @type {NormalizedExtension} */\n  const all = {}\n  let index = -1\n\n  while (++index < extensions.length) {\n    syntaxExtension(all, extensions[index])\n  }\n\n  return all\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {NormalizedExtension} all\n *   Extension to merge into.\n * @param {Extension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction syntaxExtension(all, extension) {\n  /** @type {keyof Extension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    /** @type {Record<string, unknown>} */\n    const left = maybe || (all[hook] = {})\n    /** @type {Record<string, unknown> | undefined} */\n    const right = extension[hook]\n    /** @type {string} */\n    let code\n\n    if (right) {\n      for (code in right) {\n        if (!hasOwnProperty.call(left, code)) left[code] = []\n        const value = right[code]\n        constructs(\n          // @ts-expect-error Looks like a list.\n          left[code],\n          Array.isArray(value) ? value : value ? [value] : []\n        )\n      }\n    }\n  }\n}\n\n/**\n * Merge `list` into `existing` (both lists of constructs).\n * Mutates `existing`.\n *\n * @param {Array<unknown>} existing\n *   List of constructs to merge into.\n * @param {Array<unknown>} list\n *   List of constructs to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction constructs(existing, list) {\n  let index = -1\n  /** @type {Array<unknown>} */\n  const before = []\n\n  while (++index < list.length) {\n    // @ts-expect-error Looks like an object.\n    ;(list[index].add === 'after' ? existing : before).push(list[index])\n  }\n\n  splice(existing, 0, 0, before)\n}\n\n/**\n * Combine multiple HTML extensions into one.\n *\n * @param {ReadonlyArray<HtmlExtension>} htmlExtensions\n *   List of HTML extensions.\n * @returns {HtmlExtension}\n *   Single combined HTML extension.\n */\nexport function combineHtmlExtensions(htmlExtensions) {\n  /** @type {HtmlExtension} */\n  const handlers = {}\n  let index = -1\n\n  while (++index < htmlExtensions.length) {\n    htmlExtension(handlers, htmlExtensions[index])\n  }\n\n  return handlers\n}\n\n/**\n * Merge `extension` into `all`.\n *\n * @param {HtmlExtension} all\n *   Extension to merge into.\n * @param {HtmlExtension} extension\n *   Extension to merge.\n * @returns {undefined}\n *   Nothing.\n */\nfunction htmlExtension(all, extension) {\n  /** @type {keyof HtmlExtension} */\n  let hook\n\n  for (hook in extension) {\n    const maybe = hasOwnProperty.call(all, hook) ? all[hook] : undefined\n    const left = maybe || (all[hook] = {})\n    const right = extension[hook]\n    /** @type {keyof Handles} */\n    let type\n\n    if (right) {\n      for (type in right) {\n        // @ts-expect-error assume document vs regular handler are managed correctly.\n        left[type] = right[type]\n      }\n    }\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { markdownSpace } from 'micromark-util-character';\n\n// To do: implement `spaceOrTab`, `spaceOrTabMinMax`, `spaceOrTabWithOptions`.\n\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   spaces in markdown are often optional, in which case this factory can be\n *     used and `ok` will be switched to whether spaces were found or not\n * *   one line ending or space can be detected with `markdownSpace(code)` right\n *     before using `factorySpace`\n *\n * ###### Examples\n *\n * Where `␉` represents a tab (plus how much it expands) and `␠` represents a\n * single space.\n *\n * ```markdown\n * ␉\n * ␠␠␠␠\n * ␉␠\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {TokenType} type\n *   Type (`' \\t'`).\n * @param {number | undefined} [max=Infinity]\n *   Max (exclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factorySpace(effects, ok, type, max) {\n  const limit = max ? max - 1 : Number.POSITIVE_INFINITY;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownSpace(code)) {\n      effects.enter(type);\n      return prefix(code);\n    }\n    return ok(code);\n  }\n\n  /** @type {State} */\n  function prefix(code) {\n    if (markdownSpace(code) && size++ < limit) {\n      effects.consume(code);\n      return prefix;\n    }\n    effects.exit(type);\n    return ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const content = {\n  tokenize: initializeContent\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Initializer}\n *   Content.\n */\nfunction initializeContent(effects) {\n  const contentStart = effects.attempt(this.parser.constructs.contentInitial, afterContentStartConstruct, paragraphInitial);\n  /** @type {Token} */\n  let previous;\n  return contentStart;\n\n  /** @type {State} */\n  function afterContentStartConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, contentStart, \"linePrefix\");\n  }\n\n  /** @type {State} */\n  function paragraphInitial(code) {\n    effects.enter(\"paragraph\");\n    return lineStart(code);\n  }\n\n  /** @type {State} */\n  function lineStart(code) {\n    const token = effects.enter(\"chunkText\", {\n      contentType: \"text\",\n      previous\n    });\n    if (previous) {\n      previous.next = token;\n    }\n    previous = token;\n    return data(code);\n  }\n\n  /** @type {State} */\n  function data(code) {\n    if (code === null) {\n      effects.exit(\"chunkText\");\n      effects.exit(\"paragraph\");\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      effects.exit(\"chunkText\");\n      return lineStart;\n    }\n\n    // Data.\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Construct,\n *   ContainerState,\n *   InitialConstruct,\n *   Initializer,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @typedef {[Construct, ContainerState]} StackItem\n *   Construct and its state.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {InitialConstruct} */\nexport const document = {\n  tokenize: initializeDocument\n};\n\n/** @type {Construct} */\nconst containerConstruct = {\n  tokenize: tokenizeContainer\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeDocument(effects) {\n  const self = this;\n  /** @type {Array<StackItem>} */\n  const stack = [];\n  let continued = 0;\n  /** @type {TokenizeContext | undefined} */\n  let childFlow;\n  /** @type {Token | undefined} */\n  let childToken;\n  /** @type {number} */\n  let lineStartOffset;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    // First we iterate through the open blocks, starting with the root\n    // document, and descending through last children down to the last open\n    // block.\n    // Each block imposes a condition that the line must satisfy if the block is\n    // to remain open.\n    // For example, a block quote requires a `>` character.\n    // A paragraph requires a non-blank line.\n    // In this phase we may match all or just some of the open blocks.\n    // But we cannot close unmatched blocks yet, because we may have a lazy\n    // continuation line.\n    if (continued < stack.length) {\n      const item = stack[continued];\n      self.containerState = item[1];\n      return effects.attempt(item[0].continuation, documentContinue, checkNewContainers)(code);\n    }\n\n    // Done.\n    return checkNewContainers(code);\n  }\n\n  /** @type {State} */\n  function documentContinue(code) {\n    continued++;\n\n    // Note: this field is called `_closeFlow` but it also closes containers.\n    // Perhaps a good idea to rename it but it’s already used in the wild by\n    // extensions.\n    if (self.containerState._closeFlow) {\n      self.containerState._closeFlow = undefined;\n      if (childFlow) {\n        closeFlow();\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when dealing with lazy lines in `writeToChild`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the flow chunk.\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          point = self.events[indexBeforeFlow][1].end;\n          break;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      let index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n      return checkNewContainers(code);\n    }\n    return start(code);\n  }\n\n  /** @type {State} */\n  function checkNewContainers(code) {\n    // Next, after consuming the continuation markers for existing blocks, we\n    // look for new block starts (e.g. `>` for a block quote).\n    // If we encounter a new block start, we close any blocks unmatched in\n    // step 1 before creating the new block as a child of the last matched\n    // block.\n    if (continued === stack.length) {\n      // No need to `check` whether there’s a container, of `exitContainers`\n      // would be moot.\n      // We can instead immediately `attempt` to parse one.\n      if (!childFlow) {\n        return documentContinued(code);\n      }\n\n      // If we have concrete content, such as block HTML or fenced code,\n      // we can’t have containers “pierce” into them, so we can immediately\n      // start.\n      if (childFlow.currentConstruct && childFlow.currentConstruct.concrete) {\n        return flowStart(code);\n      }\n\n      // If we do have flow, it could still be a blank line,\n      // but we’d be interrupting it w/ a new container if there’s a current\n      // construct.\n      // To do: next major: remove `_gfmTableDynamicInterruptHack` (no longer\n      // needed in micromark-extension-gfm-table@1.0.6).\n      self.interrupt = Boolean(childFlow.currentConstruct && !childFlow._gfmTableDynamicInterruptHack);\n    }\n\n    // Check if there is a new container.\n    self.containerState = {};\n    return effects.check(containerConstruct, thereIsANewContainer, thereIsNoNewContainer)(code);\n  }\n\n  /** @type {State} */\n  function thereIsANewContainer(code) {\n    if (childFlow) closeFlow();\n    exitContainers(continued);\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function thereIsNoNewContainer(code) {\n    self.parser.lazy[self.now().line] = continued !== stack.length;\n    lineStartOffset = self.now().offset;\n    return flowStart(code);\n  }\n\n  /** @type {State} */\n  function documentContinued(code) {\n    // Try new containers.\n    self.containerState = {};\n    return effects.attempt(containerConstruct, containerContinue, flowStart)(code);\n  }\n\n  /** @type {State} */\n  function containerContinue(code) {\n    continued++;\n    stack.push([self.currentConstruct, self.containerState]);\n    // Try another.\n    return documentContinued(code);\n  }\n\n  /** @type {State} */\n  function flowStart(code) {\n    if (code === null) {\n      if (childFlow) closeFlow();\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    childFlow = childFlow || self.parser.flow(self.now());\n    effects.enter(\"chunkFlow\", {\n      _tokenizer: childFlow,\n      contentType: \"flow\",\n      previous: childToken\n    });\n    return flowContinue(code);\n  }\n\n  /** @type {State} */\n  function flowContinue(code) {\n    if (code === null) {\n      writeToChild(effects.exit(\"chunkFlow\"), true);\n      exitContainers(0);\n      effects.consume(code);\n      return;\n    }\n    if (markdownLineEnding(code)) {\n      effects.consume(code);\n      writeToChild(effects.exit(\"chunkFlow\"));\n      // Get ready for the next line.\n      continued = 0;\n      self.interrupt = undefined;\n      return start;\n    }\n    effects.consume(code);\n    return flowContinue;\n  }\n\n  /**\n   * @param {Token} token\n   *   Token.\n   * @param {boolean | undefined} [endOfFile]\n   *   Whether the token is at the end of the file (default: `false`).\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function writeToChild(token, endOfFile) {\n    const stream = self.sliceStream(token);\n    if (endOfFile) stream.push(null);\n    token.previous = childToken;\n    if (childToken) childToken.next = token;\n    childToken = token;\n    childFlow.defineSkip(token.start);\n    childFlow.write(stream);\n\n    // Alright, so we just added a lazy line:\n    //\n    // ```markdown\n    // > a\n    // b.\n    //\n    // Or:\n    //\n    // > ~~~c\n    // d\n    //\n    // Or:\n    //\n    // > | e |\n    // f\n    // ```\n    //\n    // The construct in the second example (fenced code) does not accept lazy\n    // lines, so it marked itself as done at the end of its first line, and\n    // then the content construct parses `d`.\n    // Most constructs in markdown match on the first line: if the first line\n    // forms a construct, a non-lazy line can’t “unmake” it.\n    //\n    // The construct in the third example is potentially a GFM table, and\n    // those are *weird*.\n    // It *could* be a table, from the first line, if the following line\n    // matches a condition.\n    // In this case, that second line is lazy, which “unmakes” the first line\n    // and turns the whole into one content block.\n    //\n    // We’ve now parsed the non-lazy and the lazy line, and can figure out\n    // whether the lazy line started a new flow block.\n    // If it did, we exit the current containers between the two flow blocks.\n    if (self.parser.lazy[token.start.line]) {\n      let index = childFlow.events.length;\n      while (index--) {\n        if (\n        // The token starts before the line ending…\n        childFlow.events[index][1].start.offset < lineStartOffset && (\n        // …and either is not ended yet…\n        !childFlow.events[index][1].end ||\n        // …or ends after it.\n        childFlow.events[index][1].end.offset > lineStartOffset)) {\n          // Exit: there’s still something open, which means it’s a lazy line\n          // part of something.\n          return;\n        }\n      }\n\n      // Note: this algorithm for moving events around is similar to the\n      // algorithm when closing flow in `documentContinue`.\n      const indexBeforeExits = self.events.length;\n      let indexBeforeFlow = indexBeforeExits;\n      /** @type {boolean | undefined} */\n      let seen;\n      /** @type {Point | undefined} */\n      let point;\n\n      // Find the previous chunk (the one before the lazy line).\n      while (indexBeforeFlow--) {\n        if (self.events[indexBeforeFlow][0] === 'exit' && self.events[indexBeforeFlow][1].type === \"chunkFlow\") {\n          if (seen) {\n            point = self.events[indexBeforeFlow][1].end;\n            break;\n          }\n          seen = true;\n        }\n      }\n      exitContainers(continued);\n\n      // Fix positions.\n      index = indexBeforeExits;\n      while (index < self.events.length) {\n        self.events[index][1].end = {\n          ...point\n        };\n        index++;\n      }\n\n      // Inject the exits earlier (they’re still also at the end).\n      splice(self.events, indexBeforeFlow + 1, 0, self.events.slice(indexBeforeExits));\n\n      // Discard the duplicate exits.\n      self.events.length = index;\n    }\n  }\n\n  /**\n   * @param {number} size\n   *   Size.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function exitContainers(size) {\n    let index = stack.length;\n\n    // Exit open containers.\n    while (index-- > size) {\n      const entry = stack[index];\n      self.containerState = entry[1];\n      entry[0].exit.call(self, effects);\n    }\n    stack.length = size;\n  }\n  function closeFlow() {\n    childFlow.write([null]);\n    childToken = undefined;\n    childFlow = undefined;\n    self.containerState._closeFlow = undefined;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n *   Tokenizer.\n */\nfunction tokenizeContainer(effects, ok, nok) {\n  // Always populated by defaults.\n\n  return factorySpace(effects, effects.attempt(this.parser.constructs.document, ok, nok), \"linePrefix\", this.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4);\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blankLine = {\n  partial: true,\n  tokenize: tokenizeBlankLine\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLine(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of blank line.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *     ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    return markdownSpace(code) ? factorySpace(effects, after, \"linePrefix\")(code) : after(code);\n  }\n\n  /**\n   * At eof/eol, after optional whitespace.\n   *\n   * > 👉 **Note**: `␠` represents a space character.\n   *\n   * ```markdown\n   * > | ␠␠␊\n   *       ^\n   * > | ␊\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * Some of the internal operations of micromark do lots of editing\n * operations on very large arrays. This runs into problems with two\n * properties of most circa-2020 JavaScript interpreters:\n *\n *  - Array-length modifications at the high end of an array (push/pop) are\n *    expected to be common and are implemented in (amortized) time\n *    proportional to the number of elements added or removed, whereas\n *    other operations (shift/unshift and splice) are much less efficient.\n *  - Function arguments are passed on the stack, so adding tens of thousands\n *    of elements to an array with `arr.push(...newElements)` will frequently\n *    cause stack overflows. (see <https://stackoverflow.com/questions/22123769/rangeerror-maximum-call-stack-size-exceeded-why>)\n *\n * SpliceBuffers are an implementation of gap buffers, which are a\n * generalization of the \"queue made of two stacks\" idea. The splice buffer\n * maintains a cursor, and moving the cursor has cost proportional to the\n * distance the cursor moves, but inserting, deleting, or splicing in\n * new information at the cursor is as efficient as the push/pop operation.\n * This allows for an efficient sequence of splices (or pushes, pops, shifts,\n * or unshifts) as long such edits happen at the same part of the array or\n * generally sweep through the array from the beginning to the end.\n *\n * The interface for splice buffers also supports large numbers of inputs by\n * passing a single array argument rather passing multiple arguments on the\n * function call stack.\n *\n * @template T\n *   Item type.\n */\nexport class SpliceBuffer {\n  /**\n   * @param {ReadonlyArray<T> | null | undefined} [initial]\n   *   Initial items (optional).\n   * @returns\n   *   Splice buffer.\n   */\n  constructor(initial) {\n    /** @type {Array<T>} */\n    this.left = initial ? [...initial] : [];\n    /** @type {Array<T>} */\n    this.right = [];\n  }\n\n  /**\n   * Array access;\n   * does not move the cursor.\n   *\n   * @param {number} index\n   *   Index.\n   * @return {T}\n   *   Item.\n   */\n  get(index) {\n    if (index < 0 || index >= this.left.length + this.right.length) {\n      throw new RangeError('Cannot access index `' + index + '` in a splice buffer of size `' + (this.left.length + this.right.length) + '`');\n    }\n    if (index < this.left.length) return this.left[index];\n    return this.right[this.right.length - index + this.left.length - 1];\n  }\n\n  /**\n   * The length of the splice buffer, one greater than the largest index in the\n   * array.\n   */\n  get length() {\n    return this.left.length + this.right.length;\n  }\n\n  /**\n   * Remove and return `list[0]`;\n   * moves the cursor to `0`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  shift() {\n    this.setCursor(0);\n    return this.right.pop();\n  }\n\n  /**\n   * Slice the buffer to get an array;\n   * does not move the cursor.\n   *\n   * @param {number} start\n   *   Start.\n   * @param {number | null | undefined} [end]\n   *   End (optional).\n   * @returns {Array<T>}\n   *   Array of items.\n   */\n  slice(start, end) {\n    /** @type {number} */\n    const stop = end === null || end === undefined ? Number.POSITIVE_INFINITY : end;\n    if (stop < this.left.length) {\n      return this.left.slice(start, stop);\n    }\n    if (start > this.left.length) {\n      return this.right.slice(this.right.length - stop + this.left.length, this.right.length - start + this.left.length).reverse();\n    }\n    return this.left.slice(start).concat(this.right.slice(this.right.length - stop + this.left.length).reverse());\n  }\n\n  /**\n   * Mimics the behavior of Array.prototype.splice() except for the change of\n   * interface necessary to avoid segfaults when patching in very large arrays.\n   *\n   * This operation moves cursor is moved to `start` and results in the cursor\n   * placed after any inserted items.\n   *\n   * @param {number} start\n   *   Start;\n   *   zero-based index at which to start changing the array;\n   *   negative numbers count backwards from the end of the array and values\n   *   that are out-of bounds are clamped to the appropriate end of the array.\n   * @param {number | null | undefined} [deleteCount=0]\n   *   Delete count (default: `0`);\n   *   maximum number of elements to delete, starting from start.\n   * @param {Array<T> | null | undefined} [items=[]]\n   *   Items to include in place of the deleted items (default: `[]`).\n   * @return {Array<T>}\n   *   Any removed items.\n   */\n  splice(start, deleteCount, items) {\n    /** @type {number} */\n    const count = deleteCount || 0;\n    this.setCursor(Math.trunc(start));\n    const removed = this.right.splice(this.right.length - count, Number.POSITIVE_INFINITY);\n    if (items) chunkedPush(this.left, items);\n    return removed.reverse();\n  }\n\n  /**\n   * Remove and return the highest-numbered item in the array, so\n   * `list[list.length - 1]`;\n   * Moves the cursor to `length`.\n   *\n   * @returns {T | undefined}\n   *   Item, optional.\n   */\n  pop() {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    return this.left.pop();\n  }\n\n  /**\n   * Inserts a single item to the high-numbered side of the array;\n   * moves the cursor to `length`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  push(item) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    this.left.push(item);\n  }\n\n  /**\n   * Inserts many items to the high-numbered side of the array.\n   * Moves the cursor to `length`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  pushMany(items) {\n    this.setCursor(Number.POSITIVE_INFINITY);\n    chunkedPush(this.left, items);\n  }\n\n  /**\n   * Inserts a single item to the low-numbered side of the array;\n   * Moves the cursor to `0`.\n   *\n   * @param {T} item\n   *   Item.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshift(item) {\n    this.setCursor(0);\n    this.right.push(item);\n  }\n\n  /**\n   * Inserts many items to the low-numbered side of the array;\n   * moves the cursor to `0`.\n   *\n   * @param {Array<T>} items\n   *   Items.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  unshiftMany(items) {\n    this.setCursor(0);\n    chunkedPush(this.right, items.reverse());\n  }\n\n  /**\n   * Move the cursor to a specific position in the array. Requires\n   * time proportional to the distance moved.\n   *\n   * If `n < 0`, the cursor will end up at the beginning.\n   * If `n > length`, the cursor will end up at the end.\n   *\n   * @param {number} n\n   *   Position.\n   * @return {undefined}\n   *   Nothing.\n   */\n  setCursor(n) {\n    if (n === this.left.length || n > this.left.length && this.right.length === 0 || n < 0 && this.left.length === 0) return;\n    if (n < this.left.length) {\n      // Move cursor to the this.left\n      const removed = this.left.splice(n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.right, removed.reverse());\n    } else {\n      // Move cursor to the this.right\n      const removed = this.right.splice(this.left.length + this.right.length - n, Number.POSITIVE_INFINITY);\n      chunkedPush(this.left, removed.reverse());\n    }\n  }\n}\n\n/**\n * Avoid stack overflow by pushing items onto the stack in segments\n *\n * @template T\n *   Item type.\n * @param {Array<T>} list\n *   List to inject into.\n * @param {ReadonlyArray<T>} right\n *   Items to inject.\n * @return {undefined}\n *   Nothing.\n */\nfunction chunkedPush(list, right) {\n  /** @type {number} */\n  let chunkStart = 0;\n  if (right.length < 10000) {\n    list.push(...right);\n  } else {\n    while (chunkStart < right.length) {\n      list.push(...right.slice(chunkStart, chunkStart + 10000));\n      chunkStart += 10000;\n    }\n  }\n}","/**\n * @import {Chunk, Event, Token} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { SpliceBuffer } from './lib/splice-buffer.js';\n\n// Hidden API exposed for testing.\nexport { SpliceBuffer } from './lib/splice-buffer.js';\n\n/**\n * Tokenize subcontent.\n *\n * @param {Array<Event>} eventsArray\n *   List of events.\n * @returns {boolean}\n *   Whether subtokens were found.\n */\n// eslint-disable-next-line complexity\nexport function subtokenize(eventsArray) {\n  /** @type {Record<string, number>} */\n  const jumps = {};\n  let index = -1;\n  /** @type {Event} */\n  let event;\n  /** @type {number | undefined} */\n  let lineIndex;\n  /** @type {number} */\n  let otherIndex;\n  /** @type {Event} */\n  let otherEvent;\n  /** @type {Array<Event>} */\n  let parameters;\n  /** @type {Array<Event>} */\n  let subevents;\n  /** @type {boolean | undefined} */\n  let more;\n  const events = new SpliceBuffer(eventsArray);\n  while (++index < events.length) {\n    while (index in jumps) {\n      index = jumps[index];\n    }\n    event = events.get(index);\n\n    // Add a hook for the GFM tasklist extension, which needs to know if text\n    // is in the first content of a list item.\n    if (index && event[1].type === \"chunkFlow\" && events.get(index - 1)[1].type === \"listItemPrefix\") {\n      subevents = event[1]._tokenizer.events;\n      otherIndex = 0;\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"lineEndingBlank\") {\n        otherIndex += 2;\n      }\n      if (otherIndex < subevents.length && subevents[otherIndex][1].type === \"content\") {\n        while (++otherIndex < subevents.length) {\n          if (subevents[otherIndex][1].type === \"content\") {\n            break;\n          }\n          if (subevents[otherIndex][1].type === \"chunkText\") {\n            subevents[otherIndex][1]._isInFirstContentOfListItem = true;\n            otherIndex++;\n          }\n        }\n      }\n    }\n\n    // Enter.\n    if (event[0] === 'enter') {\n      if (event[1].contentType) {\n        Object.assign(jumps, subcontent(events, index));\n        index = jumps[index];\n        more = true;\n      }\n    }\n    // Exit.\n    else if (event[1]._container) {\n      otherIndex = index;\n      lineIndex = undefined;\n      while (otherIndex--) {\n        otherEvent = events.get(otherIndex);\n        if (otherEvent[1].type === \"lineEnding\" || otherEvent[1].type === \"lineEndingBlank\") {\n          if (otherEvent[0] === 'enter') {\n            if (lineIndex) {\n              events.get(lineIndex)[1].type = \"lineEndingBlank\";\n            }\n            otherEvent[1].type = \"lineEnding\";\n            lineIndex = otherIndex;\n          }\n        } else if (otherEvent[1].type === \"linePrefix\" || otherEvent[1].type === \"listItemIndent\") {\n          // Move past.\n        } else {\n          break;\n        }\n      }\n      if (lineIndex) {\n        // Fix position.\n        event[1].end = {\n          ...events.get(lineIndex)[1].start\n        };\n\n        // Switch container exit w/ line endings.\n        parameters = events.slice(lineIndex, index);\n        parameters.unshift(event);\n        events.splice(lineIndex, index - lineIndex + 1, parameters);\n      }\n    }\n  }\n\n  // The changes to the `events` buffer must be copied back into the eventsArray\n  splice(eventsArray, 0, Number.POSITIVE_INFINITY, events.slice(0));\n  return !more;\n}\n\n/**\n * Tokenize embedded tokens.\n *\n * @param {SpliceBuffer<Event>} events\n *   Events.\n * @param {number} eventIndex\n *   Index.\n * @returns {Record<string, number>}\n *   Gaps.\n */\nfunction subcontent(events, eventIndex) {\n  const token = events.get(eventIndex)[1];\n  const context = events.get(eventIndex)[2];\n  let startPosition = eventIndex - 1;\n  /** @type {Array<number>} */\n  const startPositions = [];\n  let tokenizer = token._tokenizer;\n  if (!tokenizer) {\n    tokenizer = context.parser[token.contentType](token.start);\n    if (token._contentTypeTextTrailing) {\n      tokenizer._contentTypeTextTrailing = true;\n    }\n  }\n  const childEvents = tokenizer.events;\n  /** @type {Array<[number, number]>} */\n  const jumps = [];\n  /** @type {Record<string, number>} */\n  const gaps = {};\n  /** @type {Array<Chunk>} */\n  let stream;\n  /** @type {Token | undefined} */\n  let previous;\n  let index = -1;\n  /** @type {Token | undefined} */\n  let current = token;\n  let adjust = 0;\n  let start = 0;\n  const breaks = [start];\n\n  // Loop forward through the linked tokens to pass them in order to the\n  // subtokenizer.\n  while (current) {\n    // Find the position of the event for this token.\n    while (events.get(++startPosition)[1] !== current) {\n      // Empty.\n    }\n    startPositions.push(startPosition);\n    if (!current._tokenizer) {\n      stream = context.sliceStream(current);\n      if (!current.next) {\n        stream.push(null);\n      }\n      if (previous) {\n        tokenizer.defineSkip(current.start);\n      }\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = true;\n      }\n      tokenizer.write(stream);\n      if (current._isInFirstContentOfListItem) {\n        tokenizer._gfmTasklistFirstContentOfListItem = undefined;\n      }\n    }\n\n    // Unravel the next token.\n    previous = current;\n    current = current.next;\n  }\n\n  // Now, loop back through all events (and linked tokens), to figure out which\n  // parts belong where.\n  current = token;\n  while (++index < childEvents.length) {\n    if (\n    // Find a void token that includes a break.\n    childEvents[index][0] === 'exit' && childEvents[index - 1][0] === 'enter' && childEvents[index][1].type === childEvents[index - 1][1].type && childEvents[index][1].start.line !== childEvents[index][1].end.line) {\n      start = index + 1;\n      breaks.push(start);\n      // Help GC.\n      current._tokenizer = undefined;\n      current.previous = undefined;\n      current = current.next;\n    }\n  }\n\n  // Help GC.\n  tokenizer.events = [];\n\n  // If there’s one more token (which is the cases for lines that end in an\n  // EOF), that’s perfect: the last point we found starts it.\n  // If there isn’t then make sure any remaining content is added to it.\n  if (current) {\n    // Help GC.\n    current._tokenizer = undefined;\n    current.previous = undefined;\n  } else {\n    breaks.pop();\n  }\n\n  // Now splice the events from the subtokenizer into the current events,\n  // moving back to front so that splice indices aren’t affected.\n  index = breaks.length;\n  while (index--) {\n    const slice = childEvents.slice(breaks[index], breaks[index + 1]);\n    const start = startPositions.pop();\n    jumps.push([start, start + slice.length - 1]);\n    events.splice(start, 2, slice);\n  }\n  jumps.reverse();\n  index = -1;\n  while (++index < jumps.length) {\n    gaps[adjust + jumps[index][0]] = adjust + jumps[index][1];\n    adjust += jumps[index][1] - jumps[index][0] - 1;\n  }\n  return gaps;\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { subtokenize } from 'micromark-util-subtokenize';\n/**\n * No name because it must not be turned off.\n * @type {Construct}\n */\nexport const content = {\n  resolve: resolveContent,\n  tokenize: tokenizeContent\n};\n\n/** @type {Construct} */\nconst continuationConstruct = {\n  partial: true,\n  tokenize: tokenizeContinuation\n};\n\n/**\n * Content is transparent: it’s parsed right now. That way, definitions are also\n * parsed right now: before text in paragraphs (specifically, media) are parsed.\n *\n * @type {Resolver}\n */\nfunction resolveContent(events) {\n  subtokenize(events);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContent(effects, ok) {\n  /** @type {Token | undefined} */\n  let previous;\n  return chunkStart;\n\n  /**\n   * Before a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkStart(code) {\n    effects.enter(\"content\");\n    previous = effects.enter(\"chunkContent\", {\n      contentType: \"content\"\n    });\n    return chunkInside(code);\n  }\n\n  /**\n   * In a content chunk.\n   *\n   * ```markdown\n   * > | abc\n   *     ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function chunkInside(code) {\n    if (code === null) {\n      return contentEnd(code);\n    }\n\n    // To do: in `markdown-rs`, each line is parsed on its own, and everything\n    // is stitched together resolving.\n    if (markdownLineEnding(code)) {\n      return effects.check(continuationConstruct, contentContinue, contentEnd)(code);\n    }\n\n    // Data.\n    effects.consume(code);\n    return chunkInside;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentEnd(code) {\n    effects.exit(\"chunkContent\");\n    effects.exit(\"content\");\n    return ok(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function contentContinue(code) {\n    effects.consume(code);\n    effects.exit(\"chunkContent\");\n    previous.next = effects.enter(\"chunkContent\", {\n      contentType: \"content\",\n      previous\n    });\n    previous = previous.next;\n    return chunkInside;\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeContinuation(effects, ok, nok) {\n  const self = this;\n  return startLookahead;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function startLookahead(code) {\n    effects.exit(\"chunkContent\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, prefixed, \"linePrefix\");\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function prefixed(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n\n    // Always populated by defaults.\n\n    const tail = self.events[self.events.length - 1];\n    if (!self.parser.constructs.disable.null.includes('codeIndented') && tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4) {\n      return ok(code);\n    }\n    return effects.interrupt(self.parser.constructs.flow, nok, ok)(code);\n  }\n}","/**\n * @import {\n *   InitialConstruct,\n *   Initializer,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nimport { blankLine, content } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {InitialConstruct} */\nexport const flow = {\n  tokenize: initializeFlow\n};\n\n/**\n * @this {TokenizeContext}\n *   Self.\n * @type {Initializer}\n *   Initializer.\n */\nfunction initializeFlow(effects) {\n  const self = this;\n  const initial = effects.attempt(\n  // Try to parse a blank line.\n  blankLine, atBlankEnding,\n  // Try to parse initial flow (essentially, only code).\n  effects.attempt(this.parser.constructs.flowInitial, afterConstruct, factorySpace(effects, effects.attempt(this.parser.constructs.flow, afterConstruct, effects.attempt(content, afterConstruct)), \"linePrefix\")));\n  return initial;\n\n  /** @type {State} */\n  function atBlankEnding(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEndingBlank\");\n    effects.consume(code);\n    effects.exit(\"lineEndingBlank\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n\n  /** @type {State} */\n  function afterConstruct(code) {\n    if (code === null) {\n      effects.consume(code);\n      return;\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    self.currentConstruct = undefined;\n    return initial;\n  }\n}","/**\n * @import {\n *   Code,\n *   InitialConstruct,\n *   Initializer,\n *   Resolver,\n *   State,\n *   TokenizeContext\n * } from 'micromark-util-types'\n */\n\nexport const resolver = {\n  resolveAll: createResolver()\n};\nexport const string = initializeFactory('string');\nexport const text = initializeFactory('text');\n\n/**\n * @param {'string' | 'text'} field\n *   Field.\n * @returns {InitialConstruct}\n *   Construct.\n */\nfunction initializeFactory(field) {\n  return {\n    resolveAll: createResolver(field === 'text' ? resolveAllLineSuffixes : undefined),\n    tokenize: initializeText\n  };\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Initializer}\n   */\n  function initializeText(effects) {\n    const self = this;\n    const constructs = this.parser.constructs[field];\n    const text = effects.attempt(constructs, start, notText);\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      return atBreak(code) ? text(code) : notText(code);\n    }\n\n    /** @type {State} */\n    function notText(code) {\n      if (code === null) {\n        effects.consume(code);\n        return;\n      }\n      effects.enter(\"data\");\n      effects.consume(code);\n      return data;\n    }\n\n    /** @type {State} */\n    function data(code) {\n      if (atBreak(code)) {\n        effects.exit(\"data\");\n        return text(code);\n      }\n\n      // Data.\n      effects.consume(code);\n      return data;\n    }\n\n    /**\n     * @param {Code} code\n     *   Code.\n     * @returns {boolean}\n     *   Whether the code is a break.\n     */\n    function atBreak(code) {\n      if (code === null) {\n        return true;\n      }\n      const list = constructs[code];\n      let index = -1;\n      if (list) {\n        // Always populated by defaults.\n\n        while (++index < list.length) {\n          const item = list[index];\n          if (!item.previous || item.previous.call(self, self.previous)) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n  }\n}\n\n/**\n * @param {Resolver | undefined} [extraResolver]\n *   Resolver.\n * @returns {Resolver}\n *   Resolver.\n */\nfunction createResolver(extraResolver) {\n  return resolveAllText;\n\n  /** @type {Resolver} */\n  function resolveAllText(events, context) {\n    let index = -1;\n    /** @type {number | undefined} */\n    let enter;\n\n    // A rather boring computation (to merge adjacent `data` events) which\n    // improves mm performance by 29%.\n    while (++index <= events.length) {\n      if (enter === undefined) {\n        if (events[index] && events[index][1].type === \"data\") {\n          enter = index;\n          index++;\n        }\n      } else if (!events[index] || events[index][1].type !== \"data\") {\n        // Don’t do anything if there is one data token.\n        if (index !== enter + 2) {\n          events[enter][1].end = events[index - 1][1].end;\n          events.splice(enter + 2, index - enter - 2);\n          index = enter + 2;\n        }\n        enter = undefined;\n      }\n    }\n    return extraResolver ? extraResolver(events, context) : events;\n  }\n}\n\n/**\n * A rather ugly set of instructions which again looks at chunks in the input\n * stream.\n * The reason to do this here is that it is *much* faster to parse in reverse.\n * And that we can’t hook into `null` to split the line suffix before an EOF.\n * To do: figure out if we can make this into a clean utility, or even in core.\n * As it will be useful for GFMs literal autolink extension (and maybe even\n * tables?)\n *\n * @type {Resolver}\n */\nfunction resolveAllLineSuffixes(events, context) {\n  let eventIndex = 0; // Skip first.\n\n  while (++eventIndex <= events.length) {\n    if ((eventIndex === events.length || events[eventIndex][1].type === \"lineEnding\") && events[eventIndex - 1][1].type === \"data\") {\n      const data = events[eventIndex - 1][1];\n      const chunks = context.sliceStream(data);\n      let index = chunks.length;\n      let bufferIndex = -1;\n      let size = 0;\n      /** @type {boolean | undefined} */\n      let tabs;\n      while (index--) {\n        const chunk = chunks[index];\n        if (typeof chunk === 'string') {\n          bufferIndex = chunk.length;\n          while (chunk.charCodeAt(bufferIndex - 1) === 32) {\n            size++;\n            bufferIndex--;\n          }\n          if (bufferIndex) break;\n          bufferIndex = -1;\n        }\n        // Number\n        else if (chunk === -2) {\n          tabs = true;\n          size++;\n        } else if (chunk === -1) {\n          // Empty\n        } else {\n          // Replacement character, exit.\n          index++;\n          break;\n        }\n      }\n\n      // Allow final trailing whitespace.\n      if (context._contentTypeTextTrailing && eventIndex === events.length) {\n        size = 0;\n      }\n      if (size) {\n        const token = {\n          type: eventIndex === events.length || tabs || size < 2 ? \"lineSuffix\" : \"hardBreakTrailing\",\n          start: {\n            _bufferIndex: index ? bufferIndex : data.start._bufferIndex + bufferIndex,\n            _index: data.start._index + index,\n            line: data.end.line,\n            column: data.end.column - size,\n            offset: data.end.offset - size\n          },\n          end: {\n            ...data.end\n          }\n        };\n        data.end = {\n          ...token.start\n        };\n        if (data.start.offset === data.end.offset) {\n          Object.assign(data, token);\n        } else {\n          events.splice(eventIndex, 0, ['enter', token, context], ['exit', token, context]);\n          eventIndex += 2;\n        }\n      }\n      eventIndex++;\n    }\n  }\n  return events;\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const thematicBreak = {\n  name: 'thematicBreak',\n  tokenize: tokenizeThematicBreak\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeThematicBreak(effects, ok, nok) {\n  let size = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of thematic break.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"thematicBreak\");\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at marker.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    marker = code;\n    return atBreak(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.enter(\"thematicBreakSequence\");\n      return sequence(code);\n    }\n    if (size >= 3 && (code === null || markdownLineEnding(code))) {\n      effects.exit(\"thematicBreak\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   * > | ***\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequence(code) {\n    if (code === marker) {\n      effects.consume(code);\n      size++;\n      return sequence;\n    }\n    effects.exit(\"thematicBreakSequence\");\n    return markdownSpace(code) ? factorySpace(effects, atBreak, \"whitespace\")(code) : atBreak(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiDigit, markdownSpace } from 'micromark-util-character';\nimport { blankLine } from './blank-line.js';\nimport { thematicBreak } from './thematic-break.js';\n\n/** @type {Construct} */\nexport const list = {\n  continuation: {\n    tokenize: tokenizeListContinuation\n  },\n  exit: tokenizeListEnd,\n  name: 'list',\n  tokenize: tokenizeListStart\n};\n\n/** @type {Construct} */\nconst listItemPrefixWhitespaceConstruct = {\n  partial: true,\n  tokenize: tokenizeListItemPrefixWhitespace\n};\n\n/** @type {Construct} */\nconst indentConstruct = {\n  partial: true,\n  tokenize: tokenizeIndent\n};\n\n// To do: `markdown-rs` parses list items on their own and later stitches them\n// together.\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListStart(effects, ok, nok) {\n  const self = this;\n  const tail = self.events[self.events.length - 1];\n  let initialSize = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n  let size = 0;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    const kind = self.containerState.type || (code === 42 || code === 43 || code === 45 ? \"listUnordered\" : \"listOrdered\");\n    if (kind === \"listUnordered\" ? !self.containerState.marker || code === self.containerState.marker : asciiDigit(code)) {\n      if (!self.containerState.type) {\n        self.containerState.type = kind;\n        effects.enter(kind, {\n          _container: true\n        });\n      }\n      if (kind === \"listUnordered\") {\n        effects.enter(\"listItemPrefix\");\n        return code === 42 || code === 45 ? effects.check(thematicBreak, nok, atMarker)(code) : atMarker(code);\n      }\n      if (!self.interrupt || code === 49) {\n        effects.enter(\"listItemPrefix\");\n        effects.enter(\"listItemValue\");\n        return inside(code);\n      }\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function inside(code) {\n    if (asciiDigit(code) && ++size < 10) {\n      effects.consume(code);\n      return inside;\n    }\n    if ((!self.interrupt || size < 2) && (self.containerState.marker ? code === self.containerState.marker : code === 41 || code === 46)) {\n      effects.exit(\"listItemValue\");\n      return atMarker(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   **/\n  function atMarker(code) {\n    effects.enter(\"listItemMarker\");\n    effects.consume(code);\n    effects.exit(\"listItemMarker\");\n    self.containerState.marker = self.containerState.marker || code;\n    return effects.check(blankLine,\n    // Can’t be empty when interrupting.\n    self.interrupt ? nok : onBlank, effects.attempt(listItemPrefixWhitespaceConstruct, endOfPrefix, otherPrefix));\n  }\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.initialBlankLine = true;\n    initialSize++;\n    return endOfPrefix(code);\n  }\n\n  /** @type {State} */\n  function otherPrefix(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"listItemPrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"listItemPrefixWhitespace\");\n      return endOfPrefix;\n    }\n    return nok(code);\n  }\n\n  /** @type {State} */\n  function endOfPrefix(code) {\n    self.containerState.size = initialSize + self.sliceSerialize(effects.exit(\"listItemPrefix\"), true).length;\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListContinuation(effects, ok, nok) {\n  const self = this;\n  self.containerState._closeFlow = undefined;\n  return effects.check(blankLine, onBlank, notBlank);\n\n  /** @type {State} */\n  function onBlank(code) {\n    self.containerState.furtherBlankLines = self.containerState.furtherBlankLines || self.containerState.initialBlankLine;\n\n    // We have a blank line.\n    // Still, try to consume at most the items size.\n    return factorySpace(effects, ok, \"listItemIndent\", self.containerState.size + 1)(code);\n  }\n\n  /** @type {State} */\n  function notBlank(code) {\n    if (self.containerState.furtherBlankLines || !markdownSpace(code)) {\n      self.containerState.furtherBlankLines = undefined;\n      self.containerState.initialBlankLine = undefined;\n      return notInCurrentItem(code);\n    }\n    self.containerState.furtherBlankLines = undefined;\n    self.containerState.initialBlankLine = undefined;\n    return effects.attempt(indentConstruct, ok, notInCurrentItem)(code);\n  }\n\n  /** @type {State} */\n  function notInCurrentItem(code) {\n    // While we do continue, we signal that the flow should be closed.\n    self.containerState._closeFlow = true;\n    // As we’re closing flow, we’re no longer interrupting.\n    self.interrupt = undefined;\n    // Always populated by defaults.\n\n    return factorySpace(effects, effects.attempt(list, ok, nok), \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, \"listItemIndent\", self.containerState.size + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"listItemIndent\" && tail[2].sliceSerialize(tail[1], true).length === self.containerState.size ? ok(code) : nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Exiter}\n */\nfunction tokenizeListEnd(effects) {\n  effects.exit(this.containerState.type);\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeListItemPrefixWhitespace(effects, ok, nok) {\n  const self = this;\n\n  // Always populated by defaults.\n\n  return factorySpace(effects, afterPrefix, \"listItemPrefixWhitespace\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4 + 1);\n\n  /** @type {State} */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return !markdownSpace(code) && tail && tail[1].type === \"listItemPrefixWhitespace\" ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Exiter,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const blockQuote = {\n  continuation: {\n    tokenize: tokenizeBlockQuoteContinuation\n  },\n  exit,\n  name: 'blockQuote',\n  tokenize: tokenizeBlockQuoteStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of block quote.\n   *\n   * ```markdown\n   * > | > a\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 62) {\n      const state = self.containerState;\n      if (!state.open) {\n        effects.enter(\"blockQuote\", {\n          _container: true\n        });\n        state.open = true;\n      }\n      effects.enter(\"blockQuotePrefix\");\n      effects.enter(\"blockQuoteMarker\");\n      effects.consume(code);\n      effects.exit(\"blockQuoteMarker\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>`, before optional whitespace.\n   *\n   * ```markdown\n   * > | > a\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (markdownSpace(code)) {\n      effects.enter(\"blockQuotePrefixWhitespace\");\n      effects.consume(code);\n      effects.exit(\"blockQuotePrefixWhitespace\");\n      effects.exit(\"blockQuotePrefix\");\n      return ok;\n    }\n    effects.exit(\"blockQuotePrefix\");\n    return ok(code);\n  }\n}\n\n/**\n * Start of block quote continuation.\n *\n * ```markdown\n *   | > a\n * > | > b\n *     ^\n * ```\n *\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlockQuoteContinuation(effects, ok, nok) {\n  const self = this;\n  return contStart;\n\n  /**\n   * Start of block quote continuation.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contStart(code) {\n    if (markdownSpace(code)) {\n      // Always populated by defaults.\n\n      return factorySpace(effects, contBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return contBefore(code);\n  }\n\n  /**\n   * At `>`, after optional whitespace.\n   *\n   * Also used to parse the first block quote opening.\n   *\n   * ```markdown\n   *   | > a\n   * > | > b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function contBefore(code) {\n    return effects.attempt(blockQuote, ok, nok)(code);\n  }\n}\n\n/** @type {Exiter} */\nfunction exit(effects) {\n  effects.exit(\"blockQuote\");\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State, TokenType} from 'micromark-util-types'\n */\n\nimport { asciiControl, markdownLineEndingOrSpace, markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse destinations.\n *\n * ###### Examples\n *\n * ```markdown\n * <a>\n * <a\\>b>\n * <a b>\n * <a)>\n * a\n * a\\)b\n * a(b)c\n * a(b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type for whole (`<a>` or `b`).\n * @param {TokenType} literalType\n *   Type when enclosed (`<a>`).\n * @param {TokenType} literalMarkerType\n *   Type for enclosing (`<` and `>`).\n * @param {TokenType} rawType\n *   Type when not enclosed (`b`).\n * @param {TokenType} stringType\n *   Type for the value (`a` or `b`).\n * @param {number | undefined} [max=Infinity]\n *   Depth of nested parens (inclusive).\n * @returns {State}\n *   Start state.\n */\nexport function factoryDestination(effects, ok, nok, type, literalType, literalMarkerType, rawType, stringType, max) {\n  const limit = max || Number.POSITIVE_INFINITY;\n  let balance = 0;\n  return start;\n\n  /**\n   * Start of destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *     ^\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 60) {\n      effects.enter(type);\n      effects.enter(literalType);\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      return enclosedBefore;\n    }\n\n    // ASCII control, space, closing paren.\n    if (code === null || code === 32 || code === 41 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.enter(type);\n    effects.enter(rawType);\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return raw(code);\n  }\n\n  /**\n   * After `<`, at an enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedBefore(code) {\n    if (code === 62) {\n      effects.enter(literalMarkerType);\n      effects.consume(code);\n      effects.exit(literalMarkerType);\n      effects.exit(literalType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return enclosed(code);\n  }\n\n  /**\n   * In enclosed destination.\n   *\n   * ```markdown\n   * > | <aa>\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosed(code) {\n    if (code === 62) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      return enclosedBefore(code);\n    }\n    if (code === null || code === 60 || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? enclosedEscape : enclosed;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | <a\\*a>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function enclosedEscape(code) {\n    if (code === 60 || code === 62 || code === 92) {\n      effects.consume(code);\n      return enclosed;\n    }\n    return enclosed(code);\n  }\n\n  /**\n   * In raw destination.\n   *\n   * ```markdown\n   * > | aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function raw(code) {\n    if (!balance && (code === null || code === 41 || markdownLineEndingOrSpace(code))) {\n      effects.exit(\"chunkString\");\n      effects.exit(stringType);\n      effects.exit(rawType);\n      effects.exit(type);\n      return ok(code);\n    }\n    if (balance < limit && code === 40) {\n      effects.consume(code);\n      balance++;\n      return raw;\n    }\n    if (code === 41) {\n      effects.consume(code);\n      balance--;\n      return raw;\n    }\n\n    // ASCII control (but *not* `\\0`) and space and `(`.\n    // Note: in `markdown-rs`, `\\0` exists in codes, in `micromark-js` it\n    // doesn’t.\n    if (code === null || code === 32 || code === 40 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return code === 92 ? rawEscape : raw;\n  }\n\n  /**\n   * After `\\`, at special character.\n   *\n   * ```markdown\n   * > | a\\*a\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function rawEscape(code) {\n    if (code === 40 || code === 41 || code === 92) {\n      effects.consume(code);\n      return raw;\n    }\n    return raw(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Effects,\n *   State,\n *   TokenizeContext,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse labels.\n *\n * > 👉 **Note**: labels in markdown are capped at 999 characters in the string.\n *\n * ###### Examples\n *\n * ```markdown\n * [a]\n * [a\n * b]\n * [a\\]b]\n * ```\n *\n * @this {TokenizeContext}\n *   Tokenize context.\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole label (`[a]`).\n * @param {TokenType} markerType\n *   Type for the markers (`[` and `]`).\n * @param {TokenType} stringType\n *   Type for the identifier (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryLabel(effects, ok, nok, type, markerType, stringType) {\n  const self = this;\n  let size = 0;\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /**\n   * Start of label.\n   *\n   * ```markdown\n   * > | [a]\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(type);\n    effects.enter(markerType);\n    effects.consume(code);\n    effects.exit(markerType);\n    effects.enter(stringType);\n    return atBreak;\n  }\n\n  /**\n   * In label, at something, before something else.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (size > 999 || code === null || code === 91 || code === 93 && !seen ||\n    // To do: remove in the future once we’ve switched from\n    // `micromark-extension-footnote` to `micromark-extension-gfm-footnote`,\n    // which doesn’t need this.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    code === 94 && !size && '_hiddenFootnoteSupport' in self.parser.constructs) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit(stringType);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n\n    // To do: indent? Link chunks and EOLs together?\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return atBreak;\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return labelInside(code);\n  }\n\n  /**\n   * In label, in text.\n   *\n   * ```markdown\n   * > | [a]\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (code === null || code === 91 || code === 93 || markdownLineEnding(code) || size++ > 999) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    if (!seen) seen = !markdownSpace(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | [a\\*a]\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {\n *   Code,\n *   Effects,\n *   State,\n *   TokenType\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/**\n * Parse titles.\n *\n * ###### Examples\n *\n * ```markdown\n * \"a\"\n * 'b'\n * (c)\n * \"a\n * b\"\n * 'a\n *     b'\n * (a\\)b)\n * ```\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @param {State} nok\n *   State switched to when unsuccessful.\n * @param {TokenType} type\n *   Type of the whole title (`\"a\"`, `'b'`, `(c)`).\n * @param {TokenType} markerType\n *   Type for the markers (`\"`, `'`, `(`, and `)`).\n * @param {TokenType} stringType\n *   Type for the value (`a`).\n * @returns {State}\n *   Start state.\n */\nexport function factoryTitle(effects, ok, nok, type, markerType, stringType) {\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of title.\n   *\n   * ```markdown\n   * > | \"a\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      effects.enter(type);\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      marker = code === 40 ? 41 : code;\n      return begin;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After opening marker.\n   *\n   * This is also used at the closing marker.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function begin(code) {\n    if (code === marker) {\n      effects.enter(markerType);\n      effects.consume(code);\n      effects.exit(markerType);\n      effects.exit(type);\n      return ok;\n    }\n    effects.enter(stringType);\n    return atBreak(code);\n  }\n\n  /**\n   * At something, before something else.\n   *\n   * ```markdown\n   * > | \"a\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === marker) {\n      effects.exit(stringType);\n      return begin(marker);\n    }\n    if (code === null) {\n      return nok(code);\n    }\n\n    // Note: blank lines can’t exist in content.\n    if (markdownLineEnding(code)) {\n      // To do: use `space_or_tab_eol_with_options`, connect.\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return factorySpace(effects, atBreak, \"linePrefix\");\n    }\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return inside(code);\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker || code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? escape : inside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * ```markdown\n   * > | \"a\\*b\"\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function escape(code) {\n    if (code === marker || code === 92) {\n      effects.consume(code);\n      return inside;\n    }\n    return inside(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Effects, State} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/**\n * Parse spaces and tabs.\n *\n * There is no `nok` parameter:\n *\n * *   line endings or spaces in markdown are often optional, in which case this\n *     factory can be used and `ok` will be switched to whether spaces were found\n *     or not\n * *   one line ending or space can be detected with\n *     `markdownLineEndingOrSpace(code)` right before using `factoryWhitespace`\n *\n * @param {Effects} effects\n *   Context.\n * @param {State} ok\n *   State switched to when successful.\n * @returns {State}\n *   Start state.\n */\nexport function factoryWhitespace(effects, ok) {\n  /** @type {boolean} */\n  let seen;\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      seen = true;\n      return start;\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, start, seen ? \"linePrefix\" : \"lineSuffix\")(code);\n    }\n    return ok(code);\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factorySpace } from 'micromark-factory-space';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\n/** @type {Construct} */\nexport const definition = {\n  name: 'definition',\n  tokenize: tokenizeDefinition\n};\n\n/** @type {Construct} */\nconst titleBefore = {\n  partial: true,\n  tokenize: tokenizeTitleBefore\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeDefinition(effects, ok, nok) {\n  const self = this;\n  /** @type {string} */\n  let identifier;\n  return start;\n\n  /**\n   * At start of a definition.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Do not interrupt paragraphs (but do follow definitions).\n    // To do: do `interrupt` the way `markdown-rs` does.\n    // To do: parse whitespace the way `markdown-rs` does.\n    effects.enter(\"definition\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `[`.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    // To do: parse whitespace the way `markdown-rs` does.\n\n    return factoryLabel.call(self, effects, labelAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionLabel\", \"definitionLabelMarker\", \"definitionLabelString\")(code);\n  }\n\n  /**\n   * After label.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    identifier = normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1));\n    if (code === 58) {\n      effects.enter(\"definitionMarker\");\n      effects.consume(code);\n      effects.exit(\"definitionMarker\");\n      return markerAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After marker.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function markerAfter(code) {\n    // Note: whitespace is optional.\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, destinationBefore)(code) : destinationBefore(code);\n  }\n\n  /**\n   * Before destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationBefore(code) {\n    return factoryDestination(effects, destinationAfter,\n    // Note: we don’t need to reset the way `markdown-rs` does.\n    nok, \"definitionDestination\", \"definitionDestinationLiteral\", \"definitionDestinationLiteralMarker\", \"definitionDestinationRaw\", \"definitionDestinationString\")(code);\n  }\n\n  /**\n   * After destination.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function destinationAfter(code) {\n    return effects.attempt(titleBefore, after, after)(code);\n  }\n\n  /**\n   * After definition.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return markdownSpace(code) ? factorySpace(effects, afterWhitespace, \"whitespace\")(code) : afterWhitespace(code);\n  }\n\n  /**\n   * After definition, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterWhitespace(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"definition\");\n\n      // Note: we don’t care about uniqueness.\n      // It’s likely that that doesn’t happen very frequently.\n      // It is more likely that it wastes precious time.\n      self.parser.defined.push(identifier);\n\n      // To do: `markdown-rs` interrupt.\n      // // You’d be interrupting.\n      // tokenizer.interrupt = true\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeTitleBefore(effects, ok, nok) {\n  return titleBefore;\n\n  /**\n   * After destination, at whitespace.\n   *\n   * ```markdown\n   * > | [a]: b\n   *           ^\n   * > | [a]: b \"c\"\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, beforeMarker)(code) : nok(code);\n  }\n\n  /**\n   * At title.\n   *\n   * ```markdown\n   *   | [a]: b\n   * > | \"c\"\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeMarker(code) {\n    return factoryTitle(effects, titleAfter, nok, \"definitionTitle\", \"definitionTitleMarker\", \"definitionTitleString\")(code);\n  }\n\n  /**\n   * After title.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfter(code) {\n    return markdownSpace(code) ? factorySpace(effects, titleAfterOptionalWhitespace, \"whitespace\")(code) : titleAfterOptionalWhitespace(code);\n  }\n\n  /**\n   * After title, after optional whitespace.\n   *\n   * ```markdown\n   * > | [a]: b \"c\"\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function titleAfterOptionalWhitespace(code) {\n    return code === null || markdownLineEnding(code) ? ok(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeIndented = {\n  name: 'codeIndented',\n  tokenize: tokenizeCodeIndented\n};\n\n/** @type {Construct} */\nconst furtherStart = {\n  partial: true,\n  tokenize: tokenizeFurtherStart\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeIndented(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of code (indented).\n   *\n   * > **Parsing note**: it is not needed to check if this first line is a\n   * > filled line (that it has a non-whitespace character), because blank lines\n   * > are parsed already, so we never run into that.\n   *\n   * ```markdown\n   * > |     aaa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: manually check if interrupting like `markdown-rs`.\n\n    effects.enter(\"codeIndented\");\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? atBreak(code) : nok(code);\n  }\n\n  /**\n   * At a break.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === null) {\n      return after(code);\n    }\n    if (markdownLineEnding(code)) {\n      return effects.attempt(furtherStart, atBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return inside(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return inside;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    effects.exit(\"codeIndented\");\n    // To do: allow interrupting like `markdown-rs`.\n    // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeFurtherStart(effects, ok, nok) {\n  const self = this;\n  return furtherStart;\n\n  /**\n   * At eol, trying to parse another indent.\n   *\n   * ```markdown\n   * > |     aaa\n   *            ^\n   *   |     bbb\n   * ```\n   *\n   * @type {State}\n   */\n  function furtherStart(code) {\n    // To do: improve `lazy` / `pierce` handling.\n    // If this is a lazy line, it can’t be code.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return furtherStart;\n    }\n\n    // To do: the code here in `micromark-js` is a bit different from\n    // `markdown-rs` because there it can attempt spaces.\n    // We can’t yet.\n    //\n    // To do: use an improved `space_or_tab` function like `markdown-rs`,\n    // so that we can drop the next state.\n    return factorySpace(effects, afterPrefix, \"linePrefix\", 4 + 1)(code);\n  }\n\n  /**\n   * At start, after 1 or 4 spaces.\n   *\n   * ```markdown\n   * > |     aaa\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === \"linePrefix\" && tail[2].sliceSerialize(tail[1], true).length >= 4 ? ok(code) : markdownLineEnding(code) ? furtherStart(code) : nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { splice } from 'micromark-util-chunked';\n/** @type {Construct} */\nexport const headingAtx = {\n  name: 'headingAtx',\n  resolve: resolveHeadingAtx,\n  tokenize: tokenizeHeadingAtx\n};\n\n/** @type {Resolver} */\nfunction resolveHeadingAtx(events, context) {\n  let contentEnd = events.length - 2;\n  let contentStart = 3;\n  /** @type {Token} */\n  let content;\n  /** @type {Token} */\n  let text;\n\n  // Prefix whitespace, part of the opening.\n  if (events[contentStart][1].type === \"whitespace\") {\n    contentStart += 2;\n  }\n\n  // Suffix whitespace, part of the closing.\n  if (contentEnd - 2 > contentStart && events[contentEnd][1].type === \"whitespace\") {\n    contentEnd -= 2;\n  }\n  if (events[contentEnd][1].type === \"atxHeadingSequence\" && (contentStart === contentEnd - 1 || contentEnd - 4 > contentStart && events[contentEnd - 2][1].type === \"whitespace\")) {\n    contentEnd -= contentStart + 1 === contentEnd ? 2 : 4;\n  }\n  if (contentEnd > contentStart) {\n    content = {\n      type: \"atxHeadingText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end\n    };\n    text = {\n      type: \"chunkText\",\n      start: events[contentStart][1].start,\n      end: events[contentEnd][1].end,\n      contentType: \"text\"\n    };\n    splice(events, contentStart, contentEnd - contentStart + 1, [['enter', content, context], ['enter', text, context], ['exit', text, context], ['exit', content, context]]);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHeadingAtx(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of a heading (atx).\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    effects.enter(\"atxHeading\");\n    return before(code);\n  }\n\n  /**\n   * After optional whitespace, at `#`.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"atxHeadingSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | ## aa\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 35 && size++ < 6) {\n      effects.consume(code);\n      return sequenceOpen;\n    }\n\n    // Always at least one `#`.\n    if (code === null || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingSequence\");\n      return atBreak(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After something, before something else.\n   *\n   * ```markdown\n   * > | ## aa\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atBreak(code) {\n    if (code === 35) {\n      effects.enter(\"atxHeadingSequence\");\n      return sequenceFurther(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"atxHeading\");\n      // To do: interrupt like `markdown-rs`.\n      // // Feel free to interrupt.\n      // tokenizer.interrupt = false\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, atBreak, \"whitespace\")(code);\n    }\n\n    // To do: generate `data` tokens, add the `text` token later.\n    // Needs edit map, see: `markdown.rs`.\n    effects.enter(\"atxHeadingText\");\n    return data(code);\n  }\n\n  /**\n   * In further sequence (after whitespace).\n   *\n   * Could be normal “visible” hashes in the heading or a final sequence.\n   *\n   * ```markdown\n   * > | ## aa ##\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceFurther(code) {\n    if (code === 35) {\n      effects.consume(code);\n      return sequenceFurther;\n    }\n    effects.exit(\"atxHeadingSequence\");\n    return atBreak(code);\n  }\n\n  /**\n   * In text.\n   *\n   * ```markdown\n   * > | ## aa\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 35 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"atxHeadingText\");\n      return atBreak(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const setextUnderline = {\n  name: 'setextUnderline',\n  resolveTo: resolveToSetextUnderline,\n  tokenize: tokenizeSetextUnderline\n};\n\n/** @type {Resolver} */\nfunction resolveToSetextUnderline(events, context) {\n  // To do: resolve like `markdown-rs`.\n  let index = events.length;\n  /** @type {number | undefined} */\n  let content;\n  /** @type {number | undefined} */\n  let text;\n  /** @type {number | undefined} */\n  let definition;\n\n  // Find the opening of the content.\n  // It’ll always exist: we don’t tokenize if it isn’t there.\n  while (index--) {\n    if (events[index][0] === 'enter') {\n      if (events[index][1].type === \"content\") {\n        content = index;\n        break;\n      }\n      if (events[index][1].type === \"paragraph\") {\n        text = index;\n      }\n    }\n    // Exit\n    else {\n      if (events[index][1].type === \"content\") {\n        // Remove the content end (if needed we’ll add it later)\n        events.splice(index, 1);\n      }\n      if (!definition && events[index][1].type === \"definition\") {\n        definition = index;\n      }\n    }\n  }\n  const heading = {\n    type: \"setextHeading\",\n    start: {\n      ...events[content][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n\n  // Change the paragraph to setext heading text.\n  events[text][1].type = \"setextHeadingText\";\n\n  // If we have definitions in the content, we’ll keep on having content,\n  // but we need move it.\n  if (definition) {\n    events.splice(text, 0, ['enter', heading, context]);\n    events.splice(definition + 1, 0, ['exit', events[content][1], context]);\n    events[content][1].end = {\n      ...events[definition][1].end\n    };\n  } else {\n    events[content][1] = heading;\n  }\n\n  // Add the heading exit at the end.\n  events.push(['exit', heading, context]);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeSetextUnderline(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * At start of heading (setext) underline.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length;\n    /** @type {boolean | undefined} */\n    let paragraph;\n    // Find an opening.\n    while (index--) {\n      // Skip enter/exit of line ending, line prefix, and content.\n      // We can now either have a definition or a paragraph.\n      if (self.events[index][1].type !== \"lineEnding\" && self.events[index][1].type !== \"linePrefix\" && self.events[index][1].type !== \"content\") {\n        paragraph = self.events[index][1].type === \"paragraph\";\n        break;\n      }\n    }\n\n    // To do: handle lazy/pierce like `markdown-rs`.\n    // To do: parse indent like `markdown-rs`.\n    if (!self.parser.lazy[self.now().line] && (self.interrupt || paragraph)) {\n      effects.enter(\"setextHeadingLine\");\n      marker = code;\n      return before(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * After optional whitespace, at `-` or `=`.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"setextHeadingLineSequence\");\n    return inside(code);\n  }\n\n  /**\n   * In sequence.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    effects.exit(\"setextHeadingLineSequence\");\n    return markdownSpace(code) ? factorySpace(effects, after, \"lineSuffix\")(code) : after(code);\n  }\n\n  /**\n   * After sequence, after optional whitespace.\n   *\n   * ```markdown\n   *   | aa\n   * > | ==\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"setextHeadingLine\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * List of lowercase HTML “block” tag names.\n *\n * The list, when parsing HTML (flow), results in more relaxed rules (condition\n * 6).\n * Because they are known blocks, the HTML-like syntax doesn’t have to be\n * strictly parsed.\n * For tag names not in this list, a more strict algorithm (condition 7) is used\n * to detect whether the HTML-like syntax is seen as HTML (flow) or not.\n *\n * This is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `search` was added in `CommonMark@0.31`.\n */\nexport const htmlBlockNames = [\n  'address',\n  'article',\n  'aside',\n  'base',\n  'basefont',\n  'blockquote',\n  'body',\n  'caption',\n  'center',\n  'col',\n  'colgroup',\n  'dd',\n  'details',\n  'dialog',\n  'dir',\n  'div',\n  'dl',\n  'dt',\n  'fieldset',\n  'figcaption',\n  'figure',\n  'footer',\n  'form',\n  'frame',\n  'frameset',\n  'h1',\n  'h2',\n  'h3',\n  'h4',\n  'h5',\n  'h6',\n  'head',\n  'header',\n  'hr',\n  'html',\n  'iframe',\n  'legend',\n  'li',\n  'link',\n  'main',\n  'menu',\n  'menuitem',\n  'nav',\n  'noframes',\n  'ol',\n  'optgroup',\n  'option',\n  'p',\n  'param',\n  'search',\n  'section',\n  'summary',\n  'table',\n  'tbody',\n  'td',\n  'tfoot',\n  'th',\n  'thead',\n  'title',\n  'tr',\n  'track',\n  'ul'\n]\n\n/**\n * List of lowercase HTML “raw” tag names.\n *\n * The list, when parsing HTML (flow), results in HTML that can include lines\n * without exiting, until a closing tag also in this list is found (condition\n * 1).\n *\n * This module is copied from:\n * <https://spec.commonmark.org/0.30/#html-blocks>.\n *\n * > 👉 **Note**: `textarea` was added in `CommonMark@0.30`.\n */\nexport const htmlRawNames = ['pre', 'script', 'style', 'textarea']\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\nimport { htmlBlockNames, htmlRawNames } from 'micromark-util-html-tag-name';\nimport { blankLine } from './blank-line.js';\n\n/** @type {Construct} */\nexport const htmlFlow = {\n  concrete: true,\n  name: 'htmlFlow',\n  resolveTo: resolveToHtmlFlow,\n  tokenize: tokenizeHtmlFlow\n};\n\n/** @type {Construct} */\nconst blankLineBefore = {\n  partial: true,\n  tokenize: tokenizeBlankLineBefore\n};\nconst nonLazyContinuationStart = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuationStart\n};\n\n/** @type {Resolver} */\nfunction resolveToHtmlFlow(events) {\n  let index = events.length;\n  while (index--) {\n    if (events[index][0] === 'enter' && events[index][1].type === \"htmlFlow\") {\n      break;\n    }\n  }\n  if (index > 1 && events[index - 2][1].type === \"linePrefix\") {\n    // Add the prefix start to the HTML token.\n    events[index][1].start = events[index - 2][1].start;\n    // Add the prefix start to the HTML line token.\n    events[index + 1][1].start = events[index - 2][1].start;\n    // Remove the line prefix.\n    events.splice(index - 2, 2);\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlFlow(effects, ok, nok) {\n  const self = this;\n  /** @type {number} */\n  let marker;\n  /** @type {boolean} */\n  let closingTag;\n  /** @type {string} */\n  let buffer;\n  /** @type {number} */\n  let index;\n  /** @type {Code} */\n  let markerB;\n  return start;\n\n  /**\n   * Start of HTML (flow).\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse indent like `markdown-rs`.\n    return before(code);\n  }\n\n  /**\n   * At `<`, after optional whitespace.\n   *\n   * ```markdown\n   * > | <x />\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function before(code) {\n    effects.enter(\"htmlFlow\");\n    effects.enter(\"htmlFlowData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | <x />\n   *      ^\n   * > | <!doctype>\n   *      ^\n   * > | <!--xxx-->\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      closingTag = true;\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      marker = 3;\n      // To do:\n      // tokenizer.concrete = true\n      // To do: use `markdown-rs` style interrupt.\n      // While we’re in an instruction instead of a declaration, we’re on a `?`\n      // right now, so we do need to search for `>`, similar to declarations.\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *       ^\n   * > | <!--xxx-->\n   *       ^\n   * > | <![CDATA[>&<]]>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      marker = 2;\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      marker = 5;\n      index = 0;\n      return cdataOpenInside;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      marker = 4;\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!-`, inside a comment, at another `-`.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuationDeclarationInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<![`, inside CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *        ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      if (index === value.length) {\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok : continuation;\n      }\n      return cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | </x>\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    if (asciiAlpha(code)) {\n      // Always the case.\n      effects.consume(code);\n      buffer = String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In tag name.\n   *\n   * ```markdown\n   * > | <ab>\n   *      ^^\n   * > | </ab>\n   *       ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagName(code) {\n    if (code === null || code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      const slash = code === 47;\n      const name = buffer.toLowerCase();\n      if (!slash && !closingTag && htmlRawNames.includes(name)) {\n        marker = 1;\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      if (htmlBlockNames.includes(buffer.toLowerCase())) {\n        marker = 6;\n        if (slash) {\n          effects.consume(code);\n          return basicSelfClosing;\n        }\n\n        // // Do not form containers.\n        // tokenizer.concrete = true\n        return self.interrupt ? ok(code) : continuation(code);\n      }\n      marker = 7;\n      // Do not support complete HTML when interrupting.\n      return self.interrupt && !self.parser.lazy[self.now().line] ? nok(code) : closingTag ? completeClosingTagAfter(code) : completeAttributeNameBefore(code);\n    }\n\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return tagName;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a basic tag name.\n   *\n   * ```markdown\n   * > | <div/>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function basicSelfClosing(code) {\n    if (code === 62) {\n      effects.consume(code);\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return self.interrupt ? ok : continuation;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After closing slash of a complete tag name.\n   *\n   * ```markdown\n   * > | <x/>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeClosingTagAfter(code) {\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeClosingTagAfter;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * At an attribute name.\n   *\n   * At first, this state is used after a complete tag name, after whitespace,\n   * where it expects optional attributes or the end of the tag.\n   * It is also reused after attributes, when expecting more optional\n   * attributes.\n   *\n   * ```markdown\n   * > | <a />\n   *        ^\n   * > | <a :b>\n   *        ^\n   * > | <a _b>\n   *        ^\n   * > | <a b>\n   *        ^\n   * > | <a >\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameBefore(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return completeEnd;\n    }\n\n    // ASCII alphanumerical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameBefore;\n    }\n    return completeEnd(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | <a :b>\n   *         ^\n   * > | <a _b>\n   *         ^\n   * > | <a b>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeName(code) {\n    // ASCII alphanumerical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return completeAttributeName;\n    }\n    return completeAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, at an optional initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b>\n   *         ^\n   * > | <a b=c>\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeNameAfter;\n    }\n    return completeAttributeNameBefore(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * > | <a b=\"c\">\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      markerB = code;\n      return completeAttributeValueQuoted;\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAttributeValueBefore;\n    }\n    return completeAttributeValueUnquoted(code);\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *           ^\n   * > | <a b='c'>\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuoted(code) {\n    if (code === markerB) {\n      effects.consume(code);\n      markerB = null;\n      return completeAttributeValueQuotedAfter;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | <a b=c>\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 47 || code === 60 || code === 61 || code === 62 || code === 96 || markdownLineEndingOrSpace(code)) {\n      return completeAttributeNameAfter(code);\n    }\n    effects.consume(code);\n    return completeAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the\n   * end of the tag.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownSpace(code)) {\n      return completeAttributeNameBefore(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a complete tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | <a b=\"c\">\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeEnd(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `>` in a complete tag.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function completeAfter(code) {\n    if (code === null || markdownLineEnding(code)) {\n      // // Do not form containers.\n      // tokenizer.concrete = true\n      return continuation(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return completeAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In continuation of any HTML kind.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuation(code) {\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationCommentInside;\n    }\n    if (code === 60 && marker === 1) {\n      effects.consume(code);\n      return continuationRawTagOpen;\n    }\n    if (code === 62 && marker === 4) {\n      effects.consume(code);\n      return continuationClose;\n    }\n    if (code === 63 && marker === 3) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    if (code === 93 && marker === 5) {\n      effects.consume(code);\n      return continuationCdataInside;\n    }\n    if (markdownLineEnding(code) && (marker === 6 || marker === 7)) {\n      effects.exit(\"htmlFlowData\");\n      return effects.check(blankLineBefore, continuationAfter, continuationStart)(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationStart(code);\n    }\n    effects.consume(code);\n    return continuation;\n  }\n\n  /**\n   * In continuation, at eol.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStart(code) {\n    return effects.check(nonLazyContinuationStart, continuationStartNonLazy, continuationAfter)(code);\n  }\n\n  /**\n   * In continuation, at eol, before non-lazy content.\n   *\n   * ```markdown\n   * > | <x>\n   *        ^\n   *   | asd\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationStartNonLazy(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return continuationBefore;\n  }\n\n  /**\n   * In continuation, before non-lazy content.\n   *\n   * ```markdown\n   *   | <x>\n   * > | asd\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return continuationStart(code);\n    }\n    effects.enter(\"htmlFlowData\");\n    return continuation(code);\n  }\n\n  /**\n   * In comment continuation, after one `-`, expecting another.\n   *\n   * ```markdown\n   * > | <!--xxx-->\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCommentInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `<`, at `/`.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawTagOpen(code) {\n    if (code === 47) {\n      effects.consume(code);\n      buffer = '';\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In raw continuation, after `</`, in a raw tag name.\n   *\n   * ```markdown\n   * > | <script>console.log(1)</script>\n   *                             ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationRawEndTag(code) {\n    if (code === 62) {\n      const name = buffer.toLowerCase();\n      if (htmlRawNames.includes(name)) {\n        effects.consume(code);\n        return continuationClose;\n      }\n      return continuation(code);\n    }\n    if (asciiAlpha(code) && buffer.length < 8) {\n      // Always the case.\n      effects.consume(code);\n      buffer += String.fromCharCode(code);\n      return continuationRawEndTag;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In cdata continuation, after `]`, expecting `]>`.\n   *\n   * ```markdown\n   * > | <![CDATA[>&<]]>\n   *                  ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationCdataInside(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In declaration or instruction continuation, at `>`.\n   *\n   * ```markdown\n   * > | <!-->\n   *         ^\n   * > | <?>\n   *       ^\n   * > | <!q>\n   *        ^\n   * > | <!--ab-->\n   *             ^\n   * > | <![CDATA[>&<]]>\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationDeclarationInside(code) {\n    if (code === 62) {\n      effects.consume(code);\n      return continuationClose;\n    }\n\n    // More dashes.\n    if (code === 45 && marker === 2) {\n      effects.consume(code);\n      return continuationDeclarationInside;\n    }\n    return continuation(code);\n  }\n\n  /**\n   * In closed continuation: everything we get until the eol/eof is part of it.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationClose(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"htmlFlowData\");\n      return continuationAfter(code);\n    }\n    effects.consume(code);\n    return continuationClose;\n  }\n\n  /**\n   * Done.\n   *\n   * ```markdown\n   * > | <!doctype>\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function continuationAfter(code) {\n    effects.exit(\"htmlFlow\");\n    // // Feel free to interrupt.\n    // tokenizer.interrupt = false\n    // // No longer concrete.\n    // tokenizer.concrete = false\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuationStart(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * At eol, before continuation.\n   *\n   * ```markdown\n   * > | * ```js\n   *            ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * A continuation.\n   *\n   * ```markdown\n   *   | * ```js\n   * > | b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeBlankLineBefore(effects, ok, nok) {\n  return start;\n\n  /**\n   * Before eol, expecting blank line.\n   *\n   * ```markdown\n   * > | <div>\n   *          ^\n   *   |\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return effects.attempt(blankLine, ok, nok);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nconst nonLazyContinuation = {\n  partial: true,\n  tokenize: tokenizeNonLazyContinuation\n};\n\n/** @type {Construct} */\nexport const codeFenced = {\n  concrete: true,\n  name: 'codeFenced',\n  tokenize: tokenizeCodeFenced\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeFenced(effects, ok, nok) {\n  const self = this;\n  /** @type {Construct} */\n  const closeStart = {\n    partial: true,\n    tokenize: tokenizeCloseStart\n  };\n  let initialPrefix = 0;\n  let sizeOpen = 0;\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Start of code.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // To do: parse whitespace like `markdown-rs`.\n    return beforeSequenceOpen(code);\n  }\n\n  /**\n   * In opening fence, after prefix, at sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *     ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeSequenceOpen(code) {\n    const tail = self.events[self.events.length - 1];\n    initialPrefix = tail && tail[1].type === \"linePrefix\" ? tail[2].sliceSerialize(tail[1], true).length : 0;\n    marker = code;\n    effects.enter(\"codeFenced\");\n    effects.enter(\"codeFencedFence\");\n    effects.enter(\"codeFencedFenceSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening fence sequence.\n   *\n   * ```markdown\n   * > | ~~~js\n   *      ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === marker) {\n      sizeOpen++;\n      effects.consume(code);\n      return sequenceOpen;\n    }\n    if (sizeOpen < 3) {\n      return nok(code);\n    }\n    effects.exit(\"codeFencedFenceSequence\");\n    return markdownSpace(code) ? factorySpace(effects, infoBefore, \"whitespace\")(code) : infoBefore(code);\n  }\n\n  /**\n   * In opening fence, after the sequence (and optional whitespace), before info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function infoBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFencedFence\");\n      return self.interrupt ? ok(code) : effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFencedFenceInfo\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return info(code);\n  }\n\n  /**\n   * In info.\n   *\n   * ```markdown\n   * > | ~~~js\n   *        ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function info(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return infoBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceInfo\");\n      return factorySpace(effects, metaBefore, \"whitespace\")(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return info;\n  }\n\n  /**\n   * In opening fence, after info and whitespace, before meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function metaBefore(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return infoBefore(code);\n    }\n    effects.enter(\"codeFencedFenceMeta\");\n    effects.enter(\"chunkString\", {\n      contentType: \"string\"\n    });\n    return meta(code);\n  }\n\n  /**\n   * In meta.\n   *\n   * ```markdown\n   * > | ~~~js eval\n   *           ^\n   *   | alert(1)\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function meta(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"chunkString\");\n      effects.exit(\"codeFencedFenceMeta\");\n      return infoBefore(code);\n    }\n    if (code === 96 && code === marker) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return meta;\n  }\n\n  /**\n   * At eol/eof in code, before a non-lazy closing fence or content.\n   *\n   * ```markdown\n   * > | ~~~js\n   *          ^\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function atNonLazyBreak(code) {\n    return effects.attempt(closeStart, after, contentBefore)(code);\n  }\n\n  /**\n   * Before code content, not a closing fence, at eol.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *             ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentBefore(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return contentStart;\n  }\n\n  /**\n   * Before code content, not a closing fence.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentStart(code) {\n    return initialPrefix > 0 && markdownSpace(code) ? factorySpace(effects, beforeContentChunk, \"linePrefix\", initialPrefix + 1)(code) : beforeContentChunk(code);\n  }\n\n  /**\n   * Before code content, after optional prefix.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function beforeContentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      return effects.check(nonLazyContinuation, atNonLazyBreak, after)(code);\n    }\n    effects.enter(\"codeFlowValue\");\n    return contentChunk(code);\n  }\n\n  /**\n   * In code content.\n   *\n   * ```markdown\n   *   | ~~~js\n   * > | alert(1)\n   *     ^^^^^^^^\n   *   | ~~~\n   * ```\n   *\n   * @type {State}\n   */\n  function contentChunk(code) {\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit(\"codeFlowValue\");\n      return beforeContentChunk(code);\n    }\n    effects.consume(code);\n    return contentChunk;\n  }\n\n  /**\n   * After code.\n   *\n   * ```markdown\n   *   | ~~~js\n   *   | alert(1)\n   * > | ~~~\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    effects.exit(\"codeFenced\");\n    return ok(code);\n  }\n\n  /**\n   * @this {TokenizeContext}\n   *   Context.\n   * @type {Tokenizer}\n   */\n  function tokenizeCloseStart(effects, ok, nok) {\n    let size = 0;\n    return startBefore;\n\n    /**\n     *\n     *\n     * @type {State}\n     */\n    function startBefore(code) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return start;\n    }\n\n    /**\n     * Before closing fence, at optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function start(code) {\n      // Always populated by defaults.\n\n      // To do: `enter` here or in next state?\n      effects.enter(\"codeFencedFence\");\n      return markdownSpace(code) ? factorySpace(effects, beforeSequenceClose, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : beforeSequenceClose(code);\n    }\n\n    /**\n     * In closing fence, after optional whitespace, at sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function beforeSequenceClose(code) {\n      if (code === marker) {\n        effects.enter(\"codeFencedFenceSequence\");\n        return sequenceClose(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * In closing fence sequence.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *     ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceClose(code) {\n      if (code === marker) {\n        size++;\n        effects.consume(code);\n        return sequenceClose;\n      }\n      if (size >= sizeOpen) {\n        effects.exit(\"codeFencedFenceSequence\");\n        return markdownSpace(code) ? factorySpace(effects, sequenceCloseAfter, \"whitespace\")(code) : sequenceCloseAfter(code);\n      }\n      return nok(code);\n    }\n\n    /**\n     * After closing fence sequence, after optional whitespace.\n     *\n     * ```markdown\n     *   | ~~~js\n     *   | alert(1)\n     * > | ~~~\n     *        ^\n     * ```\n     *\n     * @type {State}\n     */\n    function sequenceCloseAfter(code) {\n      if (code === null || markdownLineEnding(code)) {\n        effects.exit(\"codeFencedFence\");\n        return ok(code);\n      }\n      return nok(code);\n    }\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeNonLazyContinuation(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineStart;\n  }\n\n  /**\n   *\n   *\n   * @type {State}\n   */\n  function lineStart(code) {\n    return self.parser.lazy[self.now().line] ? nok(code) : ok(code);\n  }\n}","/// <reference lib=\"dom\" />\n\n/* global document */\n\nconst element = document.createElement('i')\n\n/**\n * @param {string} value\n * @returns {string | false}\n */\nexport function decodeNamedCharacterReference(value) {\n  const characterReference = '&' + value + ';'\n  element.innerHTML = characterReference\n  const character = element.textContent\n\n  // Some named character references do not require the closing semicolon\n  // (`&not`, for instance), which leads to situations where parsing the assumed\n  // named reference of `&notit;` will result in the string `¬it;`.\n  // When we encounter a trailing semicolon after parsing, and the character\n  // reference to decode was not a semicolon (`&semi;`), we can assume that the\n  // matching was not complete.\n  if (\n    // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n    // yield `null`.\n    character.charCodeAt(character.length - 1) === 59 /* `;` */ &&\n    value !== 'semi'\n  ) {\n    return false\n  }\n\n  // If the decoded string is equal to the input, the character reference was\n  // not valid.\n  // @ts-expect-error: TypeScript is wrong that `textContent` on elements can\n  // yield `null`.\n  return character === characterReference ? false : character\n}\n","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { asciiAlphanumeric, asciiDigit, asciiHexDigit } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterReference = {\n  name: 'characterReference',\n  tokenize: tokenizeCharacterReference\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterReference(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  /** @type {number} */\n  let max;\n  /** @type {(code: Code) => boolean} */\n  let test;\n  return start;\n\n  /**\n   * Start of character reference.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *      ^\n   * > | a&#123;b\n   *      ^\n   * > | a&#x9;b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterReference\");\n    effects.enter(\"characterReferenceMarker\");\n    effects.consume(code);\n    effects.exit(\"characterReferenceMarker\");\n    return open;\n  }\n\n  /**\n   * After `&`, at `#` for numeric references or alphanumeric for named\n   * references.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^\n   * > | a&#123;b\n   *       ^\n   * > | a&#x9;b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 35) {\n      effects.enter(\"characterReferenceMarkerNumeric\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerNumeric\");\n      return numeric;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 31;\n    test = asciiAlphanumeric;\n    return value(code);\n  }\n\n  /**\n   * After `#`, at `x` for hexadecimals or digit for decimals.\n   *\n   * ```markdown\n   * > | a&#123;b\n   *        ^\n   * > | a&#x9;b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function numeric(code) {\n    if (code === 88 || code === 120) {\n      effects.enter(\"characterReferenceMarkerHexadecimal\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarkerHexadecimal\");\n      effects.enter(\"characterReferenceValue\");\n      max = 6;\n      test = asciiHexDigit;\n      return value;\n    }\n    effects.enter(\"characterReferenceValue\");\n    max = 7;\n    test = asciiDigit;\n    return value(code);\n  }\n\n  /**\n   * After markers (`&#x`, `&#`, or `&`), in value, before `;`.\n   *\n   * The character reference kind defines what and how many characters are\n   * allowed.\n   *\n   * ```markdown\n   * > | a&amp;b\n   *       ^^^\n   * > | a&#123;b\n   *        ^^^\n   * > | a&#x9;b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function value(code) {\n    if (code === 59 && size) {\n      const token = effects.exit(\"characterReferenceValue\");\n      if (test === asciiAlphanumeric && !decodeNamedCharacterReference(self.sliceSerialize(token))) {\n        return nok(code);\n      }\n\n      // To do: `markdown-rs` uses a different name:\n      // `CharacterReferenceMarkerSemi`.\n      effects.enter(\"characterReferenceMarker\");\n      effects.consume(code);\n      effects.exit(\"characterReferenceMarker\");\n      effects.exit(\"characterReference\");\n      return ok;\n    }\n    if (test(code) && size++ < max) {\n      effects.consume(code);\n      return value;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiPunctuation } from 'micromark-util-character';\n/** @type {Construct} */\nexport const characterEscape = {\n  name: 'characterEscape',\n  tokenize: tokenizeCharacterEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCharacterEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of character escape.\n   *\n   * ```markdown\n   * > | a\\*b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"characterEscape\");\n    effects.enter(\"escapeMarker\");\n    effects.consume(code);\n    effects.exit(\"escapeMarker\");\n    return inside;\n  }\n\n  /**\n   * After `\\`, at punctuation.\n   *\n   * ```markdown\n   * > | a\\*b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // ASCII punctuation.\n    if (asciiPunctuation(code)) {\n      effects.enter(\"characterEscapeValue\");\n      effects.consume(code);\n      effects.exit(\"characterEscapeValue\");\n      effects.exit(\"characterEscape\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const lineEnding = {\n  name: 'lineEnding',\n  tokenize: tokenizeLineEnding\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLineEnding(effects, ok) {\n  return start;\n\n  /** @type {State} */\n  function start(code) {\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return factorySpace(effects, ok, \"linePrefix\");\n  }\n}","/**\n * @import {Event, Resolver, TokenizeContext} from 'micromark-util-types'\n */\n\n/**\n * Call all `resolveAll`s.\n *\n * @param {ReadonlyArray<{resolveAll?: Resolver | undefined}>} constructs\n *   List of constructs, optionally with `resolveAll`s.\n * @param {Array<Event>} events\n *   List of events.\n * @param {TokenizeContext} context\n *   Context used by `tokenize`.\n * @returns {Array<Event>}\n *   Changed events.\n */\nexport function resolveAll(constructs, events, context) {\n  /** @type {Array<Resolver>} */\n  const called = []\n  let index = -1\n\n  while (++index < constructs.length) {\n    const resolve = constructs[index].resolveAll\n\n    if (resolve && !called.includes(resolve)) {\n      events = resolve(events, context)\n      called.push(resolve)\n    }\n  }\n\n  return events\n}\n","/**\n * @import {\n *   Construct,\n *   Event,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { factoryDestination } from 'micromark-factory-destination';\nimport { factoryLabel } from 'micromark-factory-label';\nimport { factoryTitle } from 'micromark-factory-title';\nimport { factoryWhitespace } from 'micromark-factory-whitespace';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const labelEnd = {\n  name: 'labelEnd',\n  resolveAll: resolveAllLabelEnd,\n  resolveTo: resolveToLabelEnd,\n  tokenize: tokenizeLabelEnd\n};\n\n/** @type {Construct} */\nconst resourceConstruct = {\n  tokenize: tokenizeResource\n};\n/** @type {Construct} */\nconst referenceFullConstruct = {\n  tokenize: tokenizeReferenceFull\n};\n/** @type {Construct} */\nconst referenceCollapsedConstruct = {\n  tokenize: tokenizeReferenceCollapsed\n};\n\n/** @type {Resolver} */\nfunction resolveAllLabelEnd(events) {\n  let index = -1;\n  /** @type {Array<Event>} */\n  const newEvents = [];\n  while (++index < events.length) {\n    const token = events[index][1];\n    newEvents.push(events[index]);\n    if (token.type === \"labelImage\" || token.type === \"labelLink\" || token.type === \"labelEnd\") {\n      // Remove the marker.\n      const offset = token.type === \"labelImage\" ? 4 : 2;\n      token.type = \"data\";\n      index += offset;\n    }\n  }\n\n  // If the events are equal, we don't have to copy newEvents to events\n  if (events.length !== newEvents.length) {\n    splice(events, 0, events.length, newEvents);\n  }\n  return events;\n}\n\n/** @type {Resolver} */\nfunction resolveToLabelEnd(events, context) {\n  let index = events.length;\n  let offset = 0;\n  /** @type {Token} */\n  let token;\n  /** @type {number | undefined} */\n  let open;\n  /** @type {number | undefined} */\n  let close;\n  /** @type {Array<Event>} */\n  let media;\n\n  // Find an opening.\n  while (index--) {\n    token = events[index][1];\n    if (open) {\n      // If we see another link, or inactive link label, we’ve been here before.\n      if (token.type === \"link\" || token.type === \"labelLink\" && token._inactive) {\n        break;\n      }\n\n      // Mark other link openings as inactive, as we can’t have links in\n      // links.\n      if (events[index][0] === 'enter' && token.type === \"labelLink\") {\n        token._inactive = true;\n      }\n    } else if (close) {\n      if (events[index][0] === 'enter' && (token.type === \"labelImage\" || token.type === \"labelLink\") && !token._balanced) {\n        open = index;\n        if (token.type !== \"labelLink\") {\n          offset = 2;\n          break;\n        }\n      }\n    } else if (token.type === \"labelEnd\") {\n      close = index;\n    }\n  }\n  const group = {\n    type: events[open][1].type === \"labelLink\" ? \"link\" : \"image\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[events.length - 1][1].end\n    }\n  };\n  const label = {\n    type: \"label\",\n    start: {\n      ...events[open][1].start\n    },\n    end: {\n      ...events[close][1].end\n    }\n  };\n  const text = {\n    type: \"labelText\",\n    start: {\n      ...events[open + offset + 2][1].end\n    },\n    end: {\n      ...events[close - 2][1].start\n    }\n  };\n  media = [['enter', group, context], ['enter', label, context]];\n\n  // Opening marker.\n  media = push(media, events.slice(open + 1, open + offset + 3));\n\n  // Text open.\n  media = push(media, [['enter', text, context]]);\n\n  // Always populated by defaults.\n\n  // Between.\n  media = push(media, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + offset + 4, close - 3), context));\n\n  // Text close, marker close, label close.\n  media = push(media, [['exit', text, context], events[close - 2], events[close - 1], ['exit', label, context]]);\n\n  // Reference, resource, or so.\n  media = push(media, events.slice(close + 1));\n\n  // Media close.\n  media = push(media, [['exit', group, context]]);\n  splice(events, open, events.length, media);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelEnd(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  /** @type {Token} */\n  let labelStart;\n  /** @type {boolean} */\n  let defined;\n\n  // Find an opening.\n  while (index--) {\n    if ((self.events[index][1].type === \"labelImage\" || self.events[index][1].type === \"labelLink\") && !self.events[index][1]._balanced) {\n      labelStart = self.events[index][1];\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * Start of label end.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // If there is not an okay opening.\n    if (!labelStart) {\n      return nok(code);\n    }\n\n    // If the corresponding label (link) start is marked as inactive,\n    // it means we’d be wrapping a link, like this:\n    //\n    // ```markdown\n    // > | a [b [c](d) e](f) g.\n    //                  ^\n    // ```\n    //\n    // We can’t have that, so it’s just balanced brackets.\n    if (labelStart._inactive) {\n      return labelEndNok(code);\n    }\n    defined = self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    })));\n    effects.enter(\"labelEnd\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelEnd\");\n    return after;\n  }\n\n  /**\n   * After `]`.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *       ^\n   * > | [a][b] c\n   *       ^\n   * > | [a][] b\n   *       ^\n   * > | [a] b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Note: `markdown-rs` also parses GFM footnotes here, which for us is in\n    // an extension.\n\n    // Resource (`[asd](fgh)`)?\n    if (code === 40) {\n      return effects.attempt(resourceConstruct, labelEndOk, defined ? labelEndOk : labelEndNok)(code);\n    }\n\n    // Full (`[asd][fgh]`) or collapsed (`[asd][]`) reference?\n    if (code === 91) {\n      return effects.attempt(referenceFullConstruct, labelEndOk, defined ? referenceNotFull : labelEndNok)(code);\n    }\n\n    // Shortcut (`[asd]`) reference?\n    return defined ? labelEndOk(code) : labelEndNok(code);\n  }\n\n  /**\n   * After `]`, at `[`, but not at a full reference.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] b\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceNotFull(code) {\n    return effects.attempt(referenceCollapsedConstruct, labelEndOk, labelEndNok)(code);\n  }\n\n  /**\n   * Done, we found something.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *           ^\n   * > | [a][b] c\n   *           ^\n   * > | [a][] b\n   *          ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndOk(code) {\n    // Note: `markdown-rs` does a bunch of stuff here.\n    return ok(code);\n  }\n\n  /**\n   * Done, it’s nothing.\n   *\n   * There was an okay opening, but we didn’t match anything.\n   *\n   * ```markdown\n   * > | [a](b c\n   *        ^\n   * > | [a][b c\n   *        ^\n   * > | [a] b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEndNok(code) {\n    labelStart._balanced = true;\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeResource(effects, ok, nok) {\n  return resourceStart;\n\n  /**\n   * At a resource.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceStart(code) {\n    effects.enter(\"resource\");\n    effects.enter(\"resourceMarker\");\n    effects.consume(code);\n    effects.exit(\"resourceMarker\");\n    return resourceBefore;\n  }\n\n  /**\n   * In resource, after `(`, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBefore(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceOpen)(code) : resourceOpen(code);\n  }\n\n  /**\n   * In resource, after optional whitespace, at `)` or a destination.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceOpen(code) {\n    if (code === 41) {\n      return resourceEnd(code);\n    }\n    return factoryDestination(effects, resourceDestinationAfter, resourceDestinationMissing, \"resourceDestination\", \"resourceDestinationLiteral\", \"resourceDestinationLiteralMarker\", \"resourceDestinationRaw\", \"resourceDestinationString\", 32)(code);\n  }\n\n  /**\n   * In resource, after destination, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b) c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceBetween)(code) : resourceEnd(code);\n  }\n\n  /**\n   * At invalid destination.\n   *\n   * ```markdown\n   * > | [a](<<) b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceDestinationMissing(code) {\n    return nok(code);\n  }\n\n  /**\n   * In resource, after destination and whitespace, at `(` or title.\n   *\n   * ```markdown\n   * > | [a](b ) c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceBetween(code) {\n    if (code === 34 || code === 39 || code === 40) {\n      return factoryTitle(effects, resourceTitleAfter, nok, \"resourceTitle\", \"resourceTitleMarker\", \"resourceTitleString\")(code);\n    }\n    return resourceEnd(code);\n  }\n\n  /**\n   * In resource, after title, at optional whitespace.\n   *\n   * ```markdown\n   * > | [a](b \"c\") d\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceTitleAfter(code) {\n    return markdownLineEndingOrSpace(code) ? factoryWhitespace(effects, resourceEnd)(code) : resourceEnd(code);\n  }\n\n  /**\n   * In resource, at `)`.\n   *\n   * ```markdown\n   * > | [a](b) d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function resourceEnd(code) {\n    if (code === 41) {\n      effects.enter(\"resourceMarker\");\n      effects.consume(code);\n      effects.exit(\"resourceMarker\");\n      effects.exit(\"resource\");\n      return ok;\n    }\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceFull(effects, ok, nok) {\n  const self = this;\n  return referenceFull;\n\n  /**\n   * In a reference (full), at the `[`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFull(code) {\n    return factoryLabel.call(self, effects, referenceFullAfter, referenceFullMissing, \"reference\", \"referenceMarker\", \"referenceString\")(code);\n  }\n\n  /**\n   * In a reference (full), after `]`.\n   *\n   * ```markdown\n   * > | [a][b] d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullAfter(code) {\n    return self.parser.defined.includes(normalizeIdentifier(self.sliceSerialize(self.events[self.events.length - 1][1]).slice(1, -1))) ? ok(code) : nok(code);\n  }\n\n  /**\n   * In reference (full) that was missing.\n   *\n   * ```markdown\n   * > | [a][b d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceFullMissing(code) {\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeReferenceCollapsed(effects, ok, nok) {\n  return referenceCollapsedStart;\n\n  /**\n   * In reference (collapsed), at `[`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function referenceCollapsedStart(code) {\n    // We only attempt a collapsed label if there’s a `[`.\n\n    effects.enter(\"reference\");\n    effects.enter(\"referenceMarker\");\n    effects.consume(code);\n    effects.exit(\"referenceMarker\");\n    return referenceCollapsedOpen;\n  }\n\n  /**\n   * In reference (collapsed), at `]`.\n   *\n   * > 👉 **Note**: we only get here if the label is defined.\n   *\n   * ```markdown\n   * > | [a][] d\n   *         ^\n   * ```\n   *\n   *  @type {State}\n   */\n  function referenceCollapsedOpen(code) {\n    if (code === 93) {\n      effects.enter(\"referenceMarker\");\n      effects.consume(code);\n      effects.exit(\"referenceMarker\");\n      effects.exit(\"reference\");\n      return ok;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartImage = {\n  name: 'labelStartImage',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartImage\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartImage(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (image) start.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelImage\");\n    effects.enter(\"labelImageMarker\");\n    effects.consume(code);\n    effects.exit(\"labelImageMarker\");\n    return open;\n  }\n\n  /**\n   * After `!`, at `[`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 91) {\n      effects.enter(\"labelMarker\");\n      effects.consume(code);\n      effects.exit(\"labelMarker\");\n      effects.exit(\"labelImage\");\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `![`.\n   *\n   * ```markdown\n   * > | a ![b] c\n   *         ^\n   * ```\n   *\n   * This is needed in because, when GFM footnotes are enabled, images never\n   * form when started with a `^`.\n   * Instead, links form:\n   *\n   * ```markdown\n   * ![^a](b)\n   *\n   * ![^a][b]\n   *\n   * [b]: c\n   * ```\n   *\n   * ```html\n   * <p>!<a href=\\\"b\\\">^a</a></p>\n   * <p>!<a href=\\\"c\\\">^a</a></p>\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // To do: use a new field to do this, this is still needed for\n    // `micromark-extension-gfm-footnote`, but the `label-start-link`\n    // behavior isn’t.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\nimport { markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\n/**\n * Classify whether a code represents whitespace, punctuation, or something\n * else.\n *\n * Used for attention (emphasis, strong), whose sequences can open or close\n * based on the class of surrounding characters.\n *\n * > 👉 **Note**: eof (`null`) is seen as whitespace.\n *\n * @param {Code} code\n *   Code.\n * @returns {typeof constants.characterGroupWhitespace | typeof constants.characterGroupPunctuation | undefined}\n *   Group.\n */\nexport function classifyCharacter(code) {\n  if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n    return 1;\n  }\n  if (unicodePunctuation(code)) {\n    return 2;\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   Event,\n *   Point,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { push, splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/** @type {Construct} */\nexport const attention = {\n  name: 'attention',\n  resolveAll: resolveAllAttention,\n  tokenize: tokenizeAttention\n};\n\n/**\n * Take all events and resolve attention to emphasis or strong.\n *\n * @type {Resolver}\n */\n// eslint-disable-next-line complexity\nfunction resolveAllAttention(events, context) {\n  let index = -1;\n  /** @type {number} */\n  let open;\n  /** @type {Token} */\n  let group;\n  /** @type {Token} */\n  let text;\n  /** @type {Token} */\n  let openingSequence;\n  /** @type {Token} */\n  let closingSequence;\n  /** @type {number} */\n  let use;\n  /** @type {Array<Event>} */\n  let nextEvents;\n  /** @type {number} */\n  let offset;\n\n  // Walk through all events.\n  //\n  // Note: performance of this is fine on an mb of normal markdown, but it’s\n  // a bottleneck for malicious stuff.\n  while (++index < events.length) {\n    // Find a token that can close.\n    if (events[index][0] === 'enter' && events[index][1].type === 'attentionSequence' && events[index][1]._close) {\n      open = index;\n\n      // Now walk back to find an opener.\n      while (open--) {\n        // Find a token that can open the closer.\n        if (events[open][0] === 'exit' && events[open][1].type === 'attentionSequence' && events[open][1]._open &&\n        // If the markers are the same:\n        context.sliceSerialize(events[open][1]).charCodeAt(0) === context.sliceSerialize(events[index][1]).charCodeAt(0)) {\n          // If the opening can close or the closing can open,\n          // and the close size *is not* a multiple of three,\n          // but the sum of the opening and closing size *is* multiple of three,\n          // then don’t match.\n          if ((events[open][1]._close || events[index][1]._open) && (events[index][1].end.offset - events[index][1].start.offset) % 3 && !((events[open][1].end.offset - events[open][1].start.offset + events[index][1].end.offset - events[index][1].start.offset) % 3)) {\n            continue;\n          }\n\n          // Number of markers to use from the sequence.\n          use = events[open][1].end.offset - events[open][1].start.offset > 1 && events[index][1].end.offset - events[index][1].start.offset > 1 ? 2 : 1;\n          const start = {\n            ...events[open][1].end\n          };\n          const end = {\n            ...events[index][1].start\n          };\n          movePoint(start, -use);\n          movePoint(end, use);\n          openingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start,\n            end: {\n              ...events[open][1].end\n            }\n          };\n          closingSequence = {\n            type: use > 1 ? \"strongSequence\" : \"emphasisSequence\",\n            start: {\n              ...events[index][1].start\n            },\n            end\n          };\n          text = {\n            type: use > 1 ? \"strongText\" : \"emphasisText\",\n            start: {\n              ...events[open][1].end\n            },\n            end: {\n              ...events[index][1].start\n            }\n          };\n          group = {\n            type: use > 1 ? \"strong\" : \"emphasis\",\n            start: {\n              ...openingSequence.start\n            },\n            end: {\n              ...closingSequence.end\n            }\n          };\n          events[open][1].end = {\n            ...openingSequence.start\n          };\n          events[index][1].start = {\n            ...closingSequence.end\n          };\n          nextEvents = [];\n\n          // If there are more markers in the opening, add them before.\n          if (events[open][1].end.offset - events[open][1].start.offset) {\n            nextEvents = push(nextEvents, [['enter', events[open][1], context], ['exit', events[open][1], context]]);\n          }\n\n          // Opening.\n          nextEvents = push(nextEvents, [['enter', group, context], ['enter', openingSequence, context], ['exit', openingSequence, context], ['enter', text, context]]);\n\n          // Always populated by defaults.\n\n          // Between.\n          nextEvents = push(nextEvents, resolveAll(context.parser.constructs.insideSpan.null, events.slice(open + 1, index), context));\n\n          // Closing.\n          nextEvents = push(nextEvents, [['exit', text, context], ['enter', closingSequence, context], ['exit', closingSequence, context], ['exit', group, context]]);\n\n          // If there are more markers in the closing, add them after.\n          if (events[index][1].end.offset - events[index][1].start.offset) {\n            offset = 2;\n            nextEvents = push(nextEvents, [['enter', events[index][1], context], ['exit', events[index][1], context]]);\n          } else {\n            offset = 0;\n          }\n          splice(events, open - 1, index - open + 3, nextEvents);\n          index = open + nextEvents.length - offset - 2;\n          break;\n        }\n      }\n    }\n  }\n\n  // Remove remaining sequences.\n  index = -1;\n  while (++index < events.length) {\n    if (events[index][1].type === 'attentionSequence') {\n      events[index][1].type = 'data';\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAttention(effects, ok) {\n  const attentionMarkers = this.parser.constructs.attentionMarkers.null;\n  const previous = this.previous;\n  const before = classifyCharacter(previous);\n\n  /** @type {NonNullable<Code>} */\n  let marker;\n  return start;\n\n  /**\n   * Before a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    marker = code;\n    effects.enter('attentionSequence');\n    return inside(code);\n  }\n\n  /**\n   * In a sequence.\n   *\n   * ```markdown\n   * > | **\n   *     ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    if (code === marker) {\n      effects.consume(code);\n      return inside;\n    }\n    const token = effects.exit('attentionSequence');\n\n    // To do: next major: move this to resolver, just like `markdown-rs`.\n    const after = classifyCharacter(code);\n\n    // Always populated by defaults.\n\n    const open = !after || after === 2 && before || attentionMarkers.includes(code);\n    const close = !before || before === 2 && after || attentionMarkers.includes(previous);\n    token._open = Boolean(marker === 42 ? open : open && (before || !close));\n    token._close = Boolean(marker === 42 ? close : close && (after || !open));\n    return ok(code);\n  }\n}\n\n/**\n * Move a point a bit.\n *\n * Note: `move` only works inside lines! It’s not possible to move past other\n * chunks (replacement characters, tabs, or line endings).\n *\n * @param {Point} point\n *   Point.\n * @param {number} offset\n *   Amount to move.\n * @returns {undefined}\n *   Nothing.\n */\nfunction movePoint(point, offset) {\n  point.column += offset;\n  point.offset += offset;\n  point._bufferIndex += offset;\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { asciiAlphanumeric, asciiAlpha, asciiAtext, asciiControl } from 'micromark-util-character';\n/** @type {Construct} */\nexport const autolink = {\n  name: 'autolink',\n  tokenize: tokenizeAutolink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeAutolink(effects, ok, nok) {\n  let size = 0;\n  return start;\n\n  /**\n   * Start of an autolink.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *      ^\n   * > | a<user@example.com>b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"autolink\");\n    effects.enter(\"autolinkMarker\");\n    effects.consume(code);\n    effects.exit(\"autolinkMarker\");\n    effects.enter(\"autolinkProtocol\");\n    return open;\n  }\n\n  /**\n   * After `<`, at protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *       ^\n   * > | a<user@example.com>b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return schemeOrEmailAtext;\n    }\n    if (code === 64) {\n      return nok(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * At second byte of protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeOrEmailAtext(code) {\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if (code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) {\n      // Count the previous alphabetical from `open` too.\n      size = 1;\n      return schemeInsideOrEmailAtext(code);\n    }\n    return emailAtext(code);\n  }\n\n  /**\n   * In ambiguous protocol or atext.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *        ^\n   * > | a<user@example.com>b\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function schemeInsideOrEmailAtext(code) {\n    if (code === 58) {\n      effects.consume(code);\n      size = 0;\n      return urlInside;\n    }\n\n    // ASCII alphanumeric and `+`, `-`, and `.`.\n    if ((code === 43 || code === 45 || code === 46 || asciiAlphanumeric(code)) && size++ < 32) {\n      effects.consume(code);\n      return schemeInsideOrEmailAtext;\n    }\n    size = 0;\n    return emailAtext(code);\n  }\n\n  /**\n   * After protocol, in URL.\n   *\n   * ```markdown\n   * > | a<https://example.com>b\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function urlInside(code) {\n    if (code === 62) {\n      effects.exit(\"autolinkProtocol\");\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n\n    // ASCII control, space, or `<`.\n    if (code === null || code === 32 || code === 60 || asciiControl(code)) {\n      return nok(code);\n    }\n    effects.consume(code);\n    return urlInside;\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtext(code) {\n    if (code === 64) {\n      effects.consume(code);\n      return emailAtSignOrDot;\n    }\n    if (asciiAtext(code)) {\n      effects.consume(code);\n      return emailAtext;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label, after at-sign or dot.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                 ^       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailAtSignOrDot(code) {\n    return asciiAlphanumeric(code) ? emailLabel(code) : nok(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are allowed.\n   *\n   * ```markdown\n   * > | a<user.name@example.com>b\n   *                   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailLabel(code) {\n    if (code === 46) {\n      effects.consume(code);\n      size = 0;\n      return emailAtSignOrDot;\n    }\n    if (code === 62) {\n      // Exit, then change the token type.\n      effects.exit(\"autolinkProtocol\").type = \"autolinkEmail\";\n      effects.enter(\"autolinkMarker\");\n      effects.consume(code);\n      effects.exit(\"autolinkMarker\");\n      effects.exit(\"autolink\");\n      return ok;\n    }\n    return emailValue(code);\n  }\n\n  /**\n   * In label, where `.` and `>` are *not* allowed.\n   *\n   * Though, this is also used in `emailLabel` to parse other values.\n   *\n   * ```markdown\n   * > | a<user.name@ex-ample.com>b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailValue(code) {\n    // ASCII alphanumeric or `-`.\n    if ((code === 45 || asciiAlphanumeric(code)) && size++ < 63) {\n      const next = code === 45 ? emailValue : emailLabel;\n      effects.consume(code);\n      return next;\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Code,\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { asciiAlphanumeric, asciiAlpha, markdownLineEndingOrSpace, markdownLineEnding, markdownSpace } from 'micromark-util-character';\n/** @type {Construct} */\nexport const htmlText = {\n  name: 'htmlText',\n  tokenize: tokenizeHtmlText\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHtmlText(effects, ok, nok) {\n  const self = this;\n  /** @type {NonNullable<Code> | undefined} */\n  let marker;\n  /** @type {number} */\n  let index;\n  /** @type {State} */\n  let returnState;\n  return start;\n\n  /**\n   * Start of HTML (text).\n   *\n   * ```markdown\n   * > | a <b> c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"htmlText\");\n    effects.enter(\"htmlTextData\");\n    effects.consume(code);\n    return open;\n  }\n\n  /**\n   * After `<`, at tag name or other stuff.\n   *\n   * ```markdown\n   * > | a <b> c\n   *        ^\n   * > | a <!doctype> c\n   *        ^\n   * > | a <!--b--> c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (code === 33) {\n      effects.consume(code);\n      return declarationOpen;\n    }\n    if (code === 47) {\n      effects.consume(code);\n      return tagCloseStart;\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instruction;\n    }\n\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `<!`, at declaration, comment, or CDATA.\n   *\n   * ```markdown\n   * > | a <!doctype> c\n   *         ^\n   * > | a <!--b--> c\n   *         ^\n   * > | a <![CDATA[>&<]]> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declarationOpen(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentOpenInside;\n    }\n    if (code === 91) {\n      effects.consume(code);\n      index = 0;\n      return cdataOpenInside;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return declaration;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In a comment, after `<!-`, at another `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentOpenInside(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In comment.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function comment(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 45) {\n      effects.consume(code);\n      return commentClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = comment;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return comment;\n  }\n\n  /**\n   * In comment, after `-`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentClose(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return commentEnd;\n    }\n    return comment(code);\n  }\n\n  /**\n   * In comment, after `--`.\n   *\n   * ```markdown\n   * > | a <!--b--> c\n   *              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function commentEnd(code) {\n    return code === 62 ? end(code) : code === 45 ? commentClose(code) : comment(code);\n  }\n\n  /**\n   * After `<![`, in CDATA, expecting `CDATA[`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *          ^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataOpenInside(code) {\n    const value = \"CDATA[\";\n    if (code === value.charCodeAt(index++)) {\n      effects.consume(code);\n      return index === value.length ? cdata : cdataOpenInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In CDATA.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                ^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdata(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = cdata;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return cdata;\n  }\n\n  /**\n   * In CDATA, after `]`, at another `]`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataClose(code) {\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In CDATA, after `]]`, at `>`.\n   *\n   * ```markdown\n   * > | a <![CDATA[>&<]]> b\n   *                     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function cdataEnd(code) {\n    if (code === 62) {\n      return end(code);\n    }\n    if (code === 93) {\n      effects.consume(code);\n      return cdataEnd;\n    }\n    return cdata(code);\n  }\n\n  /**\n   * In declaration.\n   *\n   * ```markdown\n   * > | a <!b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function declaration(code) {\n    if (code === null || code === 62) {\n      return end(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = declaration;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return declaration;\n  }\n\n  /**\n   * In instruction.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instruction(code) {\n    if (code === null) {\n      return nok(code);\n    }\n    if (code === 63) {\n      effects.consume(code);\n      return instructionClose;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = instruction;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return instruction;\n  }\n\n  /**\n   * In instruction, after `?`, at `>`.\n   *\n   * ```markdown\n   * > | a <?b?> c\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function instructionClose(code) {\n    return code === 62 ? end(code) : instruction(code);\n  }\n\n  /**\n   * After `</`, in closing tag, at tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseStart(code) {\n    // ASCII alphabetical.\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After `</x`, in a tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagClose(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagClose;\n    }\n    return tagCloseBetween(code);\n  }\n\n  /**\n   * In closing tag, after tag name.\n   *\n   * ```markdown\n   * > | a </b> c\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagCloseBetween(code) {\n    if (markdownLineEnding(code)) {\n      returnState = tagCloseBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagCloseBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * After `<x`, in opening tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpen(code) {\n    // ASCII alphanumerical and `-`.\n    if (code === 45 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpen;\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In opening tag, after tag name.\n   *\n   * ```markdown\n   * > | a <b> c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenBetween(code) {\n    if (code === 47) {\n      effects.consume(code);\n      return end;\n    }\n\n    // ASCII alphabetical and `:` and `_`.\n    if (code === 58 || code === 95 || asciiAlpha(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenBetween;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenBetween;\n    }\n    return end(code);\n  }\n\n  /**\n   * In attribute name.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeName(code) {\n    // ASCII alphabetical and `-`, `.`, `:`, and `_`.\n    if (code === 45 || code === 46 || code === 58 || code === 95 || asciiAlphanumeric(code)) {\n      effects.consume(code);\n      return tagOpenAttributeName;\n    }\n    return tagOpenAttributeNameAfter(code);\n  }\n\n  /**\n   * After attribute name, before initializer, the end of the tag, or\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c> d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeNameAfter(code) {\n    if (code === 61) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeNameAfter;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeNameAfter;\n    }\n    return tagOpenBetween(code);\n  }\n\n  /**\n   * Before unquoted, double quoted, or single quoted attribute value, allowing\n   * whitespace.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueBefore(code) {\n    if (code === null || code === 60 || code === 61 || code === 62 || code === 96) {\n      return nok(code);\n    }\n    if (code === 34 || code === 39) {\n      effects.consume(code);\n      marker = code;\n      return tagOpenAttributeValueQuoted;\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueBefore;\n      return lineEndingBefore(code);\n    }\n    if (markdownSpace(code)) {\n      effects.consume(code);\n      return tagOpenAttributeValueBefore;\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * In double or single quoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuoted(code) {\n    if (code === marker) {\n      effects.consume(code);\n      marker = undefined;\n      return tagOpenAttributeValueQuotedAfter;\n    }\n    if (code === null) {\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      returnState = tagOpenAttributeValueQuoted;\n      return lineEndingBefore(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueQuoted;\n  }\n\n  /**\n   * In unquoted attribute value.\n   *\n   * ```markdown\n   * > | a <b c=d> e\n   *            ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueUnquoted(code) {\n    if (code === null || code === 34 || code === 39 || code === 60 || code === 61 || code === 96) {\n      return nok(code);\n    }\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    effects.consume(code);\n    return tagOpenAttributeValueUnquoted;\n  }\n\n  /**\n   * After double or single quoted attribute value, before whitespace or the end\n   * of the tag.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function tagOpenAttributeValueQuotedAfter(code) {\n    if (code === 47 || code === 62 || markdownLineEndingOrSpace(code)) {\n      return tagOpenBetween(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In certain circumstances of a tag where only an `>` is allowed.\n   *\n   * ```markdown\n   * > | a <b c=\"d\"> e\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function end(code) {\n    if (code === 62) {\n      effects.consume(code);\n      effects.exit(\"htmlTextData\");\n      effects.exit(\"htmlText\");\n      return ok;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At eol.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   * > | a <!--a\n   *            ^\n   *   | b-->\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingBefore(code) {\n    effects.exit(\"htmlTextData\");\n    effects.enter(\"lineEnding\");\n    effects.consume(code);\n    effects.exit(\"lineEnding\");\n    return lineEndingAfter;\n  }\n\n  /**\n   * After eol, at optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfter(code) {\n    // Always populated by defaults.\n\n    return markdownSpace(code) ? factorySpace(effects, lineEndingAfterPrefix, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code) : lineEndingAfterPrefix(code);\n  }\n\n  /**\n   * After eol, after optional whitespace.\n   *\n   * > 👉 **Note**: we can’t have blank lines in text, so no need to worry about\n   * > empty tokens.\n   *\n   * ```markdown\n   *   | a <!--a\n   * > | b-->\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function lineEndingAfterPrefix(code) {\n    effects.enter(\"htmlTextData\");\n    return returnState(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { labelEnd } from './label-end.js';\n\n/** @type {Construct} */\nexport const labelStartLink = {\n  name: 'labelStartLink',\n  resolveAll: labelEnd.resolveAll,\n  tokenize: tokenizeLabelStartLink\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeLabelStartLink(effects, ok, nok) {\n  const self = this;\n  return start;\n\n  /**\n   * Start of label (link) start.\n   *\n   * ```markdown\n   * > | a [b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"labelLink\");\n    effects.enter(\"labelMarker\");\n    effects.consume(code);\n    effects.exit(\"labelMarker\");\n    effects.exit(\"labelLink\");\n    return after;\n  }\n\n  /** @type {State} */\n  function after(code) {\n    // To do: this isn’t needed in `micromark-extension-gfm-footnote`,\n    // remove.\n    // Hidden footnotes hook.\n    /* c8 ignore next 3 */\n    return code === 94 && '_hiddenFootnoteSupport' in self.parser.constructs ? nok(code) : ok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   State,\n *   TokenizeContext,\n *   Tokenizer\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const hardBreakEscape = {\n  name: 'hardBreakEscape',\n  tokenize: tokenizeHardBreakEscape\n};\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeHardBreakEscape(effects, ok, nok) {\n  return start;\n\n  /**\n   * Start of a hard break (escape).\n   *\n   * ```markdown\n   * > | a\\\n   *      ^\n   *   | b\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"hardBreakEscape\");\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After `\\`, at eol.\n   *\n   * ```markdown\n   * > | a\\\n   *       ^\n   *   | b\n   * ```\n   *\n   *  @type {State}\n   */\n  function after(code) {\n    if (markdownLineEnding(code)) {\n      effects.exit(\"hardBreakEscape\");\n      return ok(code);\n    }\n    return nok(code);\n  }\n}","/**\n * @import {\n *   Construct,\n *   Previous,\n *   Resolver,\n *   State,\n *   TokenizeContext,\n *   Tokenizer,\n *   Token\n * } from 'micromark-util-types'\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\n/** @type {Construct} */\nexport const codeText = {\n  name: 'codeText',\n  previous,\n  resolve: resolveCodeText,\n  tokenize: tokenizeCodeText\n};\n\n// To do: next major: don’t resolve, like `markdown-rs`.\n/** @type {Resolver} */\nfunction resolveCodeText(events) {\n  let tailExitIndex = events.length - 4;\n  let headEnterIndex = 3;\n  /** @type {number} */\n  let index;\n  /** @type {number | undefined} */\n  let enter;\n\n  // If we start and end with an EOL or a space.\n  if ((events[headEnterIndex][1].type === \"lineEnding\" || events[headEnterIndex][1].type === 'space') && (events[tailExitIndex][1].type === \"lineEnding\" || events[tailExitIndex][1].type === 'space')) {\n    index = headEnterIndex;\n\n    // And we have data.\n    while (++index < tailExitIndex) {\n      if (events[index][1].type === \"codeTextData\") {\n        // Then we have padding.\n        events[headEnterIndex][1].type = \"codeTextPadding\";\n        events[tailExitIndex][1].type = \"codeTextPadding\";\n        headEnterIndex += 2;\n        tailExitIndex -= 2;\n        break;\n      }\n    }\n  }\n\n  // Merge adjacent spaces and data.\n  index = headEnterIndex - 1;\n  tailExitIndex++;\n  while (++index <= tailExitIndex) {\n    if (enter === undefined) {\n      if (index !== tailExitIndex && events[index][1].type !== \"lineEnding\") {\n        enter = index;\n      }\n    } else if (index === tailExitIndex || events[index][1].type === \"lineEnding\") {\n      events[enter][1].type = \"codeTextData\";\n      if (index !== enter + 2) {\n        events[enter][1].end = events[index - 1][1].end;\n        events.splice(enter + 2, index - enter - 2);\n        tailExitIndex -= index - enter - 2;\n        index = enter + 2;\n      }\n      enter = undefined;\n    }\n  }\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Previous}\n */\nfunction previous(code) {\n  // If there is a previous code, there will always be a tail.\n  return code !== 96 || this.events[this.events.length - 1][1].type === \"characterEscape\";\n}\n\n/**\n * @this {TokenizeContext}\n *   Context.\n * @type {Tokenizer}\n */\nfunction tokenizeCodeText(effects, ok, nok) {\n  const self = this;\n  let sizeOpen = 0;\n  /** @type {number} */\n  let size;\n  /** @type {Token} */\n  let token;\n  return start;\n\n  /**\n   * Start of code (text).\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * > | \\`a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter(\"codeText\");\n    effects.enter(\"codeTextSequence\");\n    return sequenceOpen(code);\n  }\n\n  /**\n   * In opening sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceOpen(code) {\n    if (code === 96) {\n      effects.consume(code);\n      sizeOpen++;\n      return sequenceOpen;\n    }\n    effects.exit(\"codeTextSequence\");\n    return between(code);\n  }\n\n  /**\n   * Between something and something else.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function between(code) {\n    // EOF.\n    if (code === null) {\n      return nok(code);\n    }\n\n    // To do: next major: don’t do spaces in resolve, but when compiling,\n    // like `markdown-rs`.\n    // Tabs don’t work, and virtual spaces don’t make sense.\n    if (code === 32) {\n      effects.enter('space');\n      effects.consume(code);\n      effects.exit('space');\n      return between;\n    }\n\n    // Closing fence? Could also be data.\n    if (code === 96) {\n      token = effects.enter(\"codeTextSequence\");\n      size = 0;\n      return sequenceClose(code);\n    }\n    if (markdownLineEnding(code)) {\n      effects.enter(\"lineEnding\");\n      effects.consume(code);\n      effects.exit(\"lineEnding\");\n      return between;\n    }\n\n    // Data.\n    effects.enter(\"codeTextData\");\n    return data(code);\n  }\n\n  /**\n   * In data.\n   *\n   * ```markdown\n   * > | `a`\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function data(code) {\n    if (code === null || code === 32 || code === 96 || markdownLineEnding(code)) {\n      effects.exit(\"codeTextData\");\n      return between(code);\n    }\n    effects.consume(code);\n    return data;\n  }\n\n  /**\n   * In closing sequence.\n   *\n   * ```markdown\n   * > | `a`\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function sequenceClose(code) {\n    // More.\n    if (code === 96) {\n      effects.consume(code);\n      size++;\n      return sequenceClose;\n    }\n\n    // Done!\n    if (size === sizeOpen) {\n      effects.exit(\"codeTextSequence\");\n      effects.exit(\"codeText\");\n      return ok(code);\n    }\n\n    // More or less accents: mark as data.\n    token.type = \"codeTextData\";\n    return data(code);\n  }\n}","/**\n * @import {Extension} from 'micromark-util-types'\n */\n\nimport { attention, autolink, blockQuote, characterEscape, characterReference, codeFenced, codeIndented, codeText, definition, hardBreakEscape, headingAtx, htmlFlow, htmlText, labelEnd, labelStartImage, labelStartLink, lineEnding, list, setextUnderline, thematicBreak } from 'micromark-core-commonmark';\nimport { resolver as resolveText } from './initialize/text.js';\n\n/** @satisfies {Extension['document']} */\nexport const document = {\n  [42]: list,\n  [43]: list,\n  [45]: list,\n  [48]: list,\n  [49]: list,\n  [50]: list,\n  [51]: list,\n  [52]: list,\n  [53]: list,\n  [54]: list,\n  [55]: list,\n  [56]: list,\n  [57]: list,\n  [62]: blockQuote\n};\n\n/** @satisfies {Extension['contentInitial']} */\nexport const contentInitial = {\n  [91]: definition\n};\n\n/** @satisfies {Extension['flowInitial']} */\nexport const flowInitial = {\n  [-2]: codeIndented,\n  [-1]: codeIndented,\n  [32]: codeIndented\n};\n\n/** @satisfies {Extension['flow']} */\nexport const flow = {\n  [35]: headingAtx,\n  [42]: thematicBreak,\n  [45]: [setextUnderline, thematicBreak],\n  [60]: htmlFlow,\n  [61]: setextUnderline,\n  [95]: thematicBreak,\n  [96]: codeFenced,\n  [126]: codeFenced\n};\n\n/** @satisfies {Extension['string']} */\nexport const string = {\n  [38]: characterReference,\n  [92]: characterEscape\n};\n\n/** @satisfies {Extension['text']} */\nexport const text = {\n  [-5]: lineEnding,\n  [-4]: lineEnding,\n  [-3]: lineEnding,\n  [33]: labelStartImage,\n  [38]: characterReference,\n  [42]: attention,\n  [60]: [autolink, htmlText],\n  [91]: labelStartLink,\n  [92]: [hardBreakEscape, characterEscape],\n  [93]: labelEnd,\n  [95]: attention,\n  [96]: codeText\n};\n\n/** @satisfies {Extension['insideSpan']} */\nexport const insideSpan = {\n  null: [attention, resolveText]\n};\n\n/** @satisfies {Extension['attentionMarkers']} */\nexport const attentionMarkers = {\n  null: [42, 95]\n};\n\n/** @satisfies {Extension['disable']} */\nexport const disable = {\n  null: []\n};","/**\n * @import {\n *   Chunk,\n *   Code,\n *   ConstructRecord,\n *   Construct,\n *   Effects,\n *   InitialConstruct,\n *   ParseContext,\n *   Point,\n *   State,\n *   TokenizeContext,\n *   Token\n * } from 'micromark-util-types'\n */\n\n/**\n * @callback Restore\n *   Restore the state.\n * @returns {undefined}\n *   Nothing.\n *\n * @typedef Info\n *   Info.\n * @property {Restore} restore\n *   Restore.\n * @property {number} from\n *   From.\n *\n * @callback ReturnHandle\n *   Handle a successful run.\n * @param {Construct} construct\n *   Construct.\n * @param {Info} info\n *   Info.\n * @returns {undefined}\n *   Nothing.\n */\n\nimport { markdownLineEnding } from 'micromark-util-character';\nimport { push, splice } from 'micromark-util-chunked';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create a tokenizer.\n * Tokenizers deal with one type of data (e.g., containers, flow, text).\n * The parser is the object dealing with it all.\n * `initialize` works like other constructs, except that only its `tokenize`\n * function is used, in which case it doesn’t receive an `ok` or `nok`.\n * `from` can be given to set the point before the first character, although\n * when further lines are indented, they must be set with `defineSkip`.\n *\n * @param {ParseContext} parser\n *   Parser.\n * @param {InitialConstruct} initialize\n *   Construct.\n * @param {Omit<Point, '_bufferIndex' | '_index'> | undefined} [from]\n *   Point (optional).\n * @returns {TokenizeContext}\n *   Context.\n */\nexport function createTokenizer(parser, initialize, from) {\n  /** @type {Point} */\n  let point = {\n    _bufferIndex: -1,\n    _index: 0,\n    line: from && from.line || 1,\n    column: from && from.column || 1,\n    offset: from && from.offset || 0\n  };\n  /** @type {Record<string, number>} */\n  const columnStart = {};\n  /** @type {Array<Construct>} */\n  const resolveAllConstructs = [];\n  /** @type {Array<Chunk>} */\n  let chunks = [];\n  /** @type {Array<Token>} */\n  let stack = [];\n  /** @type {boolean | undefined} */\n  let consumed = true;\n\n  /**\n   * Tools used for tokenizing.\n   *\n   * @type {Effects}\n   */\n  const effects = {\n    attempt: constructFactory(onsuccessfulconstruct),\n    check: constructFactory(onsuccessfulcheck),\n    consume,\n    enter,\n    exit,\n    interrupt: constructFactory(onsuccessfulcheck, {\n      interrupt: true\n    })\n  };\n\n  /**\n   * State and tools for resolving and serializing.\n   *\n   * @type {TokenizeContext}\n   */\n  const context = {\n    code: null,\n    containerState: {},\n    defineSkip,\n    events: [],\n    now,\n    parser,\n    previous: null,\n    sliceSerialize,\n    sliceStream,\n    write\n  };\n\n  /**\n   * The state function.\n   *\n   * @type {State | undefined}\n   */\n  let state = initialize.tokenize.call(context, effects);\n\n  /**\n   * Track which character we expect to be consumed, to catch bugs.\n   *\n   * @type {Code}\n   */\n  let expectedCode;\n  if (initialize.resolveAll) {\n    resolveAllConstructs.push(initialize);\n  }\n  return context;\n\n  /** @type {TokenizeContext['write']} */\n  function write(slice) {\n    chunks = push(chunks, slice);\n    main();\n\n    // Exit if we’re not done, resolve might change stuff.\n    if (chunks[chunks.length - 1] !== null) {\n      return [];\n    }\n    addResult(initialize, 0);\n\n    // Otherwise, resolve, and exit.\n    context.events = resolveAll(resolveAllConstructs, context.events, context);\n    return context.events;\n  }\n\n  //\n  // Tools.\n  //\n\n  /** @type {TokenizeContext['sliceSerialize']} */\n  function sliceSerialize(token, expandTabs) {\n    return serializeChunks(sliceStream(token), expandTabs);\n  }\n\n  /** @type {TokenizeContext['sliceStream']} */\n  function sliceStream(token) {\n    return sliceChunks(chunks, token);\n  }\n\n  /** @type {TokenizeContext['now']} */\n  function now() {\n    // This is a hot path, so we clone manually instead of `Object.assign({}, point)`\n    const {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    } = point;\n    return {\n      _bufferIndex,\n      _index,\n      line,\n      column,\n      offset\n    };\n  }\n\n  /** @type {TokenizeContext['defineSkip']} */\n  function defineSkip(value) {\n    columnStart[value.line] = value.column;\n    accountForPotentialSkip();\n  }\n\n  //\n  // State management.\n  //\n\n  /**\n   * Main loop (note that `_index` and `_bufferIndex` in `point` are modified by\n   * `consume`).\n   * Here is where we walk through the chunks, which either include strings of\n   * several characters, or numerical character codes.\n   * The reason to do this in a loop instead of a call is so the stack can\n   * drain.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function main() {\n    /** @type {number} */\n    let chunkIndex;\n    while (point._index < chunks.length) {\n      const chunk = chunks[point._index];\n\n      // If we’re in a buffer chunk, loop through it.\n      if (typeof chunk === 'string') {\n        chunkIndex = point._index;\n        if (point._bufferIndex < 0) {\n          point._bufferIndex = 0;\n        }\n        while (point._index === chunkIndex && point._bufferIndex < chunk.length) {\n          go(chunk.charCodeAt(point._bufferIndex));\n        }\n      } else {\n        go(chunk);\n      }\n    }\n  }\n\n  /**\n   * Deal with one code.\n   *\n   * @param {Code} code\n   *   Code.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function go(code) {\n    consumed = undefined;\n    expectedCode = code;\n    state = state(code);\n  }\n\n  /** @type {Effects['consume']} */\n  function consume(code) {\n    if (markdownLineEnding(code)) {\n      point.line++;\n      point.column = 1;\n      point.offset += code === -3 ? 2 : 1;\n      accountForPotentialSkip();\n    } else if (code !== -1) {\n      point.column++;\n      point.offset++;\n    }\n\n    // Not in a string chunk.\n    if (point._bufferIndex < 0) {\n      point._index++;\n    } else {\n      point._bufferIndex++;\n\n      // At end of string chunk.\n      if (point._bufferIndex ===\n      // Points w/ non-negative `_bufferIndex` reference\n      // strings.\n      /** @type {string} */\n      chunks[point._index].length) {\n        point._bufferIndex = -1;\n        point._index++;\n      }\n    }\n\n    // Expose the previous character.\n    context.previous = code;\n\n    // Mark as consumed.\n    consumed = true;\n  }\n\n  /** @type {Effects['enter']} */\n  function enter(type, fields) {\n    /** @type {Token} */\n    // @ts-expect-error Patch instead of assign required fields to help GC.\n    const token = fields || {};\n    token.type = type;\n    token.start = now();\n    context.events.push(['enter', token, context]);\n    stack.push(token);\n    return token;\n  }\n\n  /** @type {Effects['exit']} */\n  function exit(type) {\n    const token = stack.pop();\n    token.end = now();\n    context.events.push(['exit', token, context]);\n    return token;\n  }\n\n  /**\n   * Use results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulconstruct(construct, info) {\n    addResult(construct, info.from);\n  }\n\n  /**\n   * Discard results.\n   *\n   * @type {ReturnHandle}\n   */\n  function onsuccessfulcheck(_, info) {\n    info.restore();\n  }\n\n  /**\n   * Factory to attempt/check/interrupt.\n   *\n   * @param {ReturnHandle} onreturn\n   *   Callback.\n   * @param {{interrupt?: boolean | undefined} | undefined} [fields]\n   *   Fields.\n   */\n  function constructFactory(onreturn, fields) {\n    return hook;\n\n    /**\n     * Handle either an object mapping codes to constructs, a list of\n     * constructs, or a single construct.\n     *\n     * @param {Array<Construct> | ConstructRecord | Construct} constructs\n     *   Constructs.\n     * @param {State} returnState\n     *   State.\n     * @param {State | undefined} [bogusState]\n     *   State.\n     * @returns {State}\n     *   State.\n     */\n    function hook(constructs, returnState, bogusState) {\n      /** @type {ReadonlyArray<Construct>} */\n      let listOfConstructs;\n      /** @type {number} */\n      let constructIndex;\n      /** @type {Construct} */\n      let currentConstruct;\n      /** @type {Info} */\n      let info;\n      return Array.isArray(constructs) ? /* c8 ignore next 1 */\n      handleListOfConstructs(constructs) : 'tokenize' in constructs ?\n      // Looks like a construct.\n      handleListOfConstructs([(/** @type {Construct} */constructs)]) : handleMapOfConstructs(constructs);\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ConstructRecord} map\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleMapOfConstructs(map) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          const left = code !== null && map[code];\n          const all = code !== null && map.null;\n          const list = [\n          // To do: add more extension tests.\n          /* c8 ignore next 2 */\n          ...(Array.isArray(left) ? left : left ? [left] : []), ...(Array.isArray(all) ? all : all ? [all] : [])];\n          return handleListOfConstructs(list)(code);\n        }\n      }\n\n      /**\n       * Handle a list of construct.\n       *\n       * @param {ReadonlyArray<Construct>} list\n       *   Constructs.\n       * @returns {State}\n       *   State.\n       */\n      function handleListOfConstructs(list) {\n        listOfConstructs = list;\n        constructIndex = 0;\n        if (list.length === 0) {\n          return bogusState;\n        }\n        return handleConstruct(list[constructIndex]);\n      }\n\n      /**\n       * Handle a single construct.\n       *\n       * @param {Construct} construct\n       *   Construct.\n       * @returns {State}\n       *   State.\n       */\n      function handleConstruct(construct) {\n        return start;\n\n        /** @type {State} */\n        function start(code) {\n          // To do: not needed to store if there is no bogus state, probably?\n          // Currently doesn’t work because `inspect` in document does a check\n          // w/o a bogus, which doesn’t make sense. But it does seem to help perf\n          // by not storing.\n          info = store();\n          currentConstruct = construct;\n          if (!construct.partial) {\n            context.currentConstruct = construct;\n          }\n\n          // Always populated by defaults.\n\n          if (construct.name && context.parser.constructs.disable.null.includes(construct.name)) {\n            return nok(code);\n          }\n          return construct.tokenize.call(\n          // If we do have fields, create an object w/ `context` as its\n          // prototype.\n          // This allows a “live binding”, which is needed for `interrupt`.\n          fields ? Object.assign(Object.create(context), fields) : context, effects, ok, nok)(code);\n        }\n      }\n\n      /** @type {State} */\n      function ok(code) {\n        consumed = true;\n        onreturn(currentConstruct, info);\n        return returnState;\n      }\n\n      /** @type {State} */\n      function nok(code) {\n        consumed = true;\n        info.restore();\n        if (++constructIndex < listOfConstructs.length) {\n          return handleConstruct(listOfConstructs[constructIndex]);\n        }\n        return bogusState;\n      }\n    }\n  }\n\n  /**\n   * @param {Construct} construct\n   *   Construct.\n   * @param {number} from\n   *   From.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function addResult(construct, from) {\n    if (construct.resolveAll && !resolveAllConstructs.includes(construct)) {\n      resolveAllConstructs.push(construct);\n    }\n    if (construct.resolve) {\n      splice(context.events, from, context.events.length - from, construct.resolve(context.events.slice(from), context));\n    }\n    if (construct.resolveTo) {\n      context.events = construct.resolveTo(context.events, context);\n    }\n  }\n\n  /**\n   * Store state.\n   *\n   * @returns {Info}\n   *   Info.\n   */\n  function store() {\n    const startPoint = now();\n    const startPrevious = context.previous;\n    const startCurrentConstruct = context.currentConstruct;\n    const startEventsIndex = context.events.length;\n    const startStack = Array.from(stack);\n    return {\n      from: startEventsIndex,\n      restore\n    };\n\n    /**\n     * Restore state.\n     *\n     * @returns {undefined}\n     *   Nothing.\n     */\n    function restore() {\n      point = startPoint;\n      context.previous = startPrevious;\n      context.currentConstruct = startCurrentConstruct;\n      context.events.length = startEventsIndex;\n      stack = startStack;\n      accountForPotentialSkip();\n    }\n  }\n\n  /**\n   * Move the current point a bit forward in the line when it’s on a column\n   * skip.\n   *\n   * @returns {undefined}\n   *   Nothing.\n   */\n  function accountForPotentialSkip() {\n    if (point.line in columnStart && point.column < 2) {\n      point.column = columnStart[point.line];\n      point.offset += columnStart[point.line] - 1;\n    }\n  }\n}\n\n/**\n * Get the chunks from a slice of chunks in the range of a token.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {Pick<Token, 'end' | 'start'>} token\n *   Token.\n * @returns {Array<Chunk>}\n *   Chunks.\n */\nfunction sliceChunks(chunks, token) {\n  const startIndex = token.start._index;\n  const startBufferIndex = token.start._bufferIndex;\n  const endIndex = token.end._index;\n  const endBufferIndex = token.end._bufferIndex;\n  /** @type {Array<Chunk>} */\n  let view;\n  if (startIndex === endIndex) {\n    // @ts-expect-error `_bufferIndex` is used on string chunks.\n    view = [chunks[startIndex].slice(startBufferIndex, endBufferIndex)];\n  } else {\n    view = chunks.slice(startIndex, endIndex);\n    if (startBufferIndex > -1) {\n      const head = view[0];\n      if (typeof head === 'string') {\n        view[0] = head.slice(startBufferIndex);\n        /* c8 ignore next 4 -- used to be used, no longer */\n      } else {\n        view.shift();\n      }\n    }\n    if (endBufferIndex > 0) {\n      // @ts-expect-error `_bufferIndex` is used on string chunks.\n      view.push(chunks[endIndex].slice(0, endBufferIndex));\n    }\n  }\n  return view;\n}\n\n/**\n * Get the string value of a slice of chunks.\n *\n * @param {ReadonlyArray<Chunk>} chunks\n *   Chunks.\n * @param {boolean | undefined} [expandTabs=false]\n *   Whether to expand tabs (default: `false`).\n * @returns {string}\n *   Result.\n */\nfunction serializeChunks(chunks, expandTabs) {\n  let index = -1;\n  /** @type {Array<string>} */\n  const result = [];\n  /** @type {boolean | undefined} */\n  let atTab;\n  while (++index < chunks.length) {\n    const chunk = chunks[index];\n    /** @type {string} */\n    let value;\n    if (typeof chunk === 'string') {\n      value = chunk;\n    } else switch (chunk) {\n      case -5:\n        {\n          value = \"\\r\";\n          break;\n        }\n      case -4:\n        {\n          value = \"\\n\";\n          break;\n        }\n      case -3:\n        {\n          value = \"\\r\" + \"\\n\";\n          break;\n        }\n      case -2:\n        {\n          value = expandTabs ? \" \" : \"\\t\";\n          break;\n        }\n      case -1:\n        {\n          if (!expandTabs && atTab) continue;\n          value = \" \";\n          break;\n        }\n      default:\n        {\n          // Currently only replacement character.\n          value = String.fromCharCode(chunk);\n        }\n    }\n    atTab = chunk === -2;\n    result.push(value);\n  }\n  return result.join('');\n}","/**\n * @import {Chunk, Code, Encoding, Value} from 'micromark-util-types'\n */\n\n/**\n * @callback Preprocessor\n *   Preprocess a value.\n * @param {Value} value\n *   Value.\n * @param {Encoding | null | undefined} [encoding]\n *   Encoding when `value` is a typed array (optional).\n * @param {boolean | null | undefined} [end=false]\n *   Whether this is the last chunk (default: `false`).\n * @returns {Array<Chunk>}\n *   Chunks.\n */\n\nconst search = /[\\0\\t\\n\\r]/g;\n\n/**\n * @returns {Preprocessor}\n *   Preprocess a value.\n */\nexport function preprocess() {\n  let column = 1;\n  let buffer = '';\n  /** @type {boolean | undefined} */\n  let start = true;\n  /** @type {boolean | undefined} */\n  let atCarriageReturn;\n  return preprocessor;\n\n  /** @type {Preprocessor} */\n  // eslint-disable-next-line complexity\n  function preprocessor(value, encoding, end) {\n    /** @type {Array<Chunk>} */\n    const chunks = [];\n    /** @type {RegExpMatchArray | null} */\n    let match;\n    /** @type {number} */\n    let next;\n    /** @type {number} */\n    let startPosition;\n    /** @type {number} */\n    let endPosition;\n    /** @type {Code} */\n    let code;\n    value = buffer + (typeof value === 'string' ? value.toString() : new TextDecoder(encoding || undefined).decode(value));\n    startPosition = 0;\n    buffer = '';\n    if (start) {\n      // To do: `markdown-rs` actually parses BOMs (byte order mark).\n      if (value.charCodeAt(0) === 65279) {\n        startPosition++;\n      }\n      start = undefined;\n    }\n    while (startPosition < value.length) {\n      search.lastIndex = startPosition;\n      match = search.exec(value);\n      endPosition = match && match.index !== undefined ? match.index : value.length;\n      code = value.charCodeAt(endPosition);\n      if (!match) {\n        buffer = value.slice(startPosition);\n        break;\n      }\n      if (code === 10 && startPosition === endPosition && atCarriageReturn) {\n        chunks.push(-3);\n        atCarriageReturn = undefined;\n      } else {\n        if (atCarriageReturn) {\n          chunks.push(-5);\n          atCarriageReturn = undefined;\n        }\n        if (startPosition < endPosition) {\n          chunks.push(value.slice(startPosition, endPosition));\n          column += endPosition - startPosition;\n        }\n        switch (code) {\n          case 0:\n            {\n              chunks.push(65533);\n              column++;\n              break;\n            }\n          case 9:\n            {\n              next = Math.ceil(column / 4) * 4;\n              chunks.push(-2);\n              while (column++ < next) chunks.push(-1);\n              break;\n            }\n          case 10:\n            {\n              chunks.push(-4);\n              column = 1;\n              break;\n            }\n          default:\n            {\n              atCarriageReturn = true;\n              column = 1;\n            }\n        }\n      }\n      startPosition = endPosition + 1;\n    }\n    if (end) {\n      if (atCarriageReturn) chunks.push(-5);\n      if (buffer) chunks.push(buffer);\n      chunks.push(null);\n    }\n    return chunks;\n  }\n}","/**\n * Turn the number (in string form as either hexa- or plain decimal) coming from\n * a numeric character reference into a character.\n *\n * Sort of like `String.fromCodePoint(Number.parseInt(value, base))`, but makes\n * non-characters and control characters safe.\n *\n * @param {string} value\n *   Value to decode.\n * @param {number} base\n *   Numeric base.\n * @returns {string}\n *   Character.\n */\nexport function decodeNumericCharacterReference(value, base) {\n  const code = Number.parseInt(value, base);\n  if (\n  // C0 except for HT, LF, FF, CR, space.\n  code < 9 || code === 11 || code > 13 && code < 32 ||\n  // Control character (DEL) of C0, and C1 controls.\n  code > 126 && code < 160 ||\n  // Lone high surrogates and low surrogates.\n  code > 55_295 && code < 57_344 ||\n  // Noncharacters.\n  code > 64_975 && code < 65_008 || /* eslint-disable no-bitwise */\n  (code & 65_535) === 65_535 || (code & 65_535) === 65_534 || /* eslint-enable no-bitwise */\n  // Out of range\n  code > 1_114_111) {\n    return \"\\uFFFD\";\n  }\n  return String.fromCodePoint(code);\n}","import { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nconst characterEscapeOrReference = /\\\\([!-/:-@[-`{-~])|&(#(?:\\d{1,7}|x[\\da-f]{1,6})|[\\da-z]{1,31});/gi;\n\n/**\n * Decode markdown strings (which occur in places such as fenced code info\n * strings, destinations, labels, and titles).\n *\n * The “string” content type allows character escapes and -references.\n * This decodes those.\n *\n * @param {string} value\n *   Value to decode.\n * @returns {string}\n *   Decoded value.\n */\nexport function decodeString(value) {\n  return value.replace(characterEscapeOrReference, decode);\n}\n\n/**\n * @param {string} $0\n *   Match.\n * @param {string} $1\n *   Character escape.\n * @param {string} $2\n *   Character reference.\n * @returns {string}\n *   Decoded value\n */\nfunction decode($0, $1, $2) {\n  if ($1) {\n    // Escape.\n    return $1;\n  }\n\n  // Reference.\n  const head = $2.charCodeAt(0);\n  if (head === 35) {\n    const head = $2.charCodeAt(1);\n    const hex = head === 120 || head === 88;\n    return decodeNumericCharacterReference($2.slice(hex ? 2 : 1), hex ? 16 : 10);\n  }\n  return decodeNamedCharacterReference($2) || $0;\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {\n *   Break,\n *   Blockquote,\n *   Code,\n *   Definition,\n *   Emphasis,\n *   Heading,\n *   Html,\n *   Image,\n *   InlineCode,\n *   Link,\n *   ListItem,\n *   List,\n *   Nodes,\n *   Paragraph,\n *   PhrasingContent,\n *   ReferenceType,\n *   Root,\n *   Strong,\n *   Text,\n *   ThematicBreak\n * } from 'mdast'\n * @import {\n *   Encoding,\n *   Event,\n *   Token,\n *   Value\n * } from 'micromark-util-types'\n * @import {Point} from 'unist'\n * @import {\n *   CompileContext,\n *   CompileData,\n *   Config,\n *   Extension,\n *   Handle,\n *   OnEnterError,\n *   Options\n * } from './types.js'\n */\n\nimport { toString } from 'mdast-util-to-string';\nimport { parse, postprocess, preprocess } from 'micromark';\nimport { decodeNumericCharacterReference } from 'micromark-util-decode-numeric-character-reference';\nimport { decodeString } from 'micromark-util-decode-string';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nimport { decodeNamedCharacterReference } from 'decode-named-character-reference';\nimport { stringifyPosition } from 'unist-util-stringify-position';\nconst own = {}.hasOwnProperty;\n\n/**\n * Turn markdown into a syntax tree.\n *\n * @overload\n * @param {Value} value\n * @param {Encoding | null | undefined} [encoding]\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @overload\n * @param {Value} value\n * @param {Options | null | undefined} [options]\n * @returns {Root}\n *\n * @param {Value} value\n *   Markdown to parse.\n * @param {Encoding | Options | null | undefined} [encoding]\n *   Character encoding for when `value` is `Buffer`.\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {Root}\n *   mdast tree.\n */\nexport function fromMarkdown(value, encoding, options) {\n  if (typeof encoding !== 'string') {\n    options = encoding;\n    encoding = undefined;\n  }\n  return compiler(options)(postprocess(parse(options).document().write(preprocess()(value, encoding, true))));\n}\n\n/**\n * Note this compiler only understand complete buffering, not streaming.\n *\n * @param {Options | null | undefined} [options]\n */\nfunction compiler(options) {\n  /** @type {Config} */\n  const config = {\n    transforms: [],\n    canContainEols: ['emphasis', 'fragment', 'heading', 'paragraph', 'strong'],\n    enter: {\n      autolink: opener(link),\n      autolinkProtocol: onenterdata,\n      autolinkEmail: onenterdata,\n      atxHeading: opener(heading),\n      blockQuote: opener(blockQuote),\n      characterEscape: onenterdata,\n      characterReference: onenterdata,\n      codeFenced: opener(codeFlow),\n      codeFencedFenceInfo: buffer,\n      codeFencedFenceMeta: buffer,\n      codeIndented: opener(codeFlow, buffer),\n      codeText: opener(codeText, buffer),\n      codeTextData: onenterdata,\n      data: onenterdata,\n      codeFlowValue: onenterdata,\n      definition: opener(definition),\n      definitionDestinationString: buffer,\n      definitionLabelString: buffer,\n      definitionTitleString: buffer,\n      emphasis: opener(emphasis),\n      hardBreakEscape: opener(hardBreak),\n      hardBreakTrailing: opener(hardBreak),\n      htmlFlow: opener(html, buffer),\n      htmlFlowData: onenterdata,\n      htmlText: opener(html, buffer),\n      htmlTextData: onenterdata,\n      image: opener(image),\n      label: buffer,\n      link: opener(link),\n      listItem: opener(listItem),\n      listItemValue: onenterlistitemvalue,\n      listOrdered: opener(list, onenterlistordered),\n      listUnordered: opener(list),\n      paragraph: opener(paragraph),\n      reference: onenterreference,\n      referenceString: buffer,\n      resourceDestinationString: buffer,\n      resourceTitleString: buffer,\n      setextHeading: opener(heading),\n      strong: opener(strong),\n      thematicBreak: opener(thematicBreak)\n    },\n    exit: {\n      atxHeading: closer(),\n      atxHeadingSequence: onexitatxheadingsequence,\n      autolink: closer(),\n      autolinkEmail: onexitautolinkemail,\n      autolinkProtocol: onexitautolinkprotocol,\n      blockQuote: closer(),\n      characterEscapeValue: onexitdata,\n      characterReferenceMarkerHexadecimal: onexitcharacterreferencemarker,\n      characterReferenceMarkerNumeric: onexitcharacterreferencemarker,\n      characterReferenceValue: onexitcharacterreferencevalue,\n      characterReference: onexitcharacterreference,\n      codeFenced: closer(onexitcodefenced),\n      codeFencedFence: onexitcodefencedfence,\n      codeFencedFenceInfo: onexitcodefencedfenceinfo,\n      codeFencedFenceMeta: onexitcodefencedfencemeta,\n      codeFlowValue: onexitdata,\n      codeIndented: closer(onexitcodeindented),\n      codeText: closer(onexitcodetext),\n      codeTextData: onexitdata,\n      data: onexitdata,\n      definition: closer(),\n      definitionDestinationString: onexitdefinitiondestinationstring,\n      definitionLabelString: onexitdefinitionlabelstring,\n      definitionTitleString: onexitdefinitiontitlestring,\n      emphasis: closer(),\n      hardBreakEscape: closer(onexithardbreak),\n      hardBreakTrailing: closer(onexithardbreak),\n      htmlFlow: closer(onexithtmlflow),\n      htmlFlowData: onexitdata,\n      htmlText: closer(onexithtmltext),\n      htmlTextData: onexitdata,\n      image: closer(onexitimage),\n      label: onexitlabel,\n      labelText: onexitlabeltext,\n      lineEnding: onexitlineending,\n      link: closer(onexitlink),\n      listItem: closer(),\n      listOrdered: closer(),\n      listUnordered: closer(),\n      paragraph: closer(),\n      referenceString: onexitreferencestring,\n      resourceDestinationString: onexitresourcedestinationstring,\n      resourceTitleString: onexitresourcetitlestring,\n      resource: onexitresource,\n      setextHeading: closer(onexitsetextheading),\n      setextHeadingLineSequence: onexitsetextheadinglinesequence,\n      setextHeadingText: onexitsetextheadingtext,\n      strong: closer(),\n      thematicBreak: closer()\n    }\n  };\n  configure(config, (options || {}).mdastExtensions || []);\n\n  /** @type {CompileData} */\n  const data = {};\n  return compile;\n\n  /**\n   * Turn micromark events into an mdast tree.\n   *\n   * @param {Array<Event>} events\n   *   Events.\n   * @returns {Root}\n   *   mdast tree.\n   */\n  function compile(events) {\n    /** @type {Root} */\n    let tree = {\n      type: 'root',\n      children: []\n    };\n    /** @type {Omit<CompileContext, 'sliceSerialize'>} */\n    const context = {\n      stack: [tree],\n      tokenStack: [],\n      config,\n      enter,\n      exit,\n      buffer,\n      resume,\n      data\n    };\n    /** @type {Array<number>} */\n    const listStack = [];\n    let index = -1;\n    while (++index < events.length) {\n      // We preprocess lists to add `listItem` tokens, and to infer whether\n      // items the list itself are spread out.\n      if (events[index][1].type === \"listOrdered\" || events[index][1].type === \"listUnordered\") {\n        if (events[index][0] === 'enter') {\n          listStack.push(index);\n        } else {\n          const tail = listStack.pop();\n          index = prepareList(events, tail, index);\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      const handler = config[events[index][0]];\n      if (own.call(handler, events[index][1].type)) {\n        handler[events[index][1].type].call(Object.assign({\n          sliceSerialize: events[index][2].sliceSerialize\n        }, context), events[index][1]);\n      }\n    }\n\n    // Handle tokens still being open.\n    if (context.tokenStack.length > 0) {\n      const tail = context.tokenStack[context.tokenStack.length - 1];\n      const handler = tail[1] || defaultOnError;\n      handler.call(context, undefined, tail[0]);\n    }\n\n    // Figure out `root` position.\n    tree.position = {\n      start: point(events.length > 0 ? events[0][1].start : {\n        line: 1,\n        column: 1,\n        offset: 0\n      }),\n      end: point(events.length > 0 ? events[events.length - 2][1].end : {\n        line: 1,\n        column: 1,\n        offset: 0\n      })\n    };\n\n    // Call transforms.\n    index = -1;\n    while (++index < config.transforms.length) {\n      tree = config.transforms[index](tree) || tree;\n    }\n    return tree;\n  }\n\n  /**\n   * @param {Array<Event>} events\n   * @param {number} start\n   * @param {number} length\n   * @returns {number}\n   */\n  function prepareList(events, start, length) {\n    let index = start - 1;\n    let containerBalance = -1;\n    let listSpread = false;\n    /** @type {Token | undefined} */\n    let listItem;\n    /** @type {number | undefined} */\n    let lineIndex;\n    /** @type {number | undefined} */\n    let firstBlankLineIndex;\n    /** @type {boolean | undefined} */\n    let atMarker;\n    while (++index <= length) {\n      const event = events[index];\n      switch (event[1].type) {\n        case \"listUnordered\":\n        case \"listOrdered\":\n        case \"blockQuote\":\n          {\n            if (event[0] === 'enter') {\n              containerBalance++;\n            } else {\n              containerBalance--;\n            }\n            atMarker = undefined;\n            break;\n          }\n        case \"lineEndingBlank\":\n          {\n            if (event[0] === 'enter') {\n              if (listItem && !atMarker && !containerBalance && !firstBlankLineIndex) {\n                firstBlankLineIndex = index;\n              }\n              atMarker = undefined;\n            }\n            break;\n          }\n        case \"linePrefix\":\n        case \"listItemValue\":\n        case \"listItemMarker\":\n        case \"listItemPrefix\":\n        case \"listItemPrefixWhitespace\":\n          {\n            // Empty.\n\n            break;\n          }\n        default:\n          {\n            atMarker = undefined;\n          }\n      }\n      if (!containerBalance && event[0] === 'enter' && event[1].type === \"listItemPrefix\" || containerBalance === -1 && event[0] === 'exit' && (event[1].type === \"listUnordered\" || event[1].type === \"listOrdered\")) {\n        if (listItem) {\n          let tailIndex = index;\n          lineIndex = undefined;\n          while (tailIndex--) {\n            const tailEvent = events[tailIndex];\n            if (tailEvent[1].type === \"lineEnding\" || tailEvent[1].type === \"lineEndingBlank\") {\n              if (tailEvent[0] === 'exit') continue;\n              if (lineIndex) {\n                events[lineIndex][1].type = \"lineEndingBlank\";\n                listSpread = true;\n              }\n              tailEvent[1].type = \"lineEnding\";\n              lineIndex = tailIndex;\n            } else if (tailEvent[1].type === \"linePrefix\" || tailEvent[1].type === \"blockQuotePrefix\" || tailEvent[1].type === \"blockQuotePrefixWhitespace\" || tailEvent[1].type === \"blockQuoteMarker\" || tailEvent[1].type === \"listItemIndent\") {\n              // Empty\n            } else {\n              break;\n            }\n          }\n          if (firstBlankLineIndex && (!lineIndex || firstBlankLineIndex < lineIndex)) {\n            listItem._spread = true;\n          }\n\n          // Fix position.\n          listItem.end = Object.assign({}, lineIndex ? events[lineIndex][1].start : event[1].end);\n          events.splice(lineIndex || index, 0, ['exit', listItem, event[2]]);\n          index++;\n          length++;\n        }\n\n        // Create a new list item.\n        if (event[1].type === \"listItemPrefix\") {\n          /** @type {Token} */\n          const item = {\n            type: 'listItem',\n            _spread: false,\n            start: Object.assign({}, event[1].start),\n            // @ts-expect-error: we’ll add `end` in a second.\n            end: undefined\n          };\n          listItem = item;\n          events.splice(index, 0, ['enter', item, event[2]]);\n          index++;\n          length++;\n          firstBlankLineIndex = undefined;\n          atMarker = true;\n        }\n      }\n    }\n    events[start][1]._spread = listSpread;\n    return length;\n  }\n\n  /**\n   * Create an opener handle.\n   *\n   * @param {(token: Token) => Nodes} create\n   *   Create a node.\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function opener(create, and) {\n    return open;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function open(token) {\n      enter.call(this, create(token), token);\n      if (and) and.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['buffer']}\n   */\n  function buffer() {\n    this.stack.push({\n      type: 'fragment',\n      children: []\n    });\n  }\n\n  /**\n   * @type {CompileContext['enter']}\n   */\n  function enter(node, token, errorHandler) {\n    const parent = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children;\n    siblings.push(node);\n    this.stack.push(node);\n    this.tokenStack.push([token, errorHandler || undefined]);\n    node.position = {\n      start: point(token.start),\n      // @ts-expect-error: `end` will be patched later.\n      end: undefined\n    };\n  }\n\n  /**\n   * Create a closer handle.\n   *\n   * @param {Handle | undefined} [and]\n   *   Optional function to also run.\n   * @returns {Handle}\n   *   Handle.\n   */\n  function closer(and) {\n    return close;\n\n    /**\n     * @this {CompileContext}\n     * @param {Token} token\n     * @returns {undefined}\n     */\n    function close(token) {\n      if (and) and.call(this, token);\n      exit.call(this, token);\n    }\n  }\n\n  /**\n   * @type {CompileContext['exit']}\n   */\n  function exit(token, onExitError) {\n    const node = this.stack.pop();\n    const open = this.tokenStack.pop();\n    if (!open) {\n      throw new Error('Cannot close `' + token.type + '` (' + stringifyPosition({\n        start: token.start,\n        end: token.end\n      }) + '): it’s not open');\n    } else if (open[0].type !== token.type) {\n      if (onExitError) {\n        onExitError.call(this, token, open[0]);\n      } else {\n        const handler = open[1] || defaultOnError;\n        handler.call(this, token, open[0]);\n      }\n    }\n    node.position.end = point(token.end);\n  }\n\n  /**\n   * @type {CompileContext['resume']}\n   */\n  function resume() {\n    return toString(this.stack.pop());\n  }\n\n  //\n  // Handlers.\n  //\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistordered() {\n    this.data.expectingFirstListItemValue = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onenterlistitemvalue(token) {\n    if (this.data.expectingFirstListItemValue) {\n      const ancestor = this.stack[this.stack.length - 2];\n      ancestor.start = Number.parseInt(this.sliceSerialize(token), 10);\n      this.data.expectingFirstListItemValue = undefined;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfenceinfo() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.lang = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfencemeta() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.meta = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefencedfence() {\n    // Exit if this is the closing fence.\n    if (this.data.flowCodeInside) return;\n    this.buffer();\n    this.data.flowCodeInside = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodefenced() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/^(\\r?\\n|\\r)|(\\r?\\n|\\r)$/g, '');\n    this.data.flowCodeInside = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcodeindented() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data.replace(/(\\r?\\n|\\r)$/g, '');\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitionlabelstring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.label = label;\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiontitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitdefinitiondestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitatxheadingsequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    if (!node.depth) {\n      const depth = this.sliceSerialize(token).length;\n      node.depth = depth;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadingtext() {\n    this.data.setextHeadingSlurpLineEnding = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheadinglinesequence(token) {\n    const node = this.stack[this.stack.length - 1];\n    node.depth = this.sliceSerialize(token).codePointAt(0) === 61 ? 1 : 2;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitsetextheading() {\n    this.data.setextHeadingSlurpLineEnding = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterdata(token) {\n    const node = this.stack[this.stack.length - 1];\n    /** @type {Array<Nodes>} */\n    const siblings = node.children;\n    let tail = siblings[siblings.length - 1];\n    if (!tail || tail.type !== 'text') {\n      // Add a new text node.\n      tail = text();\n      tail.position = {\n        start: point(token.start),\n        // @ts-expect-error: we’ll add `end` later.\n        end: undefined\n      };\n      siblings.push(tail);\n    }\n    this.stack.push(tail);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitdata(token) {\n    const tail = this.stack.pop();\n    tail.value += this.sliceSerialize(token);\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlineending(token) {\n    const context = this.stack[this.stack.length - 1];\n    // If we’re at a hard break, include the line ending in there.\n    if (this.data.atHardBreak) {\n      const tail = context.children[context.children.length - 1];\n      tail.position.end = point(token.end);\n      this.data.atHardBreak = undefined;\n      return;\n    }\n    if (!this.data.setextHeadingSlurpLineEnding && config.canContainEols.includes(context.type)) {\n      onenterdata.call(this, token);\n      onexitdata.call(this, token);\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithardbreak() {\n    this.data.atHardBreak = true;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmlflow() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexithtmltext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcodetext() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.value = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlink() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitimage() {\n    const node = this.stack[this.stack.length - 1];\n    // Note: there are also `identifier` and `label` fields on this link node!\n    // These are used / cleaned here.\n\n    // To do: clean.\n    if (this.data.inReference) {\n      /** @type {ReferenceType} */\n      const referenceType = this.data.referenceType || 'shortcut';\n      node.type += 'Reference';\n      // @ts-expect-error: mutate.\n      node.referenceType = referenceType;\n      // @ts-expect-error: mutate.\n      delete node.url;\n      delete node.title;\n    } else {\n      // @ts-expect-error: mutate.\n      delete node.identifier;\n      // @ts-expect-error: mutate.\n      delete node.label;\n    }\n    this.data.referenceType = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabeltext(token) {\n    const string = this.sliceSerialize(token);\n    const ancestor = this.stack[this.stack.length - 2];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    ancestor.label = decodeString(string);\n    // @ts-expect-error: same as above.\n    ancestor.identifier = normalizeIdentifier(string).toLowerCase();\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitlabel() {\n    const fragment = this.stack[this.stack.length - 1];\n    const value = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // Assume a reference.\n    this.data.inReference = true;\n    if (node.type === 'link') {\n      /** @type {Array<PhrasingContent>} */\n      const children = fragment.children;\n      node.children = children;\n    } else {\n      node.alt = value;\n    }\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcedestinationstring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.url = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresourcetitlestring() {\n    const data = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    node.title = data;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitresource() {\n    this.data.inReference = undefined;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onenterreference() {\n    this.data.referenceType = 'collapsed';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitreferencestring(token) {\n    const label = this.resume();\n    const node = this.stack[this.stack.length - 1];\n    // @ts-expect-error: stash this on the node, as it might become a reference\n    // later.\n    node.label = label;\n    // @ts-expect-error: same as above.\n    node.identifier = normalizeIdentifier(this.sliceSerialize(token)).toLowerCase();\n    this.data.referenceType = 'full';\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n\n  function onexitcharacterreferencemarker(token) {\n    this.data.characterReferenceType = token.type;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreferencevalue(token) {\n    const data = this.sliceSerialize(token);\n    const type = this.data.characterReferenceType;\n    /** @type {string} */\n    let value;\n    if (type) {\n      value = decodeNumericCharacterReference(data, type === \"characterReferenceMarkerNumeric\" ? 10 : 16);\n      this.data.characterReferenceType = undefined;\n    } else {\n      const result = decodeNamedCharacterReference(data);\n      value = result;\n    }\n    const tail = this.stack[this.stack.length - 1];\n    tail.value += value;\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitcharacterreference(token) {\n    const tail = this.stack.pop();\n    tail.position.end = point(token.end);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkprotocol(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = this.sliceSerialize(token);\n  }\n\n  /**\n   * @this {CompileContext}\n   * @type {Handle}\n   */\n  function onexitautolinkemail(token) {\n    onexitdata.call(this, token);\n    const node = this.stack[this.stack.length - 1];\n    node.url = 'mailto:' + this.sliceSerialize(token);\n  }\n\n  //\n  // Creaters.\n  //\n\n  /** @returns {Blockquote} */\n  function blockQuote() {\n    return {\n      type: 'blockquote',\n      children: []\n    };\n  }\n\n  /** @returns {Code} */\n  function codeFlow() {\n    return {\n      type: 'code',\n      lang: null,\n      meta: null,\n      value: ''\n    };\n  }\n\n  /** @returns {InlineCode} */\n  function codeText() {\n    return {\n      type: 'inlineCode',\n      value: ''\n    };\n  }\n\n  /** @returns {Definition} */\n  function definition() {\n    return {\n      type: 'definition',\n      identifier: '',\n      label: null,\n      title: null,\n      url: ''\n    };\n  }\n\n  /** @returns {Emphasis} */\n  function emphasis() {\n    return {\n      type: 'emphasis',\n      children: []\n    };\n  }\n\n  /** @returns {Heading} */\n  function heading() {\n    return {\n      type: 'heading',\n      // @ts-expect-error `depth` will be set later.\n      depth: 0,\n      children: []\n    };\n  }\n\n  /** @returns {Break} */\n  function hardBreak() {\n    return {\n      type: 'break'\n    };\n  }\n\n  /** @returns {Html} */\n  function html() {\n    return {\n      type: 'html',\n      value: ''\n    };\n  }\n\n  /** @returns {Image} */\n  function image() {\n    return {\n      type: 'image',\n      title: null,\n      url: '',\n      alt: null\n    };\n  }\n\n  /** @returns {Link} */\n  function link() {\n    return {\n      type: 'link',\n      title: null,\n      url: '',\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {List}\n   */\n  function list(token) {\n    return {\n      type: 'list',\n      ordered: token.type === 'listOrdered',\n      start: null,\n      spread: token._spread,\n      children: []\n    };\n  }\n\n  /**\n   * @param {Token} token\n   * @returns {ListItem}\n   */\n  function listItem(token) {\n    return {\n      type: 'listItem',\n      spread: token._spread,\n      checked: null,\n      children: []\n    };\n  }\n\n  /** @returns {Paragraph} */\n  function paragraph() {\n    return {\n      type: 'paragraph',\n      children: []\n    };\n  }\n\n  /** @returns {Strong} */\n  function strong() {\n    return {\n      type: 'strong',\n      children: []\n    };\n  }\n\n  /** @returns {Text} */\n  function text() {\n    return {\n      type: 'text',\n      value: ''\n    };\n  }\n\n  /** @returns {ThematicBreak} */\n  function thematicBreak() {\n    return {\n      type: 'thematicBreak'\n    };\n  }\n}\n\n/**\n * Copy a point-like value.\n *\n * @param {Point} d\n *   Point-like value.\n * @returns {Point}\n *   unist point.\n */\nfunction point(d) {\n  return {\n    line: d.line,\n    column: d.column,\n    offset: d.offset\n  };\n}\n\n/**\n * @param {Config} combined\n * @param {Array<Array<Extension> | Extension>} extensions\n * @returns {undefined}\n */\nfunction configure(combined, extensions) {\n  let index = -1;\n  while (++index < extensions.length) {\n    const value = extensions[index];\n    if (Array.isArray(value)) {\n      configure(combined, value);\n    } else {\n      extension(combined, value);\n    }\n  }\n}\n\n/**\n * @param {Config} combined\n * @param {Extension} extension\n * @returns {undefined}\n */\nfunction extension(combined, extension) {\n  /** @type {keyof Extension} */\n  let key;\n  for (key in extension) {\n    if (own.call(extension, key)) {\n      switch (key) {\n        case 'canContainEols':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'transforms':\n          {\n            const right = extension[key];\n            if (right) {\n              combined[key].push(...right);\n            }\n            break;\n          }\n        case 'enter':\n        case 'exit':\n          {\n            const right = extension[key];\n            if (right) {\n              Object.assign(combined[key], right);\n            }\n            break;\n          }\n        // No default\n      }\n    }\n  }\n}\n\n/** @type {OnEnterError} */\nfunction defaultOnError(left, right) {\n  if (left) {\n    throw new Error('Cannot close `' + left.type + '` (' + stringifyPosition({\n      start: left.start,\n      end: left.end\n    }) + '): a different token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is open');\n  } else {\n    throw new Error('Cannot close document, a token (`' + right.type + '`, ' + stringifyPosition({\n      start: right.start,\n      end: right.end\n    }) + ') is still open');\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\nimport { subtokenize } from 'micromark-util-subtokenize';\n\n/**\n * @param {Array<Event>} events\n *   Events.\n * @returns {Array<Event>}\n *   Events.\n */\nexport function postprocess(events) {\n  while (!subtokenize(events)) {\n    // Empty\n  }\n  return events;\n}","/**\n * @import {\n *   Create,\n *   FullNormalizedExtension,\n *   InitialConstruct,\n *   ParseContext,\n *   ParseOptions\n * } from 'micromark-util-types'\n */\n\nimport { combineExtensions } from 'micromark-util-combine-extensions';\nimport { content } from './initialize/content.js';\nimport { document } from './initialize/document.js';\nimport { flow } from './initialize/flow.js';\nimport { string, text } from './initialize/text.js';\nimport * as defaultConstructs from './constructs.js';\nimport { createTokenizer } from './create-tokenizer.js';\n\n/**\n * @param {ParseOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ParseContext}\n *   Parser.\n */\nexport function parse(options) {\n  const settings = options || {};\n  const constructs = /** @type {FullNormalizedExtension} */\n  combineExtensions([defaultConstructs, ...(settings.extensions || [])]);\n\n  /** @type {ParseContext} */\n  const parser = {\n    constructs,\n    content: create(content),\n    defined: [],\n    document: create(document),\n    flow: create(flow),\n    lazy: {},\n    string: create(string),\n    text: create(text)\n  };\n  return parser;\n\n  /**\n   * @param {InitialConstruct} initial\n   *   Construct to start with.\n   * @returns {Create}\n   *   Create a tokenizer.\n   */\n  function create(initial) {\n    return creator;\n    /** @type {Create} */\n    function creator(from) {\n      return createTokenizer(parser, initial, from);\n    }\n  }\n}","/**\n * @typedef {import('mdast').Root} Root\n * @typedef {import('mdast-util-from-markdown').Options} FromMarkdownOptions\n * @typedef {import('unified').Parser<Root>} Parser\n * @typedef {import('unified').Processor<Root>} Processor\n */\n\n/**\n * @typedef {Omit<FromMarkdownOptions, 'extensions' | 'mdastExtensions'>} Options\n */\n\nimport {fromMarkdown} from 'mdast-util-from-markdown'\n\n/**\n * Aadd support for parsing from markdown.\n *\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkParse(options) {\n  /** @type {Processor} */\n  // @ts-expect-error: TS in JSDoc generates wrong types if `this` is typed regularly.\n  const self = this\n\n  self.parser = parser\n\n  /**\n   * @type {Parser}\n   */\n  function parser(doc) {\n    return fromMarkdown(doc, {\n      ...self.data('settings'),\n      ...options,\n      // Note: these options are not in the readme.\n      // The goal is for them to be set by plugins on `data` instead of being\n      // passed by users.\n      extensions: self.data('micromarkExtensions') || [],\n      mdastExtensions: self.data('fromMarkdownExtensions') || []\n    })\n  }\n}\n","export const VOID       = -1;\nexport const PRIMITIVE  = 0;\nexport const ARRAY      = 1;\nexport const OBJECT     = 2;\nexport const DATE       = 3;\nexport const REGEXP     = 4;\nexport const MAP        = 5;\nexport const SET        = 6;\nexport const ERROR      = 7;\nexport const BIGINT     = 8;\n// export const SYMBOL = 9;\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst env = typeof self === 'object' ? self : globalThis;\n\nconst deserializer = ($, _) => {\n  const as = (out, index) => {\n    $.set(index, out);\n    return out;\n  };\n\n  const unpair = index => {\n    if ($.has(index))\n      return $.get(index);\n\n    const [type, value] = _[index];\n    switch (type) {\n      case PRIMITIVE:\n      case VOID:\n        return as(value, index);\n      case ARRAY: {\n        const arr = as([], index);\n        for (const index of value)\n          arr.push(unpair(index));\n        return arr;\n      }\n      case OBJECT: {\n        const object = as({}, index);\n        for (const [key, index] of value)\n          object[unpair(key)] = unpair(index);\n        return object;\n      }\n      case DATE:\n        return as(new Date(value), index);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as(new RegExp(source, flags), index);\n      }\n      case MAP: {\n        const map = as(new Map, index);\n        for (const [key, index] of value)\n          map.set(unpair(key), unpair(index));\n        return map;\n      }\n      case SET: {\n        const set = as(new Set, index);\n        for (const index of value)\n          set.add(unpair(index));\n        return set;\n      }\n      case ERROR: {\n        const {name, message} = value;\n        return as(new env[name](message), index);\n      }\n      case BIGINT:\n        return as(BigInt(value), index);\n      case 'BigInt':\n        return as(Object(BigInt(value)), index);\n      case 'ArrayBuffer':\n        return as(new Uint8Array(value).buffer, value);\n      case 'DataView': {\n        const { buffer } = new Uint8Array(value);\n        return as(new DataView(buffer), value);\n      }\n    }\n    return as(new env[type](value), index);\n  };\n\n  return unpair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns a deserialized value from a serialized array of Records.\n * @param {Record[]} serialized a previously serialized value.\n * @returns {any}\n */\nexport const deserialize = serialized => deserializer(new Map, serialized)(0);\n","import {\n  VOID, PRIMITIVE,\n  ARRAY, OBJECT,\n  DATE, REGEXP, MAP, SET,\n  ERROR, BIGINT\n} from './types.js';\n\nconst EMPTY = '';\n\nconst {toString} = {};\nconst {keys} = Object;\n\nconst typeOf = value => {\n  const type = typeof value;\n  if (type !== 'object' || !value)\n    return [PRIMITIVE, type];\n\n  const asString = toString.call(value).slice(8, -1);\n  switch (asString) {\n    case 'Array':\n      return [ARRAY, EMPTY];\n    case 'Object':\n      return [OBJECT, EMPTY];\n    case 'Date':\n      return [DATE, EMPTY];\n    case 'RegExp':\n      return [REGEXP, EMPTY];\n    case 'Map':\n      return [MAP, EMPTY];\n    case 'Set':\n      return [SET, EMPTY];\n    case 'DataView':\n      return [ARRAY, asString];\n  }\n\n  if (asString.includes('Array'))\n    return [ARRAY, asString];\n\n  if (asString.includes('Error'))\n    return [ERROR, asString];\n\n  return [OBJECT, asString];\n};\n\nconst shouldSkip = ([TYPE, type]) => (\n  TYPE === PRIMITIVE &&\n  (type === 'function' || type === 'symbol')\n);\n\nconst serializer = (strict, json, $, _) => {\n\n  const as = (out, value) => {\n    const index = _.push(out) - 1;\n    $.set(value, index);\n    return index;\n  };\n\n  const pair = value => {\n    if ($.has(value))\n      return $.get(value);\n\n    let [TYPE, type] = typeOf(value);\n    switch (TYPE) {\n      case PRIMITIVE: {\n        let entry = value;\n        switch (type) {\n          case 'bigint':\n            TYPE = BIGINT;\n            entry = value.toString();\n            break;\n          case 'function':\n          case 'symbol':\n            if (strict)\n              throw new TypeError('unable to serialize ' + type);\n            entry = null;\n            break;\n          case 'undefined':\n            return as([VOID], value);\n        }\n        return as([TYPE, entry], value);\n      }\n      case ARRAY: {\n        if (type) {\n          let spread = value;\n          if (type === 'DataView') {\n            spread = new Uint8Array(value.buffer);\n          }\n          else if (type === 'ArrayBuffer') {\n            spread = new Uint8Array(value);\n          }\n          return as([type, [...spread]], value);\n        }\n\n        const arr = [];\n        const index = as([TYPE, arr], value);\n        for (const entry of value)\n          arr.push(pair(entry));\n        return index;\n      }\n      case OBJECT: {\n        if (type) {\n          switch (type) {\n            case 'BigInt':\n              return as([type, value.toString()], value);\n            case 'Boolean':\n            case 'Number':\n            case 'String':\n              return as([type, value.valueOf()], value);\n          }\n        }\n\n        if (json && ('toJSON' in value))\n          return pair(value.toJSON());\n\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const key of keys(value)) {\n          if (strict || !shouldSkip(typeOf(value[key])))\n            entries.push([pair(key), pair(value[key])]);\n        }\n        return index;\n      }\n      case DATE:\n        return as([TYPE, value.toISOString()], value);\n      case REGEXP: {\n        const {source, flags} = value;\n        return as([TYPE, {source, flags}], value);\n      }\n      case MAP: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const [key, entry] of value) {\n          if (strict || !(shouldSkip(typeOf(key)) || shouldSkip(typeOf(entry))))\n            entries.push([pair(key), pair(entry)]);\n        }\n        return index;\n      }\n      case SET: {\n        const entries = [];\n        const index = as([TYPE, entries], value);\n        for (const entry of value) {\n          if (strict || !shouldSkip(typeOf(entry)))\n            entries.push(pair(entry));\n        }\n        return index;\n      }\n    }\n\n    const {message} = value;\n    return as([TYPE, {name: type, message}], value);\n  };\n\n  return pair;\n};\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} value a serializable value.\n * @param {{json?: boolean, lossy?: boolean}?} options an object with a `lossy` or `json` property that,\n *  if `true`, will not throw errors on incompatible types, and behave more\n *  like JSON stringify would behave. Symbol and Function will be discarded.\n * @returns {Record[]}\n */\n export const serialize = (value, {json, lossy} = {}) => {\n  const _ = [];\n  return serializer(!(json || lossy), !!json, new Map, _)(value), _;\n};\n","import {deserialize} from './deserialize.js';\nimport {serialize} from './serialize.js';\n\n/**\n * @typedef {Array<string,any>} Record a type representation\n */\n\n/**\n * Returns an array of serialized Records.\n * @param {any} any a serializable value.\n * @param {{transfer?: any[], json?: boolean, lossy?: boolean}?} options an object with\n * a transfer option (ignored when polyfilled) and/or non standard fields that\n * fallback to the polyfill if present.\n * @returns {Record[]}\n */\nexport default typeof structuredClone === \"function\" ?\n  /* c8 ignore start */\n  (any, options) => (\n    options && ('json' in options || 'lossy' in options) ?\n      deserialize(serialize(any, options)) : structuredClone(any)\n  ) :\n  (any, options) => deserialize(serialize(any, options));\n  /* c8 ignore stop */\n\nexport {deserialize, serialize};\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","import { asciiAlphanumeric } from 'micromark-util-character';\nimport { encode } from 'micromark-util-encode';\n/**\n * Make a value safe for injection as a URL.\n *\n * This encodes unsafe characters with percent-encoding and skips already\n * encoded sequences (see `normalizeUri`).\n * Further unsafe characters are encoded as character references (see\n * `micromark-util-encode`).\n *\n * A regex of allowed protocols can be given, in which case the URL is\n * sanitized.\n * For example, `/^(https?|ircs?|mailto|xmpp)$/i` can be used for `a[href]`, or\n * `/^https?$/i` for `img[src]` (this is what `github.com` allows).\n * If the URL includes an unknown protocol (one not matched by `protocol`, such\n * as a dangerous example, `javascript:`), the value is ignored.\n *\n * @param {string | null | undefined} url\n *   URI to sanitize.\n * @param {RegExp | null | undefined} [protocol]\n *   Allowed protocols.\n * @returns {string}\n *   Sanitized URI.\n */\nexport function sanitizeUri(url, protocol) {\n  const value = encode(normalizeUri(url || ''));\n  if (!protocol) {\n    return value;\n  }\n  const colon = value.indexOf(':');\n  const questionMark = value.indexOf('?');\n  const numberSign = value.indexOf('#');\n  const slash = value.indexOf('/');\n  if (\n  // If there is no protocol, it’s relative.\n  colon < 0 ||\n  // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n  slash > -1 && colon > slash || questionMark > -1 && colon > questionMark || numberSign > -1 && colon > numberSign ||\n  // It is a protocol, it should be allowed.\n  protocol.test(value.slice(0, colon))) {\n    return value;\n  }\n  return '';\n}\n\n/**\n * Normalize a URL.\n *\n * Encode unsafe characters with percent-encoding, skipping already encoded\n * sequences.\n *\n * @param {string} value\n *   URI to normalize.\n * @returns {string}\n *   Normalized URI.\n */\nexport function normalizeUri(value) {\n  /** @type {Array<string>} */\n  const result = [];\n  let index = -1;\n  let start = 0;\n  let skip = 0;\n  while (++index < value.length) {\n    const code = value.charCodeAt(index);\n    /** @type {string} */\n    let replace = '';\n\n    // A correct percent encoded value.\n    if (code === 37 && asciiAlphanumeric(value.charCodeAt(index + 1)) && asciiAlphanumeric(value.charCodeAt(index + 2))) {\n      skip = 2;\n    }\n    // ASCII.\n    else if (code < 128) {\n      if (!/[!#$&-;=?-Z_a-z~]/.test(String.fromCharCode(code))) {\n        replace = String.fromCharCode(code);\n      }\n    }\n    // Astral.\n    else if (code > 55_295 && code < 57_344) {\n      const next = value.charCodeAt(index + 1);\n\n      // A correct surrogate pair.\n      if (code < 56_320 && next > 56_319 && next < 57_344) {\n        replace = String.fromCharCode(code, next);\n        skip = 1;\n      }\n      // Lone surrogate.\n      else {\n        replace = \"\\uFFFD\";\n      }\n    }\n    // Unicode.\n    else {\n      replace = String.fromCharCode(code);\n    }\n    if (replace) {\n      result.push(value.slice(start, index), encodeURIComponent(replace));\n      start = index + skip + 1;\n      replace = '';\n    }\n    if (skip) {\n      index += skip;\n      skip = 0;\n    }\n  }\n  return result.join('') + value.slice(start);\n}","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('./state.js').State} State\n */\n\n/**\n * @callback FootnoteBackContentTemplate\n *   Generate content for the backreference dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent> | ElementContent | string}\n *   Content for the backreference when linking back from definitions to their\n *   reference.\n *\n * @callback FootnoteBackLabelTemplate\n *   Generate a back label dynamically.\n *\n *   For the following markdown:\n *\n *   ```markdown\n *   Alpha[^micromark], bravo[^micromark], and charlie[^remark].\n *\n *   [^remark]: things about remark\n *   [^micromark]: things about micromark\n *   ```\n *\n *   This function will be called with:\n *\n *   *  `0` and `0` for the backreference from `things about micromark` to\n *      `alpha`, as it is the first used definition, and the first call to it\n *   *  `0` and `1` for the backreference from `things about micromark` to\n *      `bravo`, as it is the first used definition, and the second call to it\n *   *  `1` and `0` for the backreference from `things about remark` to\n *      `charlie`, as it is the second used definition\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Back label to use when linking back from definitions to their reference.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Generate the default content that GitHub uses on backreferences.\n *\n * @param {number} _\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {Array<ElementContent>}\n *   Content.\n */\nexport function defaultFootnoteBackContent(_, rereferenceIndex) {\n  /** @type {Array<ElementContent>} */\n  const result = [{type: 'text', value: '↩'}]\n\n  if (rereferenceIndex > 1) {\n    result.push({\n      type: 'element',\n      tagName: 'sup',\n      properties: {},\n      children: [{type: 'text', value: String(rereferenceIndex)}]\n    })\n  }\n\n  return result\n}\n\n/**\n * Generate the default label that GitHub uses on backreferences.\n *\n * @param {number} referenceIndex\n *   Index of the definition in the order that they are first referenced,\n *   0-indexed.\n * @param {number} rereferenceIndex\n *   Index of calls to the same definition, 0-indexed.\n * @returns {string}\n *   Label.\n */\nexport function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n  return (\n    'Back to reference ' +\n    (referenceIndex + 1) +\n    (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n  )\n}\n\n/**\n * Generate a hast footer for called footnote definitions.\n *\n * @param {State} state\n *   Info passed around.\n * @returns {Element | undefined}\n *   `section` element or `undefined`.\n */\n// eslint-disable-next-line complexity\nexport function footer(state) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const footnoteBackContent =\n    state.options.footnoteBackContent || defaultFootnoteBackContent\n  const footnoteBackLabel =\n    state.options.footnoteBackLabel || defaultFootnoteBackLabel\n  const footnoteLabel = state.options.footnoteLabel || 'Footnotes'\n  const footnoteLabelTagName = state.options.footnoteLabelTagName || 'h2'\n  const footnoteLabelProperties = state.options.footnoteLabelProperties || {\n    className: ['sr-only']\n  }\n  /** @type {Array<ElementContent>} */\n  const listItems = []\n  let referenceIndex = -1\n\n  while (++referenceIndex < state.footnoteOrder.length) {\n    const definition = state.footnoteById.get(\n      state.footnoteOrder[referenceIndex]\n    )\n\n    if (!definition) {\n      continue\n    }\n\n    const content = state.all(definition)\n    const id = String(definition.identifier).toUpperCase()\n    const safeId = normalizeUri(id.toLowerCase())\n    let rereferenceIndex = 0\n    /** @type {Array<ElementContent>} */\n    const backReferences = []\n    const counts = state.footnoteCounts.get(id)\n\n    // eslint-disable-next-line no-unmodified-loop-condition\n    while (counts !== undefined && ++rereferenceIndex <= counts) {\n      if (backReferences.length > 0) {\n        backReferences.push({type: 'text', value: ' '})\n      }\n\n      let children =\n        typeof footnoteBackContent === 'string'\n          ? footnoteBackContent\n          : footnoteBackContent(referenceIndex, rereferenceIndex)\n\n      if (typeof children === 'string') {\n        children = {type: 'text', value: children}\n      }\n\n      backReferences.push({\n        type: 'element',\n        tagName: 'a',\n        properties: {\n          href:\n            '#' +\n            clobberPrefix +\n            'fnref-' +\n            safeId +\n            (rereferenceIndex > 1 ? '-' + rereferenceIndex : ''),\n          dataFootnoteBackref: '',\n          ariaLabel:\n            typeof footnoteBackLabel === 'string'\n              ? footnoteBackLabel\n              : footnoteBackLabel(referenceIndex, rereferenceIndex),\n          className: ['data-footnote-backref']\n        },\n        children: Array.isArray(children) ? children : [children]\n      })\n    }\n\n    const tail = content[content.length - 1]\n\n    if (tail && tail.type === 'element' && tail.tagName === 'p') {\n      const tailTail = tail.children[tail.children.length - 1]\n      if (tailTail && tailTail.type === 'text') {\n        tailTail.value += ' '\n      } else {\n        tail.children.push({type: 'text', value: ' '})\n      }\n\n      tail.children.push(...backReferences)\n    } else {\n      content.push(...backReferences)\n    }\n\n    /** @type {Element} */\n    const listItem = {\n      type: 'element',\n      tagName: 'li',\n      properties: {id: clobberPrefix + 'fn-' + safeId},\n      children: state.wrap(content, true)\n    }\n\n    state.patch(definition, listItem)\n\n    listItems.push(listItem)\n  }\n\n  if (listItems.length === 0) {\n    return\n  }\n\n  return {\n    type: 'element',\n    tagName: 'section',\n    properties: {dataFootnotes: true, className: ['footnotes']},\n    children: [\n      {\n        type: 'element',\n        tagName: footnoteLabelTagName,\n        properties: {\n          ...structuredClone(footnoteLabelProperties),\n          id: 'footnote-label'\n        },\n        children: [{type: 'text', value: footnoteLabel}]\n      },\n      {type: 'text', value: '\\n'},\n      {\n        type: 'element',\n        tagName: 'ol',\n        properties: {},\n        children: state.wrap(listItems, true)\n      },\n      {type: 'text', value: '\\n'}\n    ]\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('hast').ElementContent} ElementContent\n *\n * @typedef {import('mdast').Nodes} Nodes\n * @typedef {import('mdast').Reference} Reference\n *\n * @typedef {import('./state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Return the content of a reference without definition as plain text.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Extract<Nodes, Reference>} node\n *   Reference node (image, link).\n * @returns {Array<ElementContent>}\n *   hast content.\n */\nexport function revert(state, node) {\n  const subtype = node.referenceType\n  let suffix = ']'\n\n  if (subtype === 'collapsed') {\n    suffix += '[]'\n  } else if (subtype === 'full') {\n    suffix += '[' + (node.label || node.identifier) + ']'\n  }\n\n  if (node.type === 'imageReference') {\n    return [{type: 'text', value: '![' + node.alt + suffix}]\n  }\n\n  const contents = state.all(node)\n  const head = contents[0]\n\n  if (head && head.type === 'text') {\n    head.value = '[' + head.value\n  } else {\n    contents.unshift({type: 'text', value: '['})\n  }\n\n  const tail = contents[contents.length - 1]\n\n  if (tail && tail.type === 'text') {\n    tail.value += suffix\n  } else {\n    contents.push({type: 'text', value: suffix})\n  }\n\n  return contents\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `listItem` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ListItem} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function listItem(state, node, parent) {\n  const results = state.all(node)\n  const loose = parent ? listLoose(parent) : listItemLoose(node)\n  /** @type {Properties} */\n  const properties = {}\n  /** @type {Array<ElementContent>} */\n  const children = []\n\n  if (typeof node.checked === 'boolean') {\n    const head = results[0]\n    /** @type {Element} */\n    let paragraph\n\n    if (head && head.type === 'element' && head.tagName === 'p') {\n      paragraph = head\n    } else {\n      paragraph = {type: 'element', tagName: 'p', properties: {}, children: []}\n      results.unshift(paragraph)\n    }\n\n    if (paragraph.children.length > 0) {\n      paragraph.children.unshift({type: 'text', value: ' '})\n    }\n\n    paragraph.children.unshift({\n      type: 'element',\n      tagName: 'input',\n      properties: {type: 'checkbox', checked: node.checked, disabled: true},\n      children: []\n    })\n\n    // According to github-markdown-css, this class hides bullet.\n    // See: <https://github.com/sindresorhus/github-markdown-css>.\n    properties.className = ['task-list-item']\n  }\n\n  let index = -1\n\n  while (++index < results.length) {\n    const child = results[index]\n\n    // Add eols before nodes, except if this is a loose, first paragraph.\n    if (\n      loose ||\n      index !== 0 ||\n      child.type !== 'element' ||\n      child.tagName !== 'p'\n    ) {\n      children.push({type: 'text', value: '\\n'})\n    }\n\n    if (child.type === 'element' && child.tagName === 'p' && !loose) {\n      children.push(...child.children)\n    } else {\n      children.push(child)\n    }\n  }\n\n  const tail = results[results.length - 1]\n\n  // Add a final eol.\n  if (tail && (loose || tail.type !== 'element' || tail.tagName !== 'p')) {\n    children.push({type: 'text', value: '\\n'})\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'li', properties, children}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * @param {Parents} node\n * @return {Boolean}\n */\nfunction listLoose(node) {\n  let loose = false\n  if (node.type === 'list') {\n    loose = node.spread || false\n    const children = node.children\n    let index = -1\n\n    while (!loose && ++index < children.length) {\n      loose = listItemLoose(children[index])\n    }\n  }\n\n  return loose\n}\n\n/**\n * @param {ListItem} node\n * @return {Boolean}\n */\nfunction listItemLoose(node) {\n  const spread = node.spread\n\n  return spread === null || spread === undefined\n    ? node.children.length > 1\n    : spread\n}\n","const tab = 9 /* `\\t` */\nconst space = 32 /* ` ` */\n\n/**\n * Remove initial and final spaces and tabs at the line breaks in `value`.\n * Does not trim initial and final spaces and tabs of the value itself.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Trimmed value.\n */\nexport function trimLines(value) {\n  const source = String(value)\n  const search = /\\r?\\n|\\r/g\n  let match = search.exec(source)\n  let last = 0\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (match) {\n    lines.push(\n      trimLine(source.slice(last, match.index), last > 0, true),\n      match[0]\n    )\n\n    last = match.index + match[0].length\n    match = search.exec(source)\n  }\n\n  lines.push(trimLine(source.slice(last), last > 0, false))\n\n  return lines.join('')\n}\n\n/**\n * @param {string} value\n *   Line to trim.\n * @param {boolean} start\n *   Whether to trim the start of the line.\n * @param {boolean} end\n *   Whether to trim the end of the line.\n * @returns {string}\n *   Trimmed line.\n */\nfunction trimLine(value, start, end) {\n  let startIndex = 0\n  let endIndex = value.length\n\n  if (start) {\n    let code = value.codePointAt(startIndex)\n\n    while (code === tab || code === space) {\n      startIndex++\n      code = value.codePointAt(startIndex)\n    }\n  }\n\n  if (end) {\n    let code = value.codePointAt(endIndex - 1)\n\n    while (code === tab || code === space) {\n      endIndex--\n      code = value.codePointAt(endIndex - 1)\n    }\n  }\n\n  return endIndex > startIndex ? value.slice(startIndex, endIndex) : ''\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {strikethrough} from './delete.js'\nimport {emphasis} from './emphasis.js'\nimport {footnoteReference} from './footnote-reference.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {imageReference} from './image-reference.js'\nimport {image} from './image.js'\nimport {inlineCode} from './inline-code.js'\nimport {linkReference} from './link-reference.js'\nimport {link} from './link.js'\nimport {listItem} from './list-item.js'\nimport {list} from './list.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {table} from './table.js'\nimport {tableRow} from './table-row.js'\nimport {tableCell} from './table-cell.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default handlers for nodes.\n *\n * @satisfies {import('../state.js').Handlers}\n */\nexport const handlers = {\n  blockquote,\n  break: hardBreak,\n  code,\n  delete: strikethrough,\n  emphasis,\n  footnoteReference,\n  heading,\n  html,\n  imageReference,\n  image,\n  inlineCode,\n  linkReference,\n  link,\n  listItem,\n  list,\n  paragraph,\n  // @ts-expect-error: root is different, but hard to type.\n  root,\n  strong,\n  table,\n  tableCell,\n  tableRow,\n  text,\n  thematicBreak,\n  toml: ignore,\n  yaml: ignore,\n  definition: ignore,\n  footnoteDefinition: ignore\n}\n\n// Return nothing for nodes that are ignored.\nfunction ignore() {\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Blockquote} Blockquote\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `blockquote` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Blockquote} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function blockquote(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'blockquote',\n    properties: {},\n    children: state.wrap(state.all(node), true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').Break} Break\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `break` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Break} node\n *   mdast node.\n * @returns {Array<Element | Text>}\n *   hast element content.\n */\nexport function hardBreak(state, node) {\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'br', properties: {}, children: []}\n  state.patch(node, result)\n  return [state.applyData(node, result), {type: 'text', value: '\\n'}]\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Code} Code\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `code` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Code} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function code(state, node) {\n  const value = node.value ? node.value + '\\n' : ''\n  /** @type {Properties} */\n  const properties = {}\n\n  if (node.lang) {\n    properties.className = ['language-' + node.lang]\n  }\n\n  // Create `<code>`.\n  /** @type {Element} */\n  let result = {\n    type: 'element',\n    tagName: 'code',\n    properties,\n    children: [{type: 'text', value}]\n  }\n\n  if (node.meta) {\n    result.data = {meta: node.meta}\n  }\n\n  state.patch(node, result)\n  result = state.applyData(node, result)\n\n  // Create `<pre>`.\n  result = {type: 'element', tagName: 'pre', properties: {}, children: [result]}\n  state.patch(node, result)\n  return result\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Delete} Delete\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `delete` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Delete} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strikethrough(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'del',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Emphasis} Emphasis\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `emphasis` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Emphasis} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function emphasis(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'em',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').FootnoteReference} FootnoteReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `footnoteReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {FootnoteReference} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function footnoteReference(state, node) {\n  const clobberPrefix =\n    typeof state.options.clobberPrefix === 'string'\n      ? state.options.clobberPrefix\n      : 'user-content-'\n  const id = String(node.identifier).toUpperCase()\n  const safeId = normalizeUri(id.toLowerCase())\n  const index = state.footnoteOrder.indexOf(id)\n  /** @type {number} */\n  let counter\n\n  let reuseCounter = state.footnoteCounts.get(id)\n\n  if (reuseCounter === undefined) {\n    reuseCounter = 0\n    state.footnoteOrder.push(id)\n    counter = state.footnoteOrder.length\n  } else {\n    counter = index + 1\n  }\n\n  reuseCounter += 1\n  state.footnoteCounts.set(id, reuseCounter)\n\n  /** @type {Element} */\n  const link = {\n    type: 'element',\n    tagName: 'a',\n    properties: {\n      href: '#' + clobberPrefix + 'fn-' + safeId,\n      id:\n        clobberPrefix +\n        'fnref-' +\n        safeId +\n        (reuseCounter > 1 ? '-' + reuseCounter : ''),\n      dataFootnoteRef: true,\n      ariaDescribedBy: ['footnote-label']\n    },\n    children: [{type: 'text', value: String(counter)}]\n  }\n  state.patch(node, link)\n\n  /** @type {Element} */\n  const sup = {\n    type: 'element',\n    tagName: 'sup',\n    properties: {},\n    children: [link]\n  }\n  state.patch(node, sup)\n  return state.applyData(node, sup)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Heading} Heading\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `heading` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Heading} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function heading(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'h' + node.depth,\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Html} Html\n * @typedef {import('../state.js').State} State\n * @typedef {import('../../index.js').Raw} Raw\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `html` node into hast (`raw` node in dangerous mode, otherwise\n * nothing).\n *\n * @param {State} state\n *   Info passed around.\n * @param {Html} node\n *   mdast node.\n * @returns {Element | Raw | undefined}\n *   hast node.\n */\nexport function html(state, node) {\n  if (state.options.allowDangerousHtml) {\n    /** @type {Raw} */\n    const result = {type: 'raw', value: node.value}\n    state.patch(node, result)\n    return state.applyData(node, result)\n  }\n\n  return undefined\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').ImageReference} ImageReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `imageReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ImageReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function imageReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(definition.url || ''), alt: node.alt}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Image} Image\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `image` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Image} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function image(state, node) {\n  /** @type {Properties} */\n  const properties = {src: normalizeUri(node.url)}\n\n  if (node.alt !== null && node.alt !== undefined) {\n    properties.alt = node.alt\n  }\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {type: 'element', tagName: 'img', properties, children: []}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Text} Text\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `inlineCode` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {InlineCode} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function inlineCode(state, node) {\n  /** @type {Text} */\n  const text = {type: 'text', value: node.value.replace(/\\r?\\n|\\r/g, ' ')}\n  state.patch(node, text)\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'code',\n    properties: {},\n    children: [text]\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').LinkReference} LinkReference\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\nimport {revert} from '../revert.js'\n\n/**\n * Turn an mdast `linkReference` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {LinkReference} node\n *   mdast node.\n * @returns {Array<ElementContent> | ElementContent}\n *   hast node.\n */\nexport function linkReference(state, node) {\n  const id = String(node.identifier).toUpperCase()\n  const definition = state.definitionById.get(id)\n\n  if (!definition) {\n    return revert(state, node)\n  }\n\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(definition.url || '')}\n\n  if (definition.title !== null && definition.title !== undefined) {\n    properties.title = definition.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Link} Link\n * @typedef {import('../state.js').State} State\n */\n\nimport {normalizeUri} from 'micromark-util-sanitize-uri'\n\n/**\n * Turn an mdast `link` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Link} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function link(state, node) {\n  /** @type {Properties} */\n  const properties = {href: normalizeUri(node.url)}\n\n  if (node.title !== null && node.title !== undefined) {\n    properties.title = node.title\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'a',\n    properties,\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').List} List\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `list` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {List} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function list(state, node) {\n  /** @type {Properties} */\n  const properties = {}\n  const results = state.all(node)\n  let index = -1\n\n  if (typeof node.start === 'number' && node.start !== 1) {\n    properties.start = node.start\n  }\n\n  // Like GitHub, add a class for custom styling.\n  while (++index < results.length) {\n    const child = results[index]\n\n    if (\n      child.type === 'element' &&\n      child.tagName === 'li' &&\n      child.properties &&\n      Array.isArray(child.properties.className) &&\n      child.properties.className.includes('task-list-item')\n    ) {\n      properties.className = ['contains-task-list']\n      break\n    }\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: node.ordered ? 'ol' : 'ul',\n    properties,\n    children: state.wrap(results, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `paragraph` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Paragraph} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function paragraph(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'p',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Parents} HastParents\n * @typedef {import('hast').Root} HastRoot\n * @typedef {import('mdast').Root} MdastRoot\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `root` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastRoot} node\n *   mdast node.\n * @returns {HastParents}\n *   hast node.\n */\nexport function root(state, node) {\n  /** @type {HastRoot} */\n  const result = {type: 'root', children: state.wrap(state.all(node))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Strong} Strong\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `strong` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Strong} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function strong(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'strong',\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').Table} Table\n * @typedef {import('../state.js').State} State\n */\n\nimport {pointEnd, pointStart} from 'unist-util-position'\n\n/**\n * Turn an mdast `table` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {Table} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function table(state, node) {\n  const rows = state.all(node)\n  const firstRow = rows.shift()\n  /** @type {Array<Element>} */\n  const tableContent = []\n\n  if (firstRow) {\n    /** @type {Element} */\n    const head = {\n      type: 'element',\n      tagName: 'thead',\n      properties: {},\n      children: state.wrap([firstRow], true)\n    }\n    state.patch(node.children[0], head)\n    tableContent.push(head)\n  }\n\n  if (rows.length > 0) {\n    /** @type {Element} */\n    const body = {\n      type: 'element',\n      tagName: 'tbody',\n      properties: {},\n      children: state.wrap(rows, true)\n    }\n\n    const start = pointStart(node.children[1])\n    const end = pointEnd(node.children[node.children.length - 1])\n    if (start && end) body.position = {start, end}\n    tableContent.push(body)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'table',\n    properties: {},\n    children: state.wrap(tableContent, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableCell` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableCell} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function tableCell(state, node) {\n  // Note: this function is normally not called: see `table-row` for how rows\n  // and their cells are compiled.\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'td', // Assume body cell.\n    properties: {},\n    children: state.all(node)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').ElementContent} ElementContent\n * @typedef {import('hast').Properties} Properties\n * @typedef {import('mdast').Parents} Parents\n * @typedef {import('mdast').TableRow} TableRow\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `tableRow` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {TableRow} node\n *   mdast node.\n * @param {Parents | undefined} parent\n *   Parent of `node`.\n * @returns {Element}\n *   hast node.\n */\nexport function tableRow(state, node, parent) {\n  const siblings = parent ? parent.children : undefined\n  // Generate a body row when without parent.\n  const rowIndex = siblings ? siblings.indexOf(node) : 1\n  const tagName = rowIndex === 0 ? 'th' : 'td'\n  // To do: option to use `style`?\n  const align = parent && parent.type === 'table' ? parent.align : undefined\n  const length = align ? align.length : node.children.length\n  let cellIndex = -1\n  /** @type {Array<ElementContent>} */\n  const cells = []\n\n  while (++cellIndex < length) {\n    // Note: can also be undefined.\n    const cell = node.children[cellIndex]\n    /** @type {Properties} */\n    const properties = {}\n    const alignValue = align ? align[cellIndex] : undefined\n\n    if (alignValue) {\n      properties.align = alignValue\n    }\n\n    /** @type {Element} */\n    let result = {type: 'element', tagName, properties, children: []}\n\n    if (cell) {\n      result.children = state.all(cell)\n      state.patch(cell, result)\n      result = state.applyData(cell, result)\n    }\n\n    cells.push(result)\n  }\n\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'tr',\n    properties: {},\n    children: state.wrap(cells, true)\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').Text} HastText\n * @typedef {import('mdast').Text} MdastText\n * @typedef {import('../state.js').State} State\n */\n\nimport {trimLines} from 'trim-lines'\n\n/**\n * Turn an mdast `text` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastText} node\n *   mdast node.\n * @returns {HastElement | HastText}\n *   hast node.\n */\nexport function text(state, node) {\n  /** @type {HastText} */\n  const result = {type: 'text', value: trimLines(String(node.value))}\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('mdast').ThematicBreak} ThematicBreak\n * @typedef {import('../state.js').State} State\n */\n\n// Make VS Code show references to the above types.\n''\n\n/**\n * Turn an mdast `thematicBreak` node into hast.\n *\n * @param {State} state\n *   Info passed around.\n * @param {ThematicBreak} node\n *   mdast node.\n * @returns {Element}\n *   hast node.\n */\nexport function thematicBreak(state, node) {\n  /** @type {Element} */\n  const result = {\n    type: 'element',\n    tagName: 'hr',\n    properties: {},\n    children: []\n  }\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n","/**\n * @typedef {import('hast').Element} HastElement\n * @typedef {import('hast').ElementContent} HastElementContent\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('hast').Properties} HastProperties\n * @typedef {import('hast').RootContent} HastRootContent\n * @typedef {import('hast').Text} HastText\n *\n * @typedef {import('mdast').Definition} MdastDefinition\n * @typedef {import('mdast').FootnoteDefinition} MdastFootnoteDefinition\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('mdast').Parents} MdastParents\n *\n * @typedef {import('vfile').VFile} VFile\n *\n * @typedef {import('./footer.js').FootnoteBackContentTemplate} FootnoteBackContentTemplate\n * @typedef {import('./footer.js').FootnoteBackLabelTemplate} FootnoteBackLabelTemplate\n */\n\n/**\n * @callback Handler\n *   Handle a node.\n * @param {State} state\n *   Info passed around.\n * @param {any} node\n *   mdast node to handle.\n * @param {MdastParents | undefined} parent\n *   Parent of `node`.\n * @returns {Array<HastElementContent> | HastElementContent | undefined}\n *   hast node.\n *\n * @typedef {Partial<Record<MdastNodes['type'], Handler>>} Handlers\n *   Handle nodes.\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [allowDangerousHtml=false]\n *   Whether to persist raw HTML in markdown in the hast tree (default:\n *   `false`).\n * @property {string | null | undefined} [clobberPrefix='user-content-']\n *   Prefix to use before the `id` property on footnotes to prevent them from\n *   *clobbering* (default: `'user-content-'`).\n *\n *   Pass `''` for trusted markdown and when you are careful with\n *   polyfilling.\n *   You could pass a different prefix.\n *\n *   DOM clobbering is this:\n *\n *   ```html\n *   <p id=\"x\"></p>\n *   <script>alert(x) // `x` now refers to the `p#x` DOM element</script>\n *   ```\n *\n *   The above example shows that elements are made available by browsers, by\n *   their ID, on the `window` object.\n *   This is a security risk because you might be expecting some other variable\n *   at that place.\n *   It can also break polyfills.\n *   Using a prefix solves these problems.\n * @property {VFile | null | undefined} [file]\n *   Corresponding virtual file representing the input document (optional).\n * @property {FootnoteBackContentTemplate | string | null | undefined} [footnoteBackContent]\n *   Content of the backreference back to references (default: `defaultFootnoteBackContent`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackContent(_, rereferenceIndex) {\n *     const result = [{type: 'text', value: '↩'}]\n *\n *     if (rereferenceIndex > 1) {\n *       result.push({\n *         type: 'element',\n *         tagName: 'sup',\n *         properties: {},\n *         children: [{type: 'text', value: String(rereferenceIndex)}]\n *       })\n *     }\n *\n *     return result\n *   }\n *   ```\n *\n *   This content is used in the `a` element of each backreference (the `↩`\n *   links).\n * @property {FootnoteBackLabelTemplate | string | null | undefined} [footnoteBackLabel]\n *   Label to describe the backreference back to references (default:\n *   `defaultFootnoteBackLabel`).\n *\n *   The default value is:\n *\n *   ```js\n *   function defaultFootnoteBackLabel(referenceIndex, rereferenceIndex) {\n *    return (\n *      'Back to reference ' +\n *      (referenceIndex + 1) +\n *      (rereferenceIndex > 1 ? '-' + rereferenceIndex : '')\n *    )\n *   }\n *   ```\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is used in the `ariaLabel` property on each backreference\n *   (the `↩` links).\n *   It affects users of assistive technology.\n * @property {string | null | undefined} [footnoteLabel='Footnotes']\n *   Textual label to use for the footnotes section (default: `'Footnotes'`).\n *\n *   Change it when the markdown is not in English.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {HastProperties | null | undefined} [footnoteLabelProperties={className: ['sr-only']}]\n *   Properties to use on the footnote label (default: `{className:\n *   ['sr-only']}`).\n *\n *   Change it to show the label and add other properties.\n *\n *   This label is typically hidden visually (assuming an `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass an empty string.\n *   You can also add different properties.\n *\n *   > **Note**: `id: 'footnote-label'` is always added, because footnote\n *   > calls use it with `aria-describedby` to provide an accessible label.\n * @property {string | null | undefined} [footnoteLabelTagName='h2']\n *   HTML tag name to use for the footnote label element (default: `'h2'`).\n *\n *   Change it to match your document structure.\n *\n *   This label is typically hidden visually (assuming a `sr-only` CSS class\n *   is defined that does that) and so affects screen readers only.\n *   If you do have such a class, but want to show this section to everyone,\n *   pass different properties with the `footnoteLabelProperties` option.\n * @property {Handlers | null | undefined} [handlers]\n *   Extra handlers for nodes (optional).\n * @property {Array<MdastNodes['type']> | null | undefined} [passThrough]\n *   List of custom mdast node types to pass through (keep) in hast (note that\n *   the node itself is passed, but eventual children are transformed)\n *   (optional).\n * @property {Handler | null | undefined} [unknownHandler]\n *   Handler for all unknown nodes (optional).\n *\n * @typedef State\n *   Info passed around.\n * @property {(node: MdastNodes) => Array<HastElementContent>} all\n *   Transform the children of an mdast parent to hast.\n * @property {<Type extends HastNodes>(from: MdastNodes, to: Type) => HastElement | Type} applyData\n *   Honor the `data` of `from`, and generate an element instead of `node`.\n * @property {Map<string, MdastDefinition>} definitionById\n *   Definitions by their identifier.\n * @property {Map<string, MdastFootnoteDefinition>} footnoteById\n *   Footnote definitions by their identifier.\n * @property {Map<string, number>} footnoteCounts\n *   Counts for how often the same footnote was called.\n * @property {Array<string>} footnoteOrder\n *   Identifiers of order when footnote calls first appear in tree order.\n * @property {Handlers} handlers\n *   Applied handlers.\n * @property {(node: MdastNodes, parent: MdastParents | undefined) => Array<HastElementContent> | HastElementContent | undefined} one\n *   Transform an mdast node to hast.\n * @property {Options} options\n *   Configuration.\n * @property {(from: MdastNodes, node: HastNodes) => undefined} patch\n *   Copy a node’s positional info.\n * @property {<Type extends HastRootContent>(nodes: Array<Type>, loose?: boolean | undefined) => Array<HastText | Type>} wrap\n *   Wrap `nodes` with line endings between each node, adds initial/final line endings when `loose`.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {visit} from 'unist-util-visit'\nimport {position} from 'unist-util-position'\nimport {handlers as defaultHandlers} from './handlers/index.js'\n\nconst own = {}.hasOwnProperty\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Create `state` from an mdast tree.\n *\n * @param {MdastNodes} tree\n *   mdast node to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {State}\n *   `state` function.\n */\nexport function createState(tree, options) {\n  const settings = options || emptyOptions\n  /** @type {Map<string, MdastDefinition>} */\n  const definitionById = new Map()\n  /** @type {Map<string, MdastFootnoteDefinition>} */\n  const footnoteById = new Map()\n  /** @type {Map<string, number>} */\n  const footnoteCounts = new Map()\n  /** @type {Handlers} */\n  // @ts-expect-error: the root handler returns a root.\n  // Hard to type.\n  const handlers = {...defaultHandlers, ...settings.handlers}\n\n  /** @type {State} */\n  const state = {\n    all,\n    applyData,\n    definitionById,\n    footnoteById,\n    footnoteCounts,\n    footnoteOrder: [],\n    handlers,\n    one,\n    options: settings,\n    patch,\n    wrap\n  }\n\n  visit(tree, function (node) {\n    if (node.type === 'definition' || node.type === 'footnoteDefinition') {\n      const map = node.type === 'definition' ? definitionById : footnoteById\n      const id = String(node.identifier).toUpperCase()\n\n      // Mimick CM behavior of link definitions.\n      // See: <https://github.com/syntax-tree/mdast-util-definitions/blob/9032189/lib/index.js#L20-L21>.\n      if (!map.has(id)) {\n        // @ts-expect-error: node type matches map.\n        map.set(id, node)\n      }\n    }\n  })\n\n  return state\n\n  /**\n   * Transform an mdast node into a hast node.\n   *\n   * @param {MdastNodes} node\n   *   mdast node.\n   * @param {MdastParents | undefined} [parent]\n   *   Parent of `node`.\n   * @returns {Array<HastElementContent> | HastElementContent | undefined}\n   *   Resulting hast node.\n   */\n  function one(node, parent) {\n    const type = node.type\n    const handle = state.handlers[type]\n\n    if (own.call(state.handlers, type) && handle) {\n      return handle(state, node, parent)\n    }\n\n    if (state.options.passThrough && state.options.passThrough.includes(type)) {\n      if ('children' in node) {\n        const {children, ...shallow} = node\n        const result = structuredClone(shallow)\n        // @ts-expect-error: TS doesn’t understand…\n        result.children = state.all(node)\n        // @ts-expect-error: TS doesn’t understand…\n        return result\n      }\n\n      // @ts-expect-error: it’s custom.\n      return structuredClone(node)\n    }\n\n    const unknown = state.options.unknownHandler || defaultUnknownHandler\n\n    return unknown(state, node, parent)\n  }\n\n  /**\n   * Transform the children of an mdast node into hast nodes.\n   *\n   * @param {MdastNodes} parent\n   *   mdast node to compile\n   * @returns {Array<HastElementContent>}\n   *   Resulting hast nodes.\n   */\n  function all(parent) {\n    /** @type {Array<HastElementContent>} */\n    const values = []\n\n    if ('children' in parent) {\n      const nodes = parent.children\n      let index = -1\n      while (++index < nodes.length) {\n        const result = state.one(nodes[index], parent)\n\n        // To do: see if we van clean this? Can we merge texts?\n        if (result) {\n          if (index && nodes[index - 1].type === 'break') {\n            if (!Array.isArray(result) && result.type === 'text') {\n              result.value = trimMarkdownSpaceStart(result.value)\n            }\n\n            if (!Array.isArray(result) && result.type === 'element') {\n              const head = result.children[0]\n\n              if (head && head.type === 'text') {\n                head.value = trimMarkdownSpaceStart(head.value)\n              }\n            }\n          }\n\n          if (Array.isArray(result)) {\n            values.push(...result)\n          } else {\n            values.push(result)\n          }\n        }\n      }\n    }\n\n    return values\n  }\n}\n\n/**\n * Copy a node’s positional info.\n *\n * @param {MdastNodes} from\n *   mdast node to copy from.\n * @param {HastNodes} to\n *   hast node to copy into.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  if (from.position) to.position = position(from)\n}\n\n/**\n * Honor the `data` of `from` and maybe generate an element instead of `to`.\n *\n * @template {HastNodes} Type\n *   Node type.\n * @param {MdastNodes} from\n *   mdast node to use data from.\n * @param {Type} to\n *   hast node to change.\n * @returns {HastElement | Type}\n *   Nothing.\n */\nfunction applyData(from, to) {\n  /** @type {HastElement | Type} */\n  let result = to\n\n  // Handle `data.hName`, `data.hProperties, `data.hChildren`.\n  if (from && from.data) {\n    const hName = from.data.hName\n    const hChildren = from.data.hChildren\n    const hProperties = from.data.hProperties\n\n    if (typeof hName === 'string') {\n      // Transforming the node resulted in an element with a different name\n      // than wanted:\n      if (result.type === 'element') {\n        result.tagName = hName\n      }\n      // Transforming the node resulted in a non-element, which happens for\n      // raw, text, and root nodes (unless custom handlers are passed).\n      // The intent of `hName` is to create an element, but likely also to keep\n      // the content around (otherwise: pass `hChildren`).\n      else {\n        /** @type {Array<HastElementContent>} */\n        // @ts-expect-error: assume no doctypes in `root`.\n        const children = 'children' in result ? result.children : [result]\n        result = {type: 'element', tagName: hName, properties: {}, children}\n      }\n    }\n\n    if (result.type === 'element' && hProperties) {\n      Object.assign(result.properties, structuredClone(hProperties))\n    }\n\n    if (\n      'children' in result &&\n      result.children &&\n      hChildren !== null &&\n      hChildren !== undefined\n    ) {\n      result.children = hChildren\n    }\n  }\n\n  return result\n}\n\n/**\n * Transform an unknown node.\n *\n * @param {State} state\n *   Info passed around.\n * @param {MdastNodes} node\n *   Unknown mdast node.\n * @returns {HastElement | HastText}\n *   Resulting hast node.\n */\nfunction defaultUnknownHandler(state, node) {\n  const data = node.data || {}\n  /** @type {HastElement | HastText} */\n  const result =\n    'value' in node &&\n    !(own.call(data, 'hProperties') || own.call(data, 'hChildren'))\n      ? {type: 'text', value: node.value}\n      : {\n          type: 'element',\n          tagName: 'div',\n          properties: {},\n          children: state.all(node)\n        }\n\n  state.patch(node, result)\n  return state.applyData(node, result)\n}\n\n/**\n * Wrap `nodes` with line endings between each node.\n *\n * @template {HastRootContent} Type\n *   Node type.\n * @param {Array<Type>} nodes\n *   List of nodes to wrap.\n * @param {boolean | undefined} [loose=false]\n *   Whether to add line endings at start and end (default: `false`).\n * @returns {Array<HastText | Type>}\n *   Wrapped nodes.\n */\nexport function wrap(nodes, loose) {\n  /** @type {Array<HastText | Type>} */\n  const result = []\n  let index = -1\n\n  if (loose) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  while (++index < nodes.length) {\n    if (index) result.push({type: 'text', value: '\\n'})\n    result.push(nodes[index])\n  }\n\n  if (loose && nodes.length > 0) {\n    result.push({type: 'text', value: '\\n'})\n  }\n\n  return result\n}\n\n/**\n * Trim spaces and tabs at the start of `value`.\n *\n * @param {string} value\n *   Value to trim.\n * @returns {string}\n *   Result.\n */\nfunction trimMarkdownSpaceStart(value) {\n  let index = 0\n  let code = value.charCodeAt(index)\n\n  while (code === 9 || code === 32) {\n    index++\n    code = value.charCodeAt(index)\n  }\n\n  return value.slice(index)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Nodes} HastNodes\n * @typedef {import('mdast').Nodes} MdastNodes\n * @typedef {import('./state.js').Options} Options\n */\n\nimport {ok as assert} from 'devlop'\nimport {footer} from './footer.js'\nimport {createState} from './state.js'\n\n/**\n * Transform mdast to hast.\n *\n * ##### Notes\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most utilities ignore `raw` nodes but two notable ones don’t:\n *\n * *   `hast-util-to-html` also has an option `allowDangerousHtml` which will\n *     output the raw HTML.\n *     This is typically discouraged as noted by the option name but is useful\n *     if you completely trust authors\n * *   `hast-util-raw` can handle the raw embedded HTML strings by parsing them\n *     into standard hast nodes (`element`, `text`, etc).\n *     This is a heavy task as it needs a full HTML parser, but it is the only\n *     way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark, which we follow by default.\n * They are supported by GitHub, so footnotes can be enabled in markdown with\n * `mdast-util-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes, which is hidden for sighted users but shown to\n * assistive technology.\n * When your page is not in English, you must define translated values.\n *\n * Back references use ARIA attributes, but the section label itself uses a\n * heading that is hidden with an `sr-only` class.\n * To show it to sighted users, define different attributes in\n * `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem, as it links footnote calls to footnote\n * definitions on the page through `id` attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * Example: headings (DOM clobbering) in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * *   when the node has a `value` (and doesn’t have `data.hName`,\n *     `data.hProperties`, or `data.hChildren`, see later), create a hast `text`\n *     node\n * *   otherwise, create a `<div>` element (which could be changed with\n *     `data.hName`), with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @param {MdastNodes} tree\n *   mdast tree.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {HastNodes}\n *   hast tree.\n */\nexport function toHast(tree, options) {\n  const state = createState(tree, options)\n  const node = state.one(tree, undefined)\n  const foot = footer(state)\n  /** @type {HastNodes} */\n  const result = Array.isArray(node)\n    ? {type: 'root', children: node}\n    : node || {type: 'root', children: []}\n\n  if (foot) {\n    // If there’s a footer, there were definitions, meaning block\n    // content.\n    // So `result` is a parent node.\n    assert('children' in result)\n    result.children.push({type: 'text', value: '\\n'}, foot)\n  }\n\n  return result\n}\n","/**\n * @import {Root as HastRoot} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {Options as ToHastOptions} from 'mdast-util-to-hast'\n * @import {Processor} from 'unified'\n * @import {VFile} from 'vfile'\n */\n\n/**\n * @typedef {Omit<ToHastOptions, 'file'>} Options\n *\n * @callback TransformBridge\n *   Bridge-mode.\n *\n *   Runs the destination with the new hast tree.\n *   Discards result.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {Promise<undefined>}\n *   Nothing.\n *\n * @callback TransformMutate\n *  Mutate-mode.\n *\n *  Further transformers run on the hast tree.\n * @param {MdastRoot} tree\n *   Tree.\n * @param {VFile} file\n *   File.\n * @returns {HastRoot}\n *   Tree (hast).\n */\n\nimport {toHast} from 'mdast-util-to-hast'\n\n/**\n * Turn markdown into HTML.\n *\n * ##### Notes\n *\n * ###### Signature\n *\n * * if a processor is given,\n *   runs the (rehype) plugins used on it with a hast tree,\n *   then discards the result (*bridge mode*)\n * * otherwise,\n *   returns a hast tree,\n *   the plugins used after `remarkRehype` are rehype plugins (*mutate mode*)\n *\n * > 👉 **Note**:\n * > It’s highly unlikely that you want to pass a `processor`.\n *\n * ###### HTML\n *\n * Raw HTML is available in mdast as `html` nodes and can be embedded in hast\n * as semistandard `raw` nodes.\n * Most plugins ignore `raw` nodes but two notable ones don’t:\n *\n * * `rehype-stringify` also has an option `allowDangerousHtml` which will\n *   output the raw HTML.\n *   This is typically discouraged as noted by the option name but is useful if\n *   you completely trust authors\n * * `rehype-raw` can handle the raw embedded HTML strings by parsing them\n *   into standard hast nodes (`element`, `text`, etc);\n *   this is a heavy task as it needs a full HTML parser,\n *   but it is the only way to support untrusted content\n *\n * ###### Footnotes\n *\n * Many options supported here relate to footnotes.\n * Footnotes are not specified by CommonMark,\n * which we follow by default.\n * They are supported by GitHub,\n * so footnotes can be enabled in markdown with `remark-gfm`.\n *\n * The options `footnoteBackLabel` and `footnoteLabel` define natural language\n * that explains footnotes,\n * which is hidden for sighted users but shown to assistive technology.\n * When your page is not in English,\n * you must define translated values.\n *\n * Back references use ARIA attributes,\n * but the section label itself uses a heading that is hidden with an\n * `sr-only` class.\n * To show it to sighted users,\n * define different attributes in `footnoteLabelProperties`.\n *\n * ###### Clobbering\n *\n * Footnotes introduces a problem,\n * as it links footnote calls to footnote definitions on the page through `id`\n * attributes generated from user content,\n * which results in DOM clobbering.\n *\n * DOM clobbering is this:\n *\n * ```html\n * <p id=x></p>\n * <script>alert(x) // `x` now refers to the DOM `p#x` element</script>\n * ```\n *\n * Elements by their ID are made available by browsers on the `window` object,\n * which is a security risk.\n * Using a prefix solves this problem.\n *\n * More information on how to handle clobbering and the prefix is explained in\n * *Example: headings (DOM clobbering)* in `rehype-sanitize`.\n *\n * ###### Unknown nodes\n *\n * Unknown nodes are nodes with a type that isn’t in `handlers` or `passThrough`.\n * The default behavior for unknown nodes is:\n *\n * * when the node has a `value`\n *   (and doesn’t have `data.hName`, `data.hProperties`, or `data.hChildren`,\n *   see later),\n *   create a hast `text` node\n * * otherwise,\n *   create a `<div>` element (which could be changed with `data.hName`),\n *   with its children mapped from mdast to hast as well\n *\n * This behavior can be changed by passing an `unknownHandler`.\n *\n * @overload\n * @param {Processor} processor\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge}\n *\n * @overload\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformMutate}\n *\n * @overload\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n * @param {Readonly<Options> | null | undefined} [options]\n * @returns {TransformBridge | TransformMutate}\n *\n * @param {Readonly<Options> | Processor | null | undefined} [destination]\n *   Processor or configuration (optional).\n * @param {Readonly<Options> | null | undefined} [options]\n *   When a processor was given,\n *   configuration (optional).\n * @returns {TransformBridge | TransformMutate}\n *   Transform.\n */\nexport default function remarkRehype(destination, options) {\n  if (destination && 'run' in destination) {\n    /**\n     * @type {TransformBridge}\n     */\n    return async function (tree, file) {\n      // Cast because root in -> root out.\n      const hastTree = /** @type {HastRoot} */ (\n        toHast(tree, {file, ...options})\n      )\n      await destination.run(hastTree, file)\n    }\n  }\n\n  /**\n   * @type {TransformMutate}\n   */\n  return function (tree, file) {\n    // Cast because root in -> root out.\n    // To do: in the future, disallow ` || options` fallback.\n    // With `unified-engine`, `destination` can be `undefined` but\n    // `options` will be the file set.\n    // We should not pass that as `options`.\n    return /** @type {HastRoot} */ (\n      toHast(tree, {file, ...(destination || options)})\n    )\n  }\n}\n","/**\n * Throw a given error.\n *\n * @param {Error|null|undefined} [error]\n *   Maybe error.\n * @returns {asserts error is null|undefined}\n */\nexport function bail(error) {\n  if (error) {\n    throw error\n  }\n}\n","export default function isPlainObject(value) {\n\tif (typeof value !== 'object' || value === null) {\n\t\treturn false;\n\t}\n\n\tconst prototype = Object.getPrototypeOf(value);\n\treturn (prototype === null || prototype === Object.prototype || Object.getPrototypeOf(prototype) === null) && !(Symbol.toStringTag in value) && !(Symbol.iterator in value);\n}\n","// To do: remove `void`s\n// To do: remove `null` from output of our APIs, allow it as user APIs.\n\n/**\n * @typedef {(error?: Error | null | undefined, ...output: Array<any>) => void} Callback\n *   Callback.\n *\n * @typedef {(...input: Array<any>) => any} Middleware\n *   Ware.\n *\n * @typedef Pipeline\n *   Pipeline.\n * @property {Run} run\n *   Run the pipeline.\n * @property {Use} use\n *   Add middleware.\n *\n * @typedef {(...input: Array<any>) => void} Run\n *   Call all middleware.\n *\n *   Calls `done` on completion with either an error or the output of the\n *   last middleware.\n *\n *   > 👉 **Note**: as the length of input defines whether async functions get a\n *   > `next` function,\n *   > it’s recommended to keep `input` at one value normally.\n\n *\n * @typedef {(fn: Middleware) => Pipeline} Use\n *   Add middleware.\n */\n\n/**\n * Create new middleware.\n *\n * @returns {Pipeline}\n *   Pipeline.\n */\nexport function trough() {\n  /** @type {Array<Middleware>} */\n  const fns = []\n  /** @type {Pipeline} */\n  const pipeline = {run, use}\n\n  return pipeline\n\n  /** @type {Run} */\n  function run(...values) {\n    let middlewareIndex = -1\n    /** @type {Callback} */\n    const callback = values.pop()\n\n    if (typeof callback !== 'function') {\n      throw new TypeError('Expected function as last argument, not ' + callback)\n    }\n\n    next(null, ...values)\n\n    /**\n     * Run the next `fn`, or we’re done.\n     *\n     * @param {Error | null | undefined} error\n     * @param {Array<any>} output\n     */\n    function next(error, ...output) {\n      const fn = fns[++middlewareIndex]\n      let index = -1\n\n      if (error) {\n        callback(error)\n        return\n      }\n\n      // Copy non-nullish input into values.\n      while (++index < values.length) {\n        if (output[index] === null || output[index] === undefined) {\n          output[index] = values[index]\n        }\n      }\n\n      // Save the newly created `output` for the next call.\n      values = output\n\n      // Next or done.\n      if (fn) {\n        wrap(fn, next)(...output)\n      } else {\n        callback(null, ...output)\n      }\n    }\n  }\n\n  /** @type {Use} */\n  function use(middelware) {\n    if (typeof middelware !== 'function') {\n      throw new TypeError(\n        'Expected `middelware` to be a function, not ' + middelware\n      )\n    }\n\n    fns.push(middelware)\n    return pipeline\n  }\n}\n\n/**\n * Wrap `middleware` into a uniform interface.\n *\n * You can pass all input to the resulting function.\n * `callback` is then called with the output of `middleware`.\n *\n * If `middleware` accepts more arguments than the later given in input,\n * an extra `done` function is passed to it after that input,\n * which must be called by `middleware`.\n *\n * The first value in `input` is the main input value.\n * All other input values are the rest input values.\n * The values given to `callback` are the input values,\n * merged with every non-nullish output value.\n *\n * * if `middleware` throws an error,\n *   returns a promise that is rejected,\n *   or calls the given `done` function with an error,\n *   `callback` is called with that error\n * * if `middleware` returns a value or returns a promise that is resolved,\n *   that value is the main output value\n * * if `middleware` calls `done`,\n *   all non-nullish values except for the first one (the error) overwrite the\n *   output values\n *\n * @param {Middleware} middleware\n *   Function to wrap.\n * @param {Callback} callback\n *   Callback called with the output of `middleware`.\n * @returns {Run}\n *   Wrapped middleware.\n */\nexport function wrap(middleware, callback) {\n  /** @type {boolean} */\n  let called\n\n  return wrapped\n\n  /**\n   * Call `middleware`.\n   * @this {any}\n   * @param {Array<any>} parameters\n   * @returns {void}\n   */\n  function wrapped(...parameters) {\n    const fnExpectsCallback = middleware.length > parameters.length\n    /** @type {any} */\n    let result\n\n    if (fnExpectsCallback) {\n      parameters.push(done)\n    }\n\n    try {\n      result = middleware.apply(this, parameters)\n    } catch (error) {\n      const exception = /** @type {Error} */ (error)\n\n      // Well, this is quite the pickle.\n      // `middleware` received a callback and called it synchronously, but that\n      // threw an error.\n      // The only thing left to do is to throw the thing instead.\n      if (fnExpectsCallback && called) {\n        throw exception\n      }\n\n      return done(exception)\n    }\n\n    if (!fnExpectsCallback) {\n      if (result && result.then && typeof result.then === 'function') {\n        result.then(then, done)\n      } else if (result instanceof Error) {\n        done(result)\n      } else {\n        then(result)\n      }\n    }\n  }\n\n  /**\n   * Call `callback`, only once.\n   *\n   * @type {Callback}\n   */\n  function done(error, ...output) {\n    if (!called) {\n      called = true\n      callback(error, ...output)\n    }\n  }\n\n  /**\n   * Call `done` with one value.\n   *\n   * @param {any} [value]\n   */\n  function then(value) {\n    done(null, value)\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n */\n\n/**\n * Serialize the positional info of a point, position (start and end points),\n * or node.\n *\n * @param {Node | NodeLike | Point | PointLike | Position | PositionLike | null | undefined} [value]\n *   Node, position, or point.\n * @returns {string}\n *   Pretty printed positional info of a node (`string`).\n *\n *   In the format of a range `ls:cs-le:ce` (when given `node` or `position`)\n *   or a point `l:c` (when given `point`), where `l` stands for line, `c` for\n *   column, `s` for `start`, and `e` for end.\n *   An empty string (`''`) is returned if the given value is neither `node`,\n *   `position`, nor `point`.\n */\nexport function stringifyPosition(value) {\n  // Nothing.\n  if (!value || typeof value !== 'object') {\n    return ''\n  }\n\n  // Node.\n  if ('position' in value || 'type' in value) {\n    return position(value.position)\n  }\n\n  // Position.\n  if ('start' in value || 'end' in value) {\n    return position(value)\n  }\n\n  // Point.\n  if ('line' in value || 'column' in value) {\n    return point(value)\n  }\n\n  // ?\n  return ''\n}\n\n/**\n * @param {Point | PointLike | null | undefined} point\n * @returns {string}\n */\nfunction point(point) {\n  return index(point && point.line) + ':' + index(point && point.column)\n}\n\n/**\n * @param {Position | PositionLike | null | undefined} pos\n * @returns {string}\n */\nfunction position(pos) {\n  return point(pos && pos.start) + '-' + point(pos && pos.end)\n}\n\n/**\n * @param {number | null | undefined} value\n * @returns {number}\n */\nfunction index(value) {\n  return value && typeof value === 'number' ? value : 1\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n *\n * @typedef Options\n *   Configuration.\n * @property {Array<Node> | null | undefined} [ancestors]\n *   Stack of (inclusive) ancestor nodes surrounding the message (optional).\n * @property {Error | null | undefined} [cause]\n *   Original error cause of the message (optional).\n * @property {Point | Position | null | undefined} [place]\n *   Place of message (optional).\n * @property {string | null | undefined} [ruleId]\n *   Category of message (optional, example: `'my-rule'`).\n * @property {string | null | undefined} [source]\n *   Namespace of who sent the message (optional, example: `'my-package'`).\n */\n\nimport {stringifyPosition} from 'unist-util-stringify-position'\n\n/**\n * Message.\n */\nexport class VFileMessage extends Error {\n  /**\n   * Create a message for `reason`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Options | null | undefined} [options]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | Options | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns\n   *   Instance of `VFileMessage`.\n   */\n  // eslint-disable-next-line complexity\n  constructor(causeOrReason, optionsOrParentOrPlace, origin) {\n    super()\n\n    if (typeof optionsOrParentOrPlace === 'string') {\n      origin = optionsOrParentOrPlace\n      optionsOrParentOrPlace = undefined\n    }\n\n    /** @type {string} */\n    let reason = ''\n    /** @type {Options} */\n    let options = {}\n    let legacyCause = false\n\n    if (optionsOrParentOrPlace) {\n      // Point.\n      if (\n        'line' in optionsOrParentOrPlace &&\n        'column' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Position.\n      else if (\n        'start' in optionsOrParentOrPlace &&\n        'end' in optionsOrParentOrPlace\n      ) {\n        options = {place: optionsOrParentOrPlace}\n      }\n      // Node.\n      else if ('type' in optionsOrParentOrPlace) {\n        options = {\n          ancestors: [optionsOrParentOrPlace],\n          place: optionsOrParentOrPlace.position\n        }\n      }\n      // Options.\n      else {\n        options = {...optionsOrParentOrPlace}\n      }\n    }\n\n    if (typeof causeOrReason === 'string') {\n      reason = causeOrReason\n    }\n    // Error.\n    else if (!options.cause && causeOrReason) {\n      legacyCause = true\n      reason = causeOrReason.message\n      options.cause = causeOrReason\n    }\n\n    if (!options.ruleId && !options.source && typeof origin === 'string') {\n      const index = origin.indexOf(':')\n\n      if (index === -1) {\n        options.ruleId = origin\n      } else {\n        options.source = origin.slice(0, index)\n        options.ruleId = origin.slice(index + 1)\n      }\n    }\n\n    if (!options.place && options.ancestors && options.ancestors) {\n      const parent = options.ancestors[options.ancestors.length - 1]\n\n      if (parent) {\n        options.place = parent.position\n      }\n    }\n\n    const start =\n      options.place && 'start' in options.place\n        ? options.place.start\n        : options.place\n\n    /**\n     * Stack of ancestor nodes surrounding the message.\n     *\n     * @type {Array<Node> | undefined}\n     */\n    this.ancestors = options.ancestors || undefined\n\n    /**\n     * Original error cause of the message.\n     *\n     * @type {Error | undefined}\n     */\n    this.cause = options.cause || undefined\n\n    /**\n     * Starting column of message.\n     *\n     * @type {number | undefined}\n     */\n    this.column = start ? start.column : undefined\n\n    /**\n     * State of problem.\n     *\n     * * `true` — error, file not usable\n     * * `false` — warning, change may be needed\n     * * `undefined` — change likely not needed\n     *\n     * @type {boolean | null | undefined}\n     */\n    this.fatal = undefined\n\n    /**\n     * Path of a file (used throughout the `VFile` ecosystem).\n     *\n     * @type {string | undefined}\n     */\n    this.file = ''\n\n    // Field from `Error`.\n    /**\n     * Reason for message.\n     *\n     * @type {string}\n     */\n    this.message = reason\n\n    /**\n     * Starting line of error.\n     *\n     * @type {number | undefined}\n     */\n    this.line = start ? start.line : undefined\n\n    // Field from `Error`.\n    /**\n     * Serialized positional info of message.\n     *\n     * On normal errors, this would be something like `ParseError`, buit in\n     * `VFile` messages we use this space to show where an error happened.\n     */\n    this.name = stringifyPosition(options.place) || '1:1'\n\n    /**\n     * Place of message.\n     *\n     * @type {Point | Position | undefined}\n     */\n    this.place = options.place || undefined\n\n    /**\n     * Reason for message, should use markdown.\n     *\n     * @type {string}\n     */\n    this.reason = this.message\n\n    /**\n     * Category of message (example: `'my-rule'`).\n     *\n     * @type {string | undefined}\n     */\n    this.ruleId = options.ruleId || undefined\n\n    /**\n     * Namespace of message (example: `'my-package'`).\n     *\n     * @type {string | undefined}\n     */\n    this.source = options.source || undefined\n\n    // Field from `Error`.\n    /**\n     * Stack of message.\n     *\n     * This is used by normal errors to show where something happened in\n     * programming code, irrelevant for `VFile` messages,\n     *\n     * @type {string}\n     */\n    this.stack =\n      legacyCause && options.cause && typeof options.cause.stack === 'string'\n        ? options.cause.stack\n        : ''\n\n    // The following fields are “well known”.\n    // Not standard.\n    // Feel free to add other non-standard fields to your messages.\n\n    /**\n     * Specify the source value that’s being reported, which is deemed\n     * incorrect.\n     *\n     * @type {string | undefined}\n     */\n    this.actual = undefined\n\n    /**\n     * Suggest acceptable values that can be used instead of `actual`.\n     *\n     * @type {Array<string> | undefined}\n     */\n    this.expected = undefined\n\n    /**\n     * Long form description of the message (you should use markdown).\n     *\n     * @type {string | undefined}\n     */\n    this.note = undefined\n\n    /**\n     * Link to docs for the message.\n     *\n     * > 👉 **Note**: this must be an absolute URL that can be passed as `x`\n     * > to `new URL(x)`.\n     *\n     * @type {string | undefined}\n     */\n    this.url = undefined\n  }\n}\n\nVFileMessage.prototype.file = ''\nVFileMessage.prototype.name = ''\nVFileMessage.prototype.reason = ''\nVFileMessage.prototype.message = ''\nVFileMessage.prototype.stack = ''\nVFileMessage.prototype.column = undefined\nVFileMessage.prototype.line = undefined\nVFileMessage.prototype.ancestors = undefined\nVFileMessage.prototype.cause = undefined\nVFileMessage.prototype.fatal = undefined\nVFileMessage.prototype.place = undefined\nVFileMessage.prototype.ruleId = undefined\nVFileMessage.prototype.source = undefined\n","// A derivative work based on:\n// <https://github.com/browserify/path-browserify>.\n// Which is licensed:\n//\n// MIT License\n//\n// Copyright (c) 2013 James Halliday\n//\n// Permission is hereby granted, free of charge, to any person obtaining a copy of\n// this software and associated documentation files (the \"Software\"), to deal in\n// the Software without restriction, including without limitation the rights to\n// use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\n// the Software, and to permit persons to whom the Software is furnished to do so,\n// subject to the following conditions:\n//\n// The above copyright notice and this permission notice shall be included in all\n// copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\n// FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\n// COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\n// IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\n// CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n// A derivative work based on:\n//\n// Parts of that are extracted from Node’s internal `path` module:\n// <https://github.com/nodejs/node/blob/master/lib/path.js>.\n// Which is licensed:\n//\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nexport const minpath = {basename, dirname, extname, join, sep: '/'}\n\n/* eslint-disable max-depth, complexity */\n\n/**\n * Get the basename from a path.\n *\n * @param {string} path\n *   File path.\n * @param {string | null | undefined} [extname]\n *   Extension to strip.\n * @returns {string}\n *   Stem or basename.\n */\nfunction basename(path, extname) {\n  if (extname !== undefined && typeof extname !== 'string') {\n    throw new TypeError('\"ext\" argument must be a string')\n  }\n\n  assertPath(path)\n  let start = 0\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let seenNonSlash\n\n  if (\n    extname === undefined ||\n    extname.length === 0 ||\n    extname.length > path.length\n  ) {\n    while (index--) {\n      if (path.codePointAt(index) === 47 /* `/` */) {\n        // If we reached a path separator that was not part of a set of path\n        // separators at the end of the string, stop now.\n        if (seenNonSlash) {\n          start = index + 1\n          break\n        }\n      } else if (end < 0) {\n        // We saw the first non-path separator, mark this as the end of our\n        // path component.\n        seenNonSlash = true\n        end = index + 1\n      }\n    }\n\n    return end < 0 ? '' : path.slice(start, end)\n  }\n\n  if (extname === path) {\n    return ''\n  }\n\n  let firstNonSlashEnd = -1\n  let extnameIndex = extname.length - 1\n\n  while (index--) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (seenNonSlash) {\n        start = index + 1\n        break\n      }\n    } else {\n      if (firstNonSlashEnd < 0) {\n        // We saw the first non-path separator, remember this index in case\n        // we need it if the extension ends up not matching.\n        seenNonSlash = true\n        firstNonSlashEnd = index + 1\n      }\n\n      if (extnameIndex > -1) {\n        // Try to match the explicit extension.\n        if (path.codePointAt(index) === extname.codePointAt(extnameIndex--)) {\n          if (extnameIndex < 0) {\n            // We matched the extension, so mark this as the end of our path\n            // component\n            end = index\n          }\n        } else {\n          // Extension does not match, so our result is the entire path\n          // component\n          extnameIndex = -1\n          end = firstNonSlashEnd\n        }\n      }\n    }\n  }\n\n  if (start === end) {\n    end = firstNonSlashEnd\n  } else if (end < 0) {\n    end = path.length\n  }\n\n  return path.slice(start, end)\n}\n\n/**\n * Get the dirname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\nfunction dirname(path) {\n  assertPath(path)\n\n  if (path.length === 0) {\n    return '.'\n  }\n\n  let end = -1\n  let index = path.length\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  // Prefix `--` is important to not run on `0`.\n  while (--index) {\n    if (path.codePointAt(index) === 47 /* `/` */) {\n      if (unmatchedSlash) {\n        end = index\n        break\n      }\n    } else if (!unmatchedSlash) {\n      // We saw the first non-path separator\n      unmatchedSlash = true\n    }\n  }\n\n  return end < 0\n    ? path.codePointAt(0) === 47 /* `/` */\n      ? '/'\n      : '.'\n    : end === 1 && path.codePointAt(0) === 47 /* `/` */\n      ? '//'\n      : path.slice(0, end)\n}\n\n/**\n * Get an extname from a path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   Extname.\n */\nfunction extname(path) {\n  assertPath(path)\n\n  let index = path.length\n\n  let end = -1\n  let startPart = 0\n  let startDot = -1\n  // Track the state of characters (if any) we see before our first dot and\n  // after any path separator we find.\n  let preDotState = 0\n  /** @type {boolean | undefined} */\n  let unmatchedSlash\n\n  while (index--) {\n    const code = path.codePointAt(index)\n\n    if (code === 47 /* `/` */) {\n      // If we reached a path separator that was not part of a set of path\n      // separators at the end of the string, stop now.\n      if (unmatchedSlash) {\n        startPart = index + 1\n        break\n      }\n\n      continue\n    }\n\n    if (end < 0) {\n      // We saw the first non-path separator, mark this as the end of our\n      // extension.\n      unmatchedSlash = true\n      end = index + 1\n    }\n\n    if (code === 46 /* `.` */) {\n      // If this is our first dot, mark it as the start of our extension.\n      if (startDot < 0) {\n        startDot = index\n      } else if (preDotState !== 1) {\n        preDotState = 1\n      }\n    } else if (startDot > -1) {\n      // We saw a non-dot and non-path separator before our dot, so we should\n      // have a good chance at having a non-empty extension.\n      preDotState = -1\n    }\n  }\n\n  if (\n    startDot < 0 ||\n    end < 0 ||\n    // We saw a non-dot character immediately before the dot.\n    preDotState === 0 ||\n    // The (right-most) trimmed path component is exactly `..`.\n    (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)\n  ) {\n    return ''\n  }\n\n  return path.slice(startDot, end)\n}\n\n/**\n * Join segments from a path.\n *\n * @param {Array<string>} segments\n *   Path segments.\n * @returns {string}\n *   File path.\n */\nfunction join(...segments) {\n  let index = -1\n  /** @type {string | undefined} */\n  let joined\n\n  while (++index < segments.length) {\n    assertPath(segments[index])\n\n    if (segments[index]) {\n      joined =\n        joined === undefined ? segments[index] : joined + '/' + segments[index]\n    }\n  }\n\n  return joined === undefined ? '.' : normalize(joined)\n}\n\n/**\n * Normalize a basic file path.\n *\n * @param {string} path\n *   File path.\n * @returns {string}\n *   File path.\n */\n// Note: `normalize` is not exposed as `path.normalize`, so some code is\n// manually removed from it.\nfunction normalize(path) {\n  assertPath(path)\n\n  const absolute = path.codePointAt(0) === 47 /* `/` */\n\n  // Normalize the path according to POSIX rules.\n  let value = normalizeString(path, !absolute)\n\n  if (value.length === 0 && !absolute) {\n    value = '.'\n  }\n\n  if (value.length > 0 && path.codePointAt(path.length - 1) === 47 /* / */) {\n    value += '/'\n  }\n\n  return absolute ? '/' + value : value\n}\n\n/**\n * Resolve `.` and `..` elements in a path with directory names.\n *\n * @param {string} path\n *   File path.\n * @param {boolean} allowAboveRoot\n *   Whether `..` can move above root.\n * @returns {string}\n *   File path.\n */\nfunction normalizeString(path, allowAboveRoot) {\n  let result = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let index = -1\n  /** @type {number | undefined} */\n  let code\n  /** @type {number} */\n  let lastSlashIndex\n\n  while (++index <= path.length) {\n    if (index < path.length) {\n      code = path.codePointAt(index)\n    } else if (code === 47 /* `/` */) {\n      break\n    } else {\n      code = 47 /* `/` */\n    }\n\n    if (code === 47 /* `/` */) {\n      if (lastSlash === index - 1 || dots === 1) {\n        // Empty.\n      } else if (lastSlash !== index - 1 && dots === 2) {\n        if (\n          result.length < 2 ||\n          lastSegmentLength !== 2 ||\n          result.codePointAt(result.length - 1) !== 46 /* `.` */ ||\n          result.codePointAt(result.length - 2) !== 46 /* `.` */\n        ) {\n          if (result.length > 2) {\n            lastSlashIndex = result.lastIndexOf('/')\n\n            if (lastSlashIndex !== result.length - 1) {\n              if (lastSlashIndex < 0) {\n                result = ''\n                lastSegmentLength = 0\n              } else {\n                result = result.slice(0, lastSlashIndex)\n                lastSegmentLength = result.length - 1 - result.lastIndexOf('/')\n              }\n\n              lastSlash = index\n              dots = 0\n              continue\n            }\n          } else if (result.length > 0) {\n            result = ''\n            lastSegmentLength = 0\n            lastSlash = index\n            dots = 0\n            continue\n          }\n        }\n\n        if (allowAboveRoot) {\n          result = result.length > 0 ? result + '/..' : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (result.length > 0) {\n          result += '/' + path.slice(lastSlash + 1, index)\n        } else {\n          result = path.slice(lastSlash + 1, index)\n        }\n\n        lastSegmentLength = index - lastSlash - 1\n      }\n\n      lastSlash = index\n      dots = 0\n    } else if (code === 46 /* `.` */ && dots > -1) {\n      dots++\n    } else {\n      dots = -1\n    }\n  }\n\n  return result\n}\n\n/**\n * Make sure `path` is a string.\n *\n * @param {string} path\n *   File path.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path) {\n  if (typeof path !== 'string') {\n    throw new TypeError(\n      'Path must be a string. Received ' + JSON.stringify(path)\n    )\n  }\n}\n\n/* eslint-enable max-depth, complexity */\n","// Somewhat based on:\n// <https://github.com/defunctzombie/node-process/blob/master/browser.js>.\n// But I don’t think one tiny line of code can be copyrighted. 😅\nexport const minproc = {cwd}\n\nfunction cwd() {\n  return '/'\n}\n","/**\n * Checks if a value has the shape of a WHATWG URL object.\n *\n * Using a symbol or instanceof would not be able to recognize URL objects\n * coming from other implementations (e.g. in Electron), so instead we are\n * checking some well known properties for a lack of a better test.\n *\n * We use `href` and `protocol` as they are the only properties that are\n * easy to retrieve and calculate due to the lazy nature of the getters.\n *\n * We check for auth attribute to distinguish legacy url instance with\n * WHATWG URL instance.\n *\n * @param {unknown} fileUrlOrPath\n *   File path or URL.\n * @returns {fileUrlOrPath is URL}\n *   Whether it’s a URL.\n */\n// From: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js#L720>\nexport function isUrl(fileUrlOrPath) {\n  return Boolean(\n    fileUrlOrPath !== null &&\n      typeof fileUrlOrPath === 'object' &&\n      'href' in fileUrlOrPath &&\n      fileUrlOrPath.href &&\n      'protocol' in fileUrlOrPath &&\n      fileUrlOrPath.protocol &&\n      // @ts-expect-error: indexing is fine.\n      fileUrlOrPath.auth === undefined\n  )\n}\n","import {isUrl} from './minurl.shared.js'\n\nexport {isUrl} from './minurl.shared.js'\n\n// See: <https://github.com/nodejs/node/blob/6a3403c/lib/internal/url.js>\n\n/**\n * @param {URL | string} path\n *   File URL.\n * @returns {string}\n *   File URL.\n */\nexport function urlToPath(path) {\n  if (typeof path === 'string') {\n    path = new URL(path)\n  } else if (!isUrl(path)) {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'The \"path\" argument must be of type string or an instance of URL. Received `' +\n        path +\n        '`'\n    )\n    error.code = 'ERR_INVALID_ARG_TYPE'\n    throw error\n  }\n\n  if (path.protocol !== 'file:') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError('The URL must be of scheme file')\n    error.code = 'ERR_INVALID_URL_SCHEME'\n    throw error\n  }\n\n  return getPathFromURLPosix(path)\n}\n\n/**\n * Get a path from a POSIX URL.\n *\n * @param {URL} url\n *   URL.\n * @returns {string}\n *   File path.\n */\nfunction getPathFromURLPosix(url) {\n  if (url.hostname !== '') {\n    /** @type {NodeJS.ErrnoException} */\n    const error = new TypeError(\n      'File URL host must be \"localhost\" or empty on darwin'\n    )\n    error.code = 'ERR_INVALID_FILE_URL_HOST'\n    throw error\n  }\n\n  const pathname = url.pathname\n  let index = -1\n\n  while (++index < pathname.length) {\n    if (\n      pathname.codePointAt(index) === 37 /* `%` */ &&\n      pathname.codePointAt(index + 1) === 50 /* `2` */\n    ) {\n      const third = pathname.codePointAt(index + 2)\n      if (third === 70 /* `F` */ || third === 102 /* `f` */) {\n        /** @type {NodeJS.ErrnoException} */\n        const error = new TypeError(\n          'File URL path must not include encoded / characters'\n        )\n        error.code = 'ERR_INVALID_FILE_URL_PATH'\n        throw error\n      }\n    }\n  }\n\n  return decodeURIComponent(pathname)\n}\n","/**\n * @import {Node, Point, Position} from 'unist'\n * @import {Options as MessageOptions} from 'vfile-message'\n * @import {Compatible, Data, Map, Options, Value} from 'vfile'\n */\n\n/**\n * @typedef {object & {type: string, position?: Position | undefined}} NodeLike\n */\n\nimport {VFileMessage} from 'vfile-message'\nimport {minpath} from '#minpath'\nimport {minproc} from '#minproc'\nimport {urlToPath, isUrl} from '#minurl'\n\n/**\n * Order of setting (least specific to most), we need this because otherwise\n * `{stem: 'a', path: '~/b.js'}` would throw, as a path is needed before a\n * stem can be set.\n */\nconst order = /** @type {const} */ ([\n  'history',\n  'path',\n  'basename',\n  'stem',\n  'extname',\n  'dirname'\n])\n\nexport class VFile {\n  /**\n   * Create a new virtual file.\n   *\n   * `options` is treated as:\n   *\n   * *   `string` or `Uint8Array` — `{value: options}`\n   * *   `URL` — `{path: options}`\n   * *   `VFile` — shallow copies its data over to the new file\n   * *   `object` — all fields are shallow copied over to the new file\n   *\n   * Path related fields are set in the following order (least specific to\n   * most specific): `history`, `path`, `basename`, `stem`, `extname`,\n   * `dirname`.\n   *\n   * You cannot set `dirname` or `extname` without setting either `history`,\n   * `path`, `basename`, or `stem` too.\n   *\n   * @param {Compatible | null | undefined} [value]\n   *   File value.\n   * @returns\n   *   New instance.\n   */\n  constructor(value) {\n    /** @type {Options | VFile} */\n    let options\n\n    if (!value) {\n      options = {}\n    } else if (isUrl(value)) {\n      options = {path: value}\n    } else if (typeof value === 'string' || isUint8Array(value)) {\n      options = {value}\n    } else {\n      options = value\n    }\n\n    /* eslint-disable no-unused-expressions */\n\n    /**\n     * Base of `path` (default: `process.cwd()` or `'/'` in browsers).\n     *\n     * @type {string}\n     */\n    // Prevent calling `cwd` (which could be expensive) if it’s not needed;\n    // the empty string will be overridden in the next block.\n    this.cwd = 'cwd' in options ? '' : minproc.cwd()\n\n    /**\n     * Place to store custom info (default: `{}`).\n     *\n     * It’s OK to store custom data directly on the file but moving it to\n     * `data` is recommended.\n     *\n     * @type {Data}\n     */\n    this.data = {}\n\n    /**\n     * List of file paths the file moved between.\n     *\n     * The first is the original path and the last is the current path.\n     *\n     * @type {Array<string>}\n     */\n    this.history = []\n\n    /**\n     * List of messages associated with the file.\n     *\n     * @type {Array<VFileMessage>}\n     */\n    this.messages = []\n\n    /**\n     * Raw value.\n     *\n     * @type {Value}\n     */\n    this.value\n\n    // The below are non-standard, they are “well-known”.\n    // As in, used in several tools.\n    /**\n     * Source map.\n     *\n     * This type is equivalent to the `RawSourceMap` type from the `source-map`\n     * module.\n     *\n     * @type {Map | null | undefined}\n     */\n    this.map\n\n    /**\n     * Custom, non-string, compiled, representation.\n     *\n     * This is used by unified to store non-string results.\n     * One example is when turning markdown into React nodes.\n     *\n     * @type {unknown}\n     */\n    this.result\n\n    /**\n     * Whether a file was saved to disk.\n     *\n     * This is used by vfile reporters.\n     *\n     * @type {boolean}\n     */\n    this.stored\n    /* eslint-enable no-unused-expressions */\n\n    // Set path related properties in the correct order.\n    let index = -1\n\n    while (++index < order.length) {\n      const field = order[index]\n\n      // Note: we specifically use `in` instead of `hasOwnProperty` to accept\n      // `vfile`s too.\n      if (\n        field in options &&\n        options[field] !== undefined &&\n        options[field] !== null\n      ) {\n        // @ts-expect-error: TS doesn’t understand basic reality.\n        this[field] = field === 'history' ? [...options[field]] : options[field]\n      }\n    }\n\n    /** @type {string} */\n    let field\n\n    // Set non-path related properties.\n    for (field in options) {\n      // @ts-expect-error: fine to set other things.\n      if (!order.includes(field)) {\n        // @ts-expect-error: fine to set other things.\n        this[field] = options[field]\n      }\n    }\n  }\n\n  /**\n   * Get the basename (including extname) (example: `'index.min.js'`).\n   *\n   * @returns {string | undefined}\n   *   Basename.\n   */\n  get basename() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path)\n      : undefined\n  }\n\n  /**\n   * Set basename (including extname) (`'index.min.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} basename\n   *   Basename.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set basename(basename) {\n    assertNonEmpty(basename, 'basename')\n    assertPart(basename, 'basename')\n    this.path = minpath.join(this.dirname || '', basename)\n  }\n\n  /**\n   * Get the parent path (example: `'~'`).\n   *\n   * @returns {string | undefined}\n   *   Dirname.\n   */\n  get dirname() {\n    return typeof this.path === 'string'\n      ? minpath.dirname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the parent path (example: `'~'`).\n   *\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} dirname\n   *   Dirname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set dirname(dirname) {\n    assertPath(this.basename, 'dirname')\n    this.path = minpath.join(dirname || '', this.basename)\n  }\n\n  /**\n   * Get the extname (including dot) (example: `'.js'`).\n   *\n   * @returns {string | undefined}\n   *   Extname.\n   */\n  get extname() {\n    return typeof this.path === 'string'\n      ? minpath.extname(this.path)\n      : undefined\n  }\n\n  /**\n   * Set the extname (including dot) (example: `'.js'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be set if there’s no `path` yet.\n   *\n   * @param {string | undefined} extname\n   *   Extname.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set extname(extname) {\n    assertPart(extname, 'extname')\n    assertPath(this.dirname, 'extname')\n\n    if (extname) {\n      if (extname.codePointAt(0) !== 46 /* `.` */) {\n        throw new Error('`extname` must start with `.`')\n      }\n\n      if (extname.includes('.', 1)) {\n        throw new Error('`extname` cannot contain multiple dots')\n      }\n    }\n\n    this.path = minpath.join(this.dirname, this.stem + (extname || ''))\n  }\n\n  /**\n   * Get the full path (example: `'~/index.min.js'`).\n   *\n   * @returns {string}\n   *   Path.\n   */\n  get path() {\n    return this.history[this.history.length - 1]\n  }\n\n  /**\n   * Set the full path (example: `'~/index.min.js'`).\n   *\n   * Cannot be nullified.\n   * You can set a file URL (a `URL` object with a `file:` protocol) which will\n   * be turned into a path with `url.fileURLToPath`.\n   *\n   * @param {URL | string} path\n   *   Path.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set path(path) {\n    if (isUrl(path)) {\n      path = urlToPath(path)\n    }\n\n    assertNonEmpty(path, 'path')\n\n    if (this.path !== path) {\n      this.history.push(path)\n    }\n  }\n\n  /**\n   * Get the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * @returns {string | undefined}\n   *   Stem.\n   */\n  get stem() {\n    return typeof this.path === 'string'\n      ? minpath.basename(this.path, this.extname)\n      : undefined\n  }\n\n  /**\n   * Set the stem (basename w/o extname) (example: `'index.min'`).\n   *\n   * Cannot contain path separators (`'/'` on unix, macOS, and browsers, `'\\'`\n   * on windows).\n   * Cannot be nullified (use `file.path = file.dirname` instead).\n   *\n   * @param {string} stem\n   *   Stem.\n   * @returns {undefined}\n   *   Nothing.\n   */\n  set stem(stem) {\n    assertNonEmpty(stem, 'stem')\n    assertPart(stem, 'stem')\n    this.path = minpath.join(this.dirname || '', stem + (this.extname || ''))\n  }\n\n  // Normal prototypal methods.\n  /**\n   * Create a fatal message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `true` (error; file not usable)\n   * and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {never}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {never}\n   *   Never.\n   * @throws {VFileMessage}\n   *   Message.\n   */\n  fail(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = true\n\n    throw message\n  }\n\n  /**\n   * Create an info message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `undefined` (info; change\n   * likely not needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  info(causeOrReason, optionsOrParentOrPlace, origin) {\n    // @ts-expect-error: the overloads are fine.\n    const message = this.message(causeOrReason, optionsOrParentOrPlace, origin)\n\n    message.fatal = undefined\n\n    return message\n  }\n\n  /**\n   * Create a message for `reason` associated with the file.\n   *\n   * The `fatal` field of the message is set to `false` (warning; change may be\n   * needed) and the `file` field is set to the current file path.\n   * The message is added to the `messages` field on `file`.\n   *\n   * > 🪦 **Note**: also has obsolete signatures.\n   *\n   * @overload\n   * @param {string} reason\n   * @param {MessageOptions | null | undefined} [options]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {string} reason\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Node | NodeLike | null | undefined} parent\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {Point | Position | null | undefined} place\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @overload\n   * @param {Error | VFileMessage} cause\n   * @param {string | null | undefined} [origin]\n   * @returns {VFileMessage}\n   *\n   * @param {Error | VFileMessage | string} causeOrReason\n   *   Reason for message, should use markdown.\n   * @param {Node | NodeLike | MessageOptions | Point | Position | string | null | undefined} [optionsOrParentOrPlace]\n   *   Configuration (optional).\n   * @param {string | null | undefined} [origin]\n   *   Place in code where the message originates (example:\n   *   `'my-package:my-rule'` or `'my-rule'`).\n   * @returns {VFileMessage}\n   *   Message.\n   */\n  message(causeOrReason, optionsOrParentOrPlace, origin) {\n    const message = new VFileMessage(\n      // @ts-expect-error: the overloads are fine.\n      causeOrReason,\n      optionsOrParentOrPlace,\n      origin\n    )\n\n    if (this.path) {\n      message.name = this.path + ':' + message.name\n      message.file = this.path\n    }\n\n    message.fatal = false\n\n    this.messages.push(message)\n\n    return message\n  }\n\n  /**\n   * Serialize the file.\n   *\n   * > **Note**: which encodings are supported depends on the engine.\n   * > For info on Node.js, see:\n   * > <https://nodejs.org/api/util.html#whatwg-supported-encodings>.\n   *\n   * @param {string | null | undefined} [encoding='utf8']\n   *   Character encoding to understand `value` as when it’s a `Uint8Array`\n   *   (default: `'utf-8'`).\n   * @returns {string}\n   *   Serialized file.\n   */\n  toString(encoding) {\n    if (this.value === undefined) {\n      return ''\n    }\n\n    if (typeof this.value === 'string') {\n      return this.value\n    }\n\n    const decoder = new TextDecoder(encoding || undefined)\n    return decoder.decode(this.value)\n  }\n}\n\n/**\n * Assert that `part` is not a path (as in, does not contain `path.sep`).\n *\n * @param {string | null | undefined} part\n *   File path part.\n * @param {string} name\n *   Part name.\n * @returns {undefined}\n *   Nothing.\n */\nfunction assertPart(part, name) {\n  if (part && part.includes(minpath.sep)) {\n    throw new Error(\n      '`' + name + '` cannot be a path: did not expect `' + minpath.sep + '`'\n    )\n  }\n}\n\n/**\n * Assert that `part` is not empty.\n *\n * @param {string | undefined} part\n *   Thing.\n * @param {string} name\n *   Part name.\n * @returns {asserts part is string}\n *   Nothing.\n */\nfunction assertNonEmpty(part, name) {\n  if (!part) {\n    throw new Error('`' + name + '` cannot be empty')\n  }\n}\n\n/**\n * Assert `path` exists.\n *\n * @param {string | undefined} path\n *   Path.\n * @param {string} name\n *   Dependency name.\n * @returns {asserts path is string}\n *   Nothing.\n */\nfunction assertPath(path, name) {\n  if (!path) {\n    throw new Error('Setting `' + name + '` requires `path` to be set too')\n  }\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","export const CallableInstance =\n  /**\n   * @type {new <Parameters extends Array<unknown>, Result>(property: string | symbol) => (...parameters: Parameters) => Result}\n   */\n  (\n    /** @type {unknown} */\n    (\n      /**\n       * @this {Function}\n       * @param {string | symbol} property\n       * @returns {(...parameters: Array<unknown>) => unknown}\n       */\n      function (property) {\n        const self = this\n        const constr = self.constructor\n        const proto = /** @type {Record<string | symbol, Function>} */ (\n          // Prototypes do exist.\n          // type-coverage:ignore-next-line\n          constr.prototype\n        )\n        const value = proto[property]\n        /** @type {(...parameters: Array<unknown>) => unknown} */\n        const apply = function () {\n          return value.apply(apply, arguments)\n        }\n\n        Object.setPrototypeOf(apply, proto)\n\n        // Not needed for us in `unified`: we only call this on the `copy`\n        // function,\n        // and we don't need to add its fields (`length`, `name`)\n        // over.\n        // See also: GH-246.\n        // const names = Object.getOwnPropertyNames(value)\n        //\n        // for (const p of names) {\n        //   const descriptor = Object.getOwnPropertyDescriptor(value, p)\n        //   if (descriptor) Object.defineProperty(apply, p, descriptor)\n        // }\n\n        return apply\n      }\n    )\n  )\n","/**\n * @typedef {import('trough').Pipeline} Pipeline\n *\n * @typedef {import('unist').Node} Node\n *\n * @typedef {import('vfile').Compatible} Compatible\n * @typedef {import('vfile').Value} Value\n *\n * @typedef {import('../index.js').CompileResultMap} CompileResultMap\n * @typedef {import('../index.js').Data} Data\n * @typedef {import('../index.js').Settings} Settings\n */\n\n/**\n * @typedef {CompileResultMap[keyof CompileResultMap]} CompileResults\n *   Acceptable results from compilers.\n *\n *   To register custom results, add them to\n *   {@linkcode CompileResultMap}.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the compiler receives (default: `Node`).\n * @template {CompileResults} [Result=CompileResults]\n *   The thing that the compiler yields (default: `CompileResults`).\n * @callback Compiler\n *   A **compiler** handles the compiling of a syntax tree to something else\n *   (in most cases, text) (TypeScript type).\n *\n *   It is used in the stringify phase and called with a {@linkcode Node}\n *   and {@linkcode VFile} representation of the document to compile.\n *   It should return the textual representation of the given tree (typically\n *   `string`).\n *\n *   > **Note**: unified typically compiles by serializing: most compilers\n *   > return `string` (or `Uint8Array`).\n *   > Some compilers, such as the one configured with\n *   > [`rehype-react`][rehype-react], return other values (in this case, a\n *   > React tree).\n *   > If you’re using a compiler that doesn’t serialize, expect different\n *   > result values.\n *   >\n *   > To register custom results in TypeScript, add them to\n *   > {@linkcode CompileResultMap}.\n *\n *   [rehype-react]: https://github.com/rehypejs/rehype-react\n * @param {Tree} tree\n *   Tree to compile.\n * @param {VFile} file\n *   File associated with `tree`.\n * @returns {Result}\n *   New content: compiled text (`string` or `Uint8Array`, for `file.value`) or\n *   something else (for `file.result`).\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The node that the parser yields (default: `Node`)\n * @callback Parser\n *   A **parser** handles the parsing of text to a syntax tree.\n *\n *   It is used in the parse phase and is called with a `string` and\n *   {@linkcode VFile} of the document to parse.\n *   It must return the syntax tree representation of the given file\n *   ({@linkcode Node}).\n * @param {string} document\n *   Document to parse.\n * @param {VFile} file\n *   File associated with `document`.\n * @returns {Tree}\n *   Node representing the given file.\n */\n\n/**\n * @typedef {(\n *   Plugin<Array<any>, any, any> |\n *   PluginTuple<Array<any>, any, any> |\n *   Preset\n * )} Pluggable\n *   Union of the different ways to add plugins and settings.\n */\n\n/**\n * @typedef {Array<Pluggable>} PluggableList\n *   List of plugins and presets.\n */\n\n// Note: we can’t use `callback` yet as it messes up `this`:\n//  <https://github.com/microsoft/TypeScript/issues/55197>.\n/**\n * @template {Array<unknown>} [PluginParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=Node]\n *   Value that is expected as input (default: `Node`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=Input]\n *   Value that is yielded as output (default: `Input`).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   (this: Processor, ...parameters: PluginParameters) =>\n *     Input extends string ? // Parser.\n *        Output extends Node | undefined ? undefined | void : never :\n *     Output extends CompileResults ? // Compiler.\n *        Input extends Node | undefined ? undefined | void : never :\n *     Transformer<\n *       Input extends Node ? Input : Node,\n *       Output extends Node ? Output : Node\n *     > | undefined | void\n * )} Plugin\n *   Single plugin.\n *\n *   Plugins configure the processors they are applied on in the following\n *   ways:\n *\n *   *   they change the processor, such as the parser, the compiler, or by\n *       configuring data\n *   *   they specify how to handle trees and files\n *\n *   In practice, they are functions that can receive options and configure the\n *   processor (`this`).\n *\n *   > **Note**: plugins are called when the processor is *frozen*, not when\n *   > they are applied.\n */\n\n/**\n * Tuple of a plugin and its configuration.\n *\n * The first item is a plugin, the rest are its parameters.\n *\n * @template {Array<unknown>} [TupleParameters=[]]\n *   Arguments passed to the plugin (default: `[]`, the empty tuple).\n * @template {Node | string | undefined} [Input=undefined]\n *   Value that is expected as input (optional).\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node it expects.\n *   *   If the plugin sets a {@linkcode Parser}, this should be\n *       `string`.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be the\n *       node it expects.\n * @template [Output=undefined] (optional).\n *   Value that is yielded as output.\n *\n *   *   If the plugin returns a {@linkcode Transformer}, this\n *       should be the node that that yields.\n *   *   If the plugin sets a {@linkcode Parser}, this should be the\n *       node that it yields.\n *   *   If the plugin sets a {@linkcode Compiler}, this should be\n *       result it yields.\n * @typedef {(\n *   [\n *     plugin: Plugin<TupleParameters, Input, Output>,\n *     ...parameters: TupleParameters\n *   ]\n * )} PluginTuple\n */\n\n/**\n * @typedef Preset\n *   Sharable configuration.\n *\n *   They can contain plugins and settings.\n * @property {PluggableList | undefined} [plugins]\n *   List of plugins and presets (optional).\n * @property {Settings | undefined} [settings]\n *   Shared settings for parsers and compilers (optional).\n */\n\n/**\n * @template {VFile} [File=VFile]\n *   The file that the callback receives (default: `VFile`).\n * @callback ProcessCallback\n *   Callback called when the process is done.\n *\n *   Called with either an error or a result.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {File | undefined} [file]\n *   Processed file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Tree=Node]\n *   The tree that the callback receives (default: `Node`).\n * @callback RunCallback\n *   Callback called when transformers are done.\n *\n *   Called with either an error or results.\n * @param {Error | undefined} [error]\n *   Fatal error (optional).\n * @param {Tree | undefined} [tree]\n *   Transformed tree (optional).\n * @param {VFile | undefined} [file]\n *   File (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Output=Node]\n *   Node type that the transformer yields (default: `Node`).\n * @callback TransformCallback\n *   Callback passed to transforms.\n *\n *   If the signature of a `transformer` accepts a third argument, the\n *   transformer may perform asynchronous operations, and must call it.\n * @param {Error | undefined} [error]\n *   Fatal error to stop the process (optional).\n * @param {Output | undefined} [tree]\n *   New, changed, tree (optional).\n * @param {VFile | undefined} [file]\n *   New, changed, file (optional).\n * @returns {undefined}\n *   Nothing.\n */\n\n/**\n * @template {Node} [Input=Node]\n *   Node type that the transformer expects (default: `Node`).\n * @template {Node} [Output=Input]\n *   Node type that the transformer yields (default: `Input`).\n * @callback Transformer\n *   Transformers handle syntax trees and files.\n *\n *   They are functions that are called each time a syntax tree and file are\n *   passed through the run phase.\n *   When an error occurs in them (either because it’s thrown, returned,\n *   rejected, or passed to `next`), the process stops.\n *\n *   The run phase is handled by [`trough`][trough], see its documentation for\n *   the exact semantics of these functions.\n *\n *   > **Note**: you should likely ignore `next`: don’t accept it.\n *   > it supports callback-style async work.\n *   > But promises are likely easier to reason about.\n *\n *   [trough]: https://github.com/wooorm/trough#function-fninput-next\n * @param {Input} tree\n *   Tree to handle.\n * @param {VFile} file\n *   File to handle.\n * @param {TransformCallback<Output>} next\n *   Callback.\n * @returns {(\n *   Promise<Output | undefined | void> |\n *   Promise<never> | // For some reason this is needed separately.\n *   Output |\n *   Error |\n *   undefined |\n *   void\n * )}\n *   If you accept `next`, nothing.\n *   Otherwise:\n *\n *   *   `Error` — fatal error to stop the process\n *   *   `Promise<undefined>` or `undefined` — the next transformer keeps using\n *       same tree\n *   *   `Promise<Node>` or `Node` — new, changed, tree\n */\n\n/**\n * @template {Node | undefined} ParseTree\n *   Output of `parse`.\n * @template {Node | undefined} HeadTree\n *   Input for `run`.\n * @template {Node | undefined} TailTree\n *   Output for `run`.\n * @template {Node | undefined} CompileTree\n *   Input of `stringify`.\n * @template {CompileResults | undefined} CompileResult\n *   Output of `stringify`.\n * @template {Node | string | undefined} Input\n *   Input of plugin.\n * @template Output\n *   Output of plugin (optional).\n * @typedef {(\n *   Input extends string\n *     ? Output extends Node | undefined\n *       ? // Parser.\n *         Processor<\n *           Output extends undefined ? ParseTree : Output,\n *           HeadTree,\n *           TailTree,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Output extends CompileResults\n *     ? Input extends Node | undefined\n *       ? // Compiler.\n *         Processor<\n *           ParseTree,\n *           HeadTree,\n *           TailTree,\n *           Input extends undefined ? CompileTree : Input,\n *           Output extends undefined ? CompileResult : Output\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : Input extends Node | undefined\n *     ? Output extends Node | undefined\n *       ? // Transform.\n *         Processor<\n *           ParseTree,\n *           HeadTree extends undefined ? Input : HeadTree,\n *           Output extends undefined ? TailTree : Output,\n *           CompileTree,\n *           CompileResult\n *         >\n *       : // Unknown.\n *         Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n *     : // Unknown.\n *       Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>\n * )} UsePlugin\n *   Create a processor based on the input/output of a {@link Plugin plugin}.\n */\n\n/**\n * @template {CompileResults | undefined} Result\n *   Node type that the transformer yields.\n * @typedef {(\n *   Result extends Value | undefined ?\n *     VFile :\n *     VFile & {result: Result}\n *   )} VFileWithOutput\n *   Type to generate a {@linkcode VFile} corresponding to a compiler result.\n *\n *   If a result that is not acceptable on a `VFile` is used, that will\n *   be stored on the `result` field of {@linkcode VFile}.\n */\n\nimport {bail} from 'bail'\nimport extend from 'extend'\nimport {ok as assert} from 'devlop'\nimport isPlainObj from 'is-plain-obj'\nimport {trough} from 'trough'\nimport {VFile} from 'vfile'\nimport {CallableInstance} from './callable-instance.js'\n\n// To do: next major: drop `Compiler`, `Parser`: prefer lowercase.\n\n// To do: we could start yielding `never` in TS when a parser is missing and\n// `parse` is called.\n// Currently, we allow directly setting `processor.parser`, which is untyped.\n\nconst own = {}.hasOwnProperty\n\n/**\n * @template {Node | undefined} [ParseTree=undefined]\n *   Output of `parse` (optional).\n * @template {Node | undefined} [HeadTree=undefined]\n *   Input for `run` (optional).\n * @template {Node | undefined} [TailTree=undefined]\n *   Output for `run` (optional).\n * @template {Node | undefined} [CompileTree=undefined]\n *   Input of `stringify` (optional).\n * @template {CompileResults | undefined} [CompileResult=undefined]\n *   Output of `stringify` (optional).\n * @extends {CallableInstance<[], Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>>}\n */\nexport class Processor extends CallableInstance {\n  /**\n   * Create a processor.\n   */\n  constructor() {\n    // If `Processor()` is called (w/o new), `copy` is called instead.\n    super('copy')\n\n    /**\n     * Compiler to use (deprecated).\n     *\n     * @deprecated\n     *   Use `compiler` instead.\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.Compiler = undefined\n\n    /**\n     * Parser to use (deprecated).\n     *\n     * @deprecated\n     *   Use `parser` instead.\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.Parser = undefined\n\n    // Note: the following fields are considered private.\n    // However, they are needed for tests, and TSC generates an untyped\n    // `private freezeIndex` field for, which trips `type-coverage` up.\n    // Instead, we use `@deprecated` to visualize that they shouldn’t be used.\n    /**\n     * Internal list of configured plugins.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Array<PluginTuple<Array<unknown>>>}\n     */\n    this.attachers = []\n\n    /**\n     * Compiler to use.\n     *\n     * @type {(\n     *   Compiler<\n     *     CompileTree extends undefined ? Node : CompileTree,\n     *     CompileResult extends undefined ? CompileResults : CompileResult\n     *   > |\n     *   undefined\n     * )}\n     */\n    this.compiler = undefined\n\n    /**\n     * Internal state to track where we are while freezing.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {number}\n     */\n    this.freezeIndex = -1\n\n    /**\n     * Internal state to track whether we’re frozen.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {boolean | undefined}\n     */\n    this.frozen = undefined\n\n    /**\n     * Internal state.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Data}\n     */\n    this.namespace = {}\n\n    /**\n     * Parser to use.\n     *\n     * @type {(\n     *   Parser<ParseTree extends undefined ? Node : ParseTree> |\n     *   undefined\n     * )}\n     */\n    this.parser = undefined\n\n    /**\n     * Internal list of configured transformers.\n     *\n     * @deprecated\n     *   This is a private internal property and should not be used.\n     * @type {Pipeline}\n     */\n    this.transformers = trough()\n  }\n\n  /**\n   * Copy a processor.\n   *\n   * @deprecated\n   *   This is a private internal method and should not be used.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   New *unfrozen* processor ({@linkcode Processor}) that is\n   *   configured to work the same as its ancestor.\n   *   When the descendant processor is configured in the future it does not\n   *   affect the ancestral processor.\n   */\n  copy() {\n    // Cast as the type parameters will be the same after attaching.\n    const destination =\n      /** @type {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>} */ (\n        new Processor()\n      )\n    let index = -1\n\n    while (++index < this.attachers.length) {\n      const attacher = this.attachers[index]\n      destination.use(...attacher)\n    }\n\n    destination.data(extend(true, {}, this.namespace))\n\n    return destination\n  }\n\n  /**\n   * Configure the processor with info available to all plugins.\n   * Information is stored in an object.\n   *\n   * Typically, options can be given to a specific plugin, but sometimes it\n   * makes sense to have information shared with several plugins.\n   * For example, a list of HTML elements that are self-closing, which is\n   * needed during all phases.\n   *\n   * > **Note**: setting information cannot occur on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * > **Note**: to register custom data in TypeScript, augment the\n   * > {@linkcode Data} interface.\n   *\n   * @example\n   *   This example show how to get and set info:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   const processor = unified().data('alpha', 'bravo')\n   *\n   *   processor.data('alpha') // => 'bravo'\n   *\n   *   processor.data() // => {alpha: 'bravo'}\n   *\n   *   processor.data({charlie: 'delta'})\n   *\n   *   processor.data() // => {charlie: 'delta'}\n   *   ```\n   *\n   * @template {keyof Data} Key\n   *\n   * @overload\n   * @returns {Data}\n   *\n   * @overload\n   * @param {Data} dataset\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Key} key\n   * @returns {Data[Key]}\n   *\n   * @overload\n   * @param {Key} key\n   * @param {Data[Key]} value\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @param {Data | Key} [key]\n   *   Key to get or set, or entire dataset to set, or nothing to get the\n   *   entire dataset (optional).\n   * @param {Data[Key]} [value]\n   *   Value to set (optional).\n   * @returns {unknown}\n   *   The current processor when setting, the value at `key` when getting, or\n   *   the entire dataset when getting without key.\n   */\n  data(key, value) {\n    if (typeof key === 'string') {\n      // Set `key`.\n      if (arguments.length === 2) {\n        assertUnfrozen('data', this.frozen)\n        this.namespace[key] = value\n        return this\n      }\n\n      // Get `key`.\n      return (own.call(this.namespace, key) && this.namespace[key]) || undefined\n    }\n\n    // Set space.\n    if (key) {\n      assertUnfrozen('data', this.frozen)\n      this.namespace = key\n      return this\n    }\n\n    // Get space.\n    return this.namespace\n  }\n\n  /**\n   * Freeze a processor.\n   *\n   * Frozen processors are meant to be extended and not to be configured\n   * directly.\n   *\n   * When a processor is frozen it cannot be unfrozen.\n   * New processors working the same way can be created by calling the\n   * processor.\n   *\n   * It’s possible to freeze processors explicitly by calling `.freeze()`.\n   * Processors freeze automatically when `.parse()`, `.run()`, `.runSync()`,\n   * `.stringify()`, `.process()`, or `.processSync()` are called.\n   *\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   The current processor.\n   */\n  freeze() {\n    if (this.frozen) {\n      return this\n    }\n\n    // Cast so that we can type plugins easier.\n    // Plugins are supposed to be usable on different processors, not just on\n    // this exact processor.\n    const self = /** @type {Processor} */ (/** @type {unknown} */ (this))\n\n    while (++this.freezeIndex < this.attachers.length) {\n      const [attacher, ...options] = this.attachers[this.freezeIndex]\n\n      if (options[0] === false) {\n        continue\n      }\n\n      if (options[0] === true) {\n        options[0] = undefined\n      }\n\n      const transformer = attacher.call(self, ...options)\n\n      if (typeof transformer === 'function') {\n        this.transformers.use(transformer)\n      }\n    }\n\n    this.frozen = true\n    this.freezeIndex = Number.POSITIVE_INFINITY\n\n    return this\n  }\n\n  /**\n   * Parse text to a syntax tree.\n   *\n   * > **Note**: `parse` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `parse` performs the parse phase, not the run phase or other\n   * > phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   file to parse (optional); typically `string` or `VFile`; any value\n   *   accepted as `x` in `new VFile(x)`.\n   * @returns {ParseTree extends undefined ? Node : ParseTree}\n   *   Syntax tree representing `file`.\n   */\n  parse(file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const parser = this.parser || this.Parser\n    assertParser('parse', parser)\n    return parser(String(realFile), realFile)\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * > **Note**: `process` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `process` performs the parse, run, and stringify phases.\n   *\n   * @overload\n   * @param {Compatible | undefined} file\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<VFileWithOutput<CompileResult>>}\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`]; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @param {ProcessCallback<VFileWithOutput<CompileResult>> | undefined} [done]\n   *   Callback (optional).\n   * @returns {Promise<VFile> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise a promise, rejected with a fatal error or resolved with the\n   *   processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  process(file, done) {\n    const self = this\n\n    this.freeze()\n    assertParser('process', this.parser || this.Parser)\n    assertCompiler('process', this.compiler || this.Compiler)\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {((file: VFileWithOutput<CompileResult>) => undefined | void) | undefined} resolve\n     * @param {(error: Error | undefined) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      const realFile = vfile(file)\n      // Assume `ParseTree` (the result of the parser) matches `HeadTree` (the\n      // input of the first transform).\n      const parseTree =\n        /** @type {HeadTree extends undefined ? Node : HeadTree} */ (\n          /** @type {unknown} */ (self.parse(realFile))\n        )\n\n      self.run(parseTree, realFile, function (error, tree, file) {\n        if (error || !tree || !file) {\n          return realDone(error)\n        }\n\n        // Assume `TailTree` (the output of the last transform) matches\n        // `CompileTree` (the input of the compiler).\n        const compileTree =\n          /** @type {CompileTree extends undefined ? Node : CompileTree} */ (\n            /** @type {unknown} */ (tree)\n          )\n\n        const compileResult = self.stringify(compileTree, file)\n\n        if (looksLikeAValue(compileResult)) {\n          file.value = compileResult\n        } else {\n          file.result = compileResult\n        }\n\n        realDone(error, /** @type {VFileWithOutput<CompileResult>} */ (file))\n      })\n\n      /**\n       * @param {Error | undefined} error\n       * @param {VFileWithOutput<CompileResult> | undefined} [file]\n       * @returns {undefined}\n       */\n      function realDone(error, file) {\n        if (error || !file) {\n          reject(error)\n        } else if (resolve) {\n          resolve(file)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Process the given file as configured on the processor.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `processSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `processSync` performs the parse, run, and stringify phases.\n   *\n   * @param {Compatible | undefined} [file]\n   *   File (optional); typically `string` or `VFile`; any value accepted as\n   *   `x` in `new VFile(x)`.\n   * @returns {VFileWithOutput<CompileResult>}\n   *   The processed file.\n   *\n   *   The parsed, transformed, and compiled value is available at\n   *   `file.value` (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most\n   *   > compilers return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  processSync(file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {VFileWithOutput<CompileResult> | undefined} */\n    let result\n\n    this.freeze()\n    assertParser('processSync', this.parser || this.Parser)\n    assertCompiler('processSync', this.compiler || this.Compiler)\n\n    this.process(file, realDone)\n    assertDone('processSync', 'process', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n\n    return result\n\n    /**\n     * @type {ProcessCallback<VFileWithOutput<CompileResult>>}\n     */\n    function realDone(error, file) {\n      complete = true\n      bail(error)\n      result = file\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * > **Note**: `run` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `run` performs the run phase, not other phases.\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} file\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} done\n   * @returns {undefined}\n   *\n   * @overload\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   * @param {Compatible | undefined} [file]\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree>}\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {(\n   *   RunCallback<TailTree extends undefined ? Node : TailTree> |\n   *   Compatible\n   * )} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @param {RunCallback<TailTree extends undefined ? Node : TailTree>} [done]\n   *   Callback (optional).\n   * @returns {Promise<TailTree extends undefined ? Node : TailTree> | undefined}\n   *   Nothing if `done` is given.\n   *   Otherwise, a promise rejected with a fatal error or resolved with the\n   *   transformed tree.\n   */\n  run(tree, file, done) {\n    assertNode(tree)\n    this.freeze()\n\n    const transformers = this.transformers\n\n    if (!done && typeof file === 'function') {\n      done = file\n      file = undefined\n    }\n\n    return done ? executor(undefined, done) : new Promise(executor)\n\n    // Note: `void`s needed for TS.\n    /**\n     * @param {(\n     *   ((tree: TailTree extends undefined ? Node : TailTree) => undefined | void) |\n     *   undefined\n     * )} resolve\n     * @param {(error: Error) => undefined | void} reject\n     * @returns {undefined}\n     */\n    function executor(resolve, reject) {\n      assert(\n        typeof file !== 'function',\n        '`file` can’t be a `done` anymore, we checked'\n      )\n      const realFile = vfile(file)\n      transformers.run(tree, realFile, realDone)\n\n      /**\n       * @param {Error | undefined} error\n       * @param {Node} outputTree\n       * @param {VFile} file\n       * @returns {undefined}\n       */\n      function realDone(error, outputTree, file) {\n        const resultingTree =\n          /** @type {TailTree extends undefined ? Node : TailTree} */ (\n            outputTree || tree\n          )\n\n        if (error) {\n          reject(error)\n        } else if (resolve) {\n          resolve(resultingTree)\n        } else {\n          assert(done, '`done` is defined if `resolve` is not')\n          done(undefined, resultingTree, file)\n        }\n      }\n    }\n  }\n\n  /**\n   * Run *transformers* on a syntax tree.\n   *\n   * An error is thrown if asynchronous transforms are configured.\n   *\n   * > **Note**: `runSync` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `runSync` performs the run phase, not other phases.\n   *\n   * @param {HeadTree extends undefined ? Node : HeadTree} tree\n   *   Tree to transform and inspect.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {TailTree extends undefined ? Node : TailTree}\n   *   Transformed tree.\n   */\n  runSync(tree, file) {\n    /** @type {boolean} */\n    let complete = false\n    /** @type {(TailTree extends undefined ? Node : TailTree) | undefined} */\n    let result\n\n    this.run(tree, file, realDone)\n\n    assertDone('runSync', 'run', complete)\n    assert(result, 'we either bailed on an error or have a tree')\n    return result\n\n    /**\n     * @type {RunCallback<TailTree extends undefined ? Node : TailTree>}\n     */\n    function realDone(error, tree) {\n      bail(error)\n      result = tree\n      complete = true\n    }\n  }\n\n  /**\n   * Compile a syntax tree.\n   *\n   * > **Note**: `stringify` freezes the processor if not already *frozen*.\n   *\n   * > **Note**: `stringify` performs the stringify phase, not the run phase\n   * > or other phases.\n   *\n   * @param {CompileTree extends undefined ? Node : CompileTree} tree\n   *   Tree to compile.\n   * @param {Compatible | undefined} [file]\n   *   File associated with `node` (optional); any value accepted as `x` in\n   *   `new VFile(x)`.\n   * @returns {CompileResult extends undefined ? Value : CompileResult}\n   *   Textual representation of the tree (see note).\n   *\n   *   > **Note**: unified typically compiles by serializing: most compilers\n   *   > return `string` (or `Uint8Array`).\n   *   > Some compilers, such as the one configured with\n   *   > [`rehype-react`][rehype-react], return other values (in this case, a\n   *   > React tree).\n   *   > If you’re using a compiler that doesn’t serialize, expect different\n   *   > result values.\n   *   >\n   *   > To register custom results in TypeScript, add them to\n   *   > {@linkcode CompileResultMap}.\n   *\n   *   [rehype-react]: https://github.com/rehypejs/rehype-react\n   */\n  stringify(tree, file) {\n    this.freeze()\n    const realFile = vfile(file)\n    const compiler = this.compiler || this.Compiler\n    assertCompiler('stringify', compiler)\n    assertNode(tree)\n\n    return compiler(tree, realFile)\n  }\n\n  /**\n   * Configure the processor to use a plugin, a list of usable values, or a\n   * preset.\n   *\n   * If the processor is already using a plugin, the previous plugin\n   * configuration is changed based on the options that are passed in.\n   * In other words, the plugin is not added a second time.\n   *\n   * > **Note**: `use` cannot be called on *frozen* processors.\n   * > Call the processor first to create a new unfrozen processor.\n   *\n   * @example\n   *   There are many ways to pass plugins to `.use()`.\n   *   This example gives an overview:\n   *\n   *   ```js\n   *   import {unified} from 'unified'\n   *\n   *   unified()\n   *     // Plugin with options:\n   *     .use(pluginA, {x: true, y: true})\n   *     // Passing the same plugin again merges configuration (to `{x: true, y: false, z: true}`):\n   *     .use(pluginA, {y: false, z: true})\n   *     // Plugins:\n   *     .use([pluginB, pluginC])\n   *     // Two plugins, the second with options:\n   *     .use([pluginD, [pluginE, {}]])\n   *     // Preset with plugins and settings:\n   *     .use({plugins: [pluginF, [pluginG, {}]], settings: {position: false}})\n   *     // Settings only:\n   *     .use({settings: {position: false}})\n   *   ```\n   *\n   * @template {Array<unknown>} [Parameters=[]]\n   * @template {Node | string | undefined} [Input=undefined]\n   * @template [Output=Input]\n   *\n   * @overload\n   * @param {Preset | null | undefined} [preset]\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {PluggableList} list\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *\n   * @overload\n   * @param {Plugin<Parameters, Input, Output>} plugin\n   * @param {...(Parameters | [boolean])} parameters\n   * @returns {UsePlugin<ParseTree, HeadTree, TailTree, CompileTree, CompileResult, Input, Output>}\n   *\n   * @param {PluggableList | Plugin | Preset | null | undefined} value\n   *   Usable value.\n   * @param {...unknown} parameters\n   *   Parameters, when a plugin is given as a usable value.\n   * @returns {Processor<ParseTree, HeadTree, TailTree, CompileTree, CompileResult>}\n   *   Current processor.\n   */\n  use(value, ...parameters) {\n    const attachers = this.attachers\n    const namespace = this.namespace\n\n    assertUnfrozen('use', this.frozen)\n\n    if (value === null || value === undefined) {\n      // Empty.\n    } else if (typeof value === 'function') {\n      addPlugin(value, parameters)\n    } else if (typeof value === 'object') {\n      if (Array.isArray(value)) {\n        addList(value)\n      } else {\n        addPreset(value)\n      }\n    } else {\n      throw new TypeError('Expected usable value, not `' + value + '`')\n    }\n\n    return this\n\n    /**\n     * @param {Pluggable} value\n     * @returns {undefined}\n     */\n    function add(value) {\n      if (typeof value === 'function') {\n        addPlugin(value, [])\n      } else if (typeof value === 'object') {\n        if (Array.isArray(value)) {\n          const [plugin, ...parameters] =\n            /** @type {PluginTuple<Array<unknown>>} */ (value)\n          addPlugin(plugin, parameters)\n        } else {\n          addPreset(value)\n        }\n      } else {\n        throw new TypeError('Expected usable value, not `' + value + '`')\n      }\n    }\n\n    /**\n     * @param {Preset} result\n     * @returns {undefined}\n     */\n    function addPreset(result) {\n      if (!('plugins' in result) && !('settings' in result)) {\n        throw new Error(\n          'Expected usable value but received an empty preset, which is probably a mistake: presets typically come with `plugins` and sometimes with `settings`, but this has neither'\n        )\n      }\n\n      addList(result.plugins)\n\n      if (result.settings) {\n        namespace.settings = extend(true, namespace.settings, result.settings)\n      }\n    }\n\n    /**\n     * @param {PluggableList | null | undefined} plugins\n     * @returns {undefined}\n     */\n    function addList(plugins) {\n      let index = -1\n\n      if (plugins === null || plugins === undefined) {\n        // Empty.\n      } else if (Array.isArray(plugins)) {\n        while (++index < plugins.length) {\n          const thing = plugins[index]\n          add(thing)\n        }\n      } else {\n        throw new TypeError('Expected a list of plugins, not `' + plugins + '`')\n      }\n    }\n\n    /**\n     * @param {Plugin} plugin\n     * @param {Array<unknown>} parameters\n     * @returns {undefined}\n     */\n    function addPlugin(plugin, parameters) {\n      let index = -1\n      let entryIndex = -1\n\n      while (++index < attachers.length) {\n        if (attachers[index][0] === plugin) {\n          entryIndex = index\n          break\n        }\n      }\n\n      if (entryIndex === -1) {\n        attachers.push([plugin, ...parameters])\n      }\n      // Only set if there was at least a `primary` value, otherwise we’d change\n      // `arguments.length`.\n      else if (parameters.length > 0) {\n        let [primary, ...rest] = parameters\n        const currentPrimary = attachers[entryIndex][1]\n        if (isPlainObj(currentPrimary) && isPlainObj(primary)) {\n          primary = extend(true, currentPrimary, primary)\n        }\n\n        attachers[entryIndex] = [plugin, primary, ...rest]\n      }\n    }\n  }\n}\n\n// Note: this returns a *callable* instance.\n// That’s why it’s documented as a function.\n/**\n * Create a new processor.\n *\n * @example\n *   This example shows how a new processor can be created (from `remark`) and linked\n *   to **stdin**(4) and **stdout**(4).\n *\n *   ```js\n *   import process from 'node:process'\n *   import concatStream from 'concat-stream'\n *   import {remark} from 'remark'\n *\n *   process.stdin.pipe(\n *     concatStream(function (buf) {\n *       process.stdout.write(String(remark().processSync(buf)))\n *     })\n *   )\n *   ```\n *\n * @returns\n *   New *unfrozen* processor (`processor`).\n *\n *   This processor is configured to work the same as its ancestor.\n *   When the descendant processor is configured in the future it does not\n *   affect the ancestral processor.\n */\nexport const unified = new Processor().freeze()\n\n/**\n * Assert a parser is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Parser}\n */\nfunction assertParser(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `parser`')\n  }\n}\n\n/**\n * Assert a compiler is available.\n *\n * @param {string} name\n * @param {unknown} value\n * @returns {asserts value is Compiler}\n */\nfunction assertCompiler(name, value) {\n  if (typeof value !== 'function') {\n    throw new TypeError('Cannot `' + name + '` without `compiler`')\n  }\n}\n\n/**\n * Assert the processor is not frozen.\n *\n * @param {string} name\n * @param {unknown} frozen\n * @returns {asserts frozen is false}\n */\nfunction assertUnfrozen(name, frozen) {\n  if (frozen) {\n    throw new Error(\n      'Cannot call `' +\n        name +\n        '` on a frozen processor.\\nCreate a new processor first, by calling it: use `processor()` instead of `processor`.'\n    )\n  }\n}\n\n/**\n * Assert `node` is a unist node.\n *\n * @param {unknown} node\n * @returns {asserts node is Node}\n */\nfunction assertNode(node) {\n  // `isPlainObj` unfortunately uses `any` instead of `unknown`.\n  // type-coverage:ignore-next-line\n  if (!isPlainObj(node) || typeof node.type !== 'string') {\n    throw new TypeError('Expected node, got `' + node + '`')\n    // Fine.\n  }\n}\n\n/**\n * Assert that `complete` is `true`.\n *\n * @param {string} name\n * @param {string} asyncName\n * @param {unknown} complete\n * @returns {asserts complete is true}\n */\nfunction assertDone(name, asyncName, complete) {\n  if (!complete) {\n    throw new Error(\n      '`' + name + '` finished async. Use `' + asyncName + '` instead'\n    )\n  }\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {VFile}\n */\nfunction vfile(value) {\n  return looksLikeAVFile(value) ? value : new VFile(value)\n}\n\n/**\n * @param {Compatible | undefined} [value]\n * @returns {value is VFile}\n */\nfunction looksLikeAVFile(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'message' in value &&\n      'messages' in value\n  )\n}\n\n/**\n * @param {unknown} [value]\n * @returns {value is Value}\n */\nfunction looksLikeAValue(value) {\n  return typeof value === 'string' || isUint8Array(value)\n}\n\n/**\n * Assert `value` is an `Uint8Array`.\n *\n * @param {unknown} value\n *   thing.\n * @returns {value is Uint8Array}\n *   Whether `value` is an `Uint8Array`.\n */\nfunction isUint8Array(value) {\n  return Boolean(\n    value &&\n      typeof value === 'object' &&\n      'byteLength' in value &&\n      'byteOffset' in value\n  )\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Element, Nodes, Parents, Root} from 'hast'\n * @import {Root as MdastRoot} from 'mdast'\n * @import {ComponentType, JSX, ReactElement, ReactNode} from 'react'\n * @import {Options as RemarkRehypeOptions} from 'remark-rehype'\n * @import {BuildVisitor} from 'unist-util-visit'\n * @import {PluggableList, Processor} from 'unified'\n */\n\n/**\n * @callback AllowElement\n *   Filter elements.\n * @param {Readonly<Element>} element\n *   Element to check.\n * @param {number} index\n *   Index of `element` in `parent`.\n * @param {Readonly<Parents> | undefined} parent\n *   Parent of `element`.\n * @returns {boolean | null | undefined}\n *   Whether to allow `element` (default: `false`).\n */\n\n/**\n * @typedef ExtraProps\n *   Extra fields we pass.\n * @property {Element | undefined} [node]\n *   passed when `passNode` is on.\n */\n\n/**\n * @typedef {{\n *   [Key in keyof JSX.IntrinsicElements]?: ComponentType<JSX.IntrinsicElements[Key] & ExtraProps> | keyof JSX.IntrinsicElements\n * }} Components\n *   Map tag names to components.\n */\n\n/**\n * @typedef Deprecation\n *   Deprecation.\n * @property {string} from\n *   Old field.\n * @property {string} id\n *   ID in readme.\n * @property {keyof Options} [to]\n *   New field.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {AllowElement | null | undefined} [allowElement]\n *   Filter elements (optional);\n *   `allowedElements` / `disallowedElements` is used first.\n * @property {ReadonlyArray<string> | null | undefined} [allowedElements]\n *   Tag names to allow (default: all tag names);\n *   cannot combine w/ `disallowedElements`.\n * @property {string | null | undefined} [children]\n *   Markdown.\n * @property {Components | null | undefined} [components]\n *   Map tag names to components.\n * @property {ReadonlyArray<string> | null | undefined} [disallowedElements]\n *   Tag names to disallow (default: `[]`);\n *   cannot combine w/ `allowedElements`.\n * @property {PluggableList | null | undefined} [rehypePlugins]\n *   List of rehype plugins to use.\n * @property {PluggableList | null | undefined} [remarkPlugins]\n *   List of remark plugins to use.\n * @property {Readonly<RemarkRehypeOptions> | null | undefined} [remarkRehypeOptions]\n *   Options to pass through to `remark-rehype`.\n * @property {boolean | null | undefined} [skipHtml=false]\n *   Ignore HTML in markdown completely (default: `false`).\n * @property {boolean | null | undefined} [unwrapDisallowed=false]\n *   Extract (unwrap) what’s in disallowed elements (default: `false`);\n *   normally when say `strong` is not allowed, it and it’s children are dropped,\n *   with `unwrapDisallowed` the element itself is replaced by its children.\n * @property {UrlTransform | null | undefined} [urlTransform]\n *   Change URLs (default: `defaultUrlTransform`)\n */\n\n/**\n * @typedef HooksOptionsOnly\n *   Configuration specifically for {@linkcode MarkdownHooks}.\n * @property {ReactNode | null | undefined} [fallback]\n *   Content to render while the processor processing the markdown (optional).\n */\n\n/**\n * @typedef {Options & HooksOptionsOnly} HooksOptions\n *   Configuration for {@linkcode MarkdownHooks};\n *   extends the regular {@linkcode Options} with a `fallback` prop.\n */\n\n/**\n * @callback UrlTransform\n *   Transform all URLs.\n * @param {string} url\n *   URL.\n * @param {string} key\n *   Property name (example: `'href'`).\n * @param {Readonly<Element>} node\n *   Node.\n * @returns {string | null | undefined}\n *   Transformed URL (optional).\n */\n\nimport {unreachable} from 'devlop'\nimport {toJsxRuntime} from 'hast-util-to-jsx-runtime'\nimport {urlAttributes} from 'html-url-attributes'\nimport {Fragment, jsx, jsxs} from 'react/jsx-runtime'\nimport {useEffect, useState} from 'react'\nimport remarkParse from 'remark-parse'\nimport remarkRehype from 'remark-rehype'\nimport {unified} from 'unified'\nimport {visit} from 'unist-util-visit'\nimport {VFile} from 'vfile'\n\nconst changelog =\n  'https://github.com/remarkjs/react-markdown/blob/main/changelog.md'\n\n/** @type {PluggableList} */\nconst emptyPlugins = []\n/** @type {Readonly<RemarkRehypeOptions>} */\nconst emptyRemarkRehypeOptions = {allowDangerousHtml: true}\nconst safeProtocol = /^(https?|ircs?|mailto|xmpp)$/i\n\n// Mutable because we `delete` any time it’s used and a message is sent.\n/** @type {ReadonlyArray<Readonly<Deprecation>>} */\nconst deprecations = [\n  {from: 'astPlugins', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'allowDangerousHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {\n    from: 'allowNode',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowElement'\n  },\n  {\n    from: 'allowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'allowedElements'\n  },\n  {from: 'className', id: 'remove-classname'},\n  {\n    from: 'disallowedTypes',\n    id: 'replace-allownode-allowedtypes-and-disallowedtypes',\n    to: 'disallowedElements'\n  },\n  {from: 'escapeHtml', id: 'remove-buggy-html-in-markdown-parser'},\n  {from: 'includeElementIndex', id: '#remove-includeelementindex'},\n  {\n    from: 'includeNodeIndex',\n    id: 'change-includenodeindex-to-includeelementindex'\n  },\n  {from: 'linkTarget', id: 'remove-linktarget'},\n  {from: 'plugins', id: 'change-plugins-to-remarkplugins', to: 'remarkPlugins'},\n  {from: 'rawSourcePos', id: '#remove-rawsourcepos'},\n  {from: 'renderers', id: 'change-renderers-to-components', to: 'components'},\n  {from: 'source', id: 'change-source-to-children', to: 'children'},\n  {from: 'sourcePos', id: '#remove-sourcepos'},\n  {from: 'transformImageUri', id: '#add-urltransform', to: 'urlTransform'},\n  {from: 'transformLinkUri', id: '#add-urltransform', to: 'urlTransform'}\n]\n\n/**\n * Component to render markdown.\n *\n * This is a synchronous component.\n * When using async plugins,\n * see {@linkcode MarkdownAsync} or {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nexport function Markdown(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  return post(processor.runSync(processor.parse(file), file), options)\n}\n\n/**\n * Component to render markdown with support for async plugins\n * through async/await.\n *\n * Components returning promises are supported on the server.\n * For async support on the client,\n * see {@linkcode MarkdownHooks}.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Promise<ReactElement>}\n *   Promise to a React element.\n */\nexport async function MarkdownAsync(options) {\n  const processor = createProcessor(options)\n  const file = createFile(options)\n  const tree = await processor.run(processor.parse(file), file)\n  return post(tree, options)\n}\n\n/**\n * Component to render markdown with support for async plugins through hooks.\n *\n * This uses `useEffect` and `useState` hooks.\n * Hooks run on the client and do not immediately render something.\n * For async support on the server,\n * see {@linkcode MarkdownAsync}.\n *\n * @param {Readonly<HooksOptions>} options\n *   Props.\n * @returns {ReactNode}\n *   React node.\n */\nexport function MarkdownHooks(options) {\n  const processor = createProcessor(options)\n  const [error, setError] = useState(\n    /** @type {Error | undefined} */ (undefined)\n  )\n  const [tree, setTree] = useState(/** @type {Root | undefined} */ (undefined))\n\n  useEffect(\n    function () {\n      let cancelled = false\n      const file = createFile(options)\n\n      processor.run(processor.parse(file), file, function (error, tree) {\n        if (!cancelled) {\n          setError(error)\n          setTree(tree)\n        }\n      })\n\n      /**\n       * @returns {undefined}\n       *   Nothing.\n       */\n      return function () {\n        cancelled = true\n      }\n    },\n    [\n      options.children,\n      options.rehypePlugins,\n      options.remarkPlugins,\n      options.remarkRehypeOptions\n    ]\n  )\n\n  if (error) throw error\n\n  return tree ? post(tree, options) : options.fallback\n}\n\n/**\n * Set up the `unified` processor.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {Processor<MdastRoot, MdastRoot, Root, undefined, undefined>}\n *   Result.\n */\nfunction createProcessor(options) {\n  const rehypePlugins = options.rehypePlugins || emptyPlugins\n  const remarkPlugins = options.remarkPlugins || emptyPlugins\n  const remarkRehypeOptions = options.remarkRehypeOptions\n    ? {...options.remarkRehypeOptions, ...emptyRemarkRehypeOptions}\n    : emptyRemarkRehypeOptions\n\n  const processor = unified()\n    .use(remarkParse)\n    .use(remarkPlugins)\n    .use(remarkRehype, remarkRehypeOptions)\n    .use(rehypePlugins)\n\n  return processor\n}\n\n/**\n * Set up the virtual file.\n *\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {VFile}\n *   Result.\n */\nfunction createFile(options) {\n  const children = options.children || ''\n  const file = new VFile()\n\n  if (typeof children === 'string') {\n    file.value = children\n  } else {\n    unreachable(\n      'Unexpected value `' +\n        children +\n        '` for `children` prop, expected `string`'\n    )\n  }\n\n  return file\n}\n\n/**\n * Process the result from unified some more.\n *\n * @param {Nodes} tree\n *   Tree.\n * @param {Readonly<Options>} options\n *   Props.\n * @returns {ReactElement}\n *   React element.\n */\nfunction post(tree, options) {\n  const allowedElements = options.allowedElements\n  const allowElement = options.allowElement\n  const components = options.components\n  const disallowedElements = options.disallowedElements\n  const skipHtml = options.skipHtml\n  const unwrapDisallowed = options.unwrapDisallowed\n  const urlTransform = options.urlTransform || defaultUrlTransform\n\n  for (const deprecation of deprecations) {\n    if (Object.hasOwn(options, deprecation.from)) {\n      unreachable(\n        'Unexpected `' +\n          deprecation.from +\n          '` prop, ' +\n          (deprecation.to\n            ? 'use `' + deprecation.to + '` instead'\n            : 'remove it') +\n          ' (see <' +\n          changelog +\n          '#' +\n          deprecation.id +\n          '> for more info)'\n      )\n    }\n  }\n\n  if (allowedElements && disallowedElements) {\n    unreachable(\n      'Unexpected combined `allowedElements` and `disallowedElements`, expected one or the other'\n    )\n  }\n\n  visit(tree, transform)\n\n  return toJsxRuntime(tree, {\n    Fragment,\n    components,\n    ignoreInvalidStyle: true,\n    jsx,\n    jsxs,\n    passKeys: true,\n    passNode: true\n  })\n\n  /** @type {BuildVisitor<Root>} */\n  function transform(node, index, parent) {\n    if (node.type === 'raw' && parent && typeof index === 'number') {\n      if (skipHtml) {\n        parent.children.splice(index, 1)\n      } else {\n        parent.children[index] = {type: 'text', value: node.value}\n      }\n\n      return index\n    }\n\n    if (node.type === 'element') {\n      /** @type {string} */\n      let key\n\n      for (key in urlAttributes) {\n        if (\n          Object.hasOwn(urlAttributes, key) &&\n          Object.hasOwn(node.properties, key)\n        ) {\n          const value = node.properties[key]\n          const test = urlAttributes[key]\n          if (test === null || test.includes(node.tagName)) {\n            node.properties[key] = urlTransform(String(value || ''), key, node)\n          }\n        }\n      }\n    }\n\n    if (node.type === 'element') {\n      let remove = allowedElements\n        ? !allowedElements.includes(node.tagName)\n        : disallowedElements\n          ? disallowedElements.includes(node.tagName)\n          : false\n\n      if (!remove && allowElement && typeof index === 'number') {\n        remove = !allowElement(node, index, parent)\n      }\n\n      if (remove && parent && typeof index === 'number') {\n        if (unwrapDisallowed && node.children) {\n          parent.children.splice(index, 1, ...node.children)\n        } else {\n          parent.children.splice(index, 1)\n        }\n\n        return index\n      }\n    }\n  }\n}\n\n/**\n * Make a URL safe.\n *\n * @satisfies {UrlTransform}\n * @param {string} value\n *   URL.\n * @returns {string}\n *   Safe URL.\n */\nexport function defaultUrlTransform(value) {\n  // Same as:\n  // <https://github.com/micromark/micromark/blob/929275e/packages/micromark-util-sanitize-uri/dev/index.js#L34>\n  // But without the `encode` part.\n  const colon = value.indexOf(':')\n  const questionMark = value.indexOf('?')\n  const numberSign = value.indexOf('#')\n  const slash = value.indexOf('/')\n\n  if (\n    // If there is no protocol, it’s relative.\n    colon === -1 ||\n    // If the first colon is after a `?`, `#`, or `/`, it’s not a protocol.\n    (slash !== -1 && colon > slash) ||\n    (questionMark !== -1 && colon > questionMark) ||\n    (numberSign !== -1 && colon > numberSign) ||\n    // It is a protocol, it should be allowed.\n    safeProtocol.test(value.slice(0, colon))\n  ) {\n    return value\n  }\n\n  return ''\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * Count how often a character (or substring) is used in a string.\n *\n * @param {string} value\n *   Value to search in.\n * @param {string} character\n *   Character (or substring) to look for.\n * @return {number}\n *   Number of times `character` occurred in `value`.\n */\nexport function ccount(value, character) {\n  const source = String(value)\n\n  if (typeof character !== 'string') {\n    throw new TypeError('Expected character')\n  }\n\n  let count = 0\n  let index = source.indexOf(character)\n\n  while (index !== -1) {\n    count++\n    index = source.indexOf(character, index + character.length)\n  }\n\n  return count\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Nodes, Parents, PhrasingContent, Root, Text} from 'mdast'\n * @import {BuildVisitor, Test, VisitorResult} from 'unist-util-visit-parents'\n */\n\n/**\n * @typedef RegExpMatchObject\n *   Info on the match.\n * @property {number} index\n *   The index of the search at which the result was found.\n * @property {string} input\n *   A copy of the search string in the text node.\n * @property {[...Array<Parents>, Text]} stack\n *   All ancestors of the text node, where the last node is the text itself.\n *\n * @typedef {RegExp | string} Find\n *   Pattern to find.\n *\n *   Strings are escaped and then turned into global expressions.\n *\n * @typedef {Array<FindAndReplaceTuple>} FindAndReplaceList\n *   Several find and replaces, in array form.\n *\n * @typedef {[Find, Replace?]} FindAndReplaceTuple\n *   Find and replace in tuple form.\n *\n * @typedef {ReplaceFunction | string | null | undefined} Replace\n *   Thing to replace with.\n *\n * @callback ReplaceFunction\n *   Callback called when a search matches.\n * @param {...any} parameters\n *   The parameters are the result of corresponding search expression:\n *\n *   * `value` (`string`) — whole match\n *   * `...capture` (`Array<string>`) — matches from regex capture groups\n *   * `match` (`RegExpMatchObject`) — info on the match\n * @returns {Array<PhrasingContent> | PhrasingContent | string | false | null | undefined}\n *   Thing to replace with.\n *\n *   * when `null`, `undefined`, `''`, remove the match\n *   * …or when `false`, do not replace at all\n *   * …or when `string`, replace with a text node of that value\n *   * …or when `Node` or `Array<Node>`, replace with those nodes\n *\n * @typedef {[RegExp, ReplaceFunction]} Pair\n *   Normalized find and replace.\n *\n * @typedef {Array<Pair>} Pairs\n *   All find and replaced.\n *\n * @typedef Options\n *   Configuration.\n * @property {Test | null | undefined} [ignore]\n *   Test for which nodes to ignore (optional).\n */\n\nimport escape from 'escape-string-regexp'\nimport {visitParents} from 'unist-util-visit-parents'\nimport {convert} from 'unist-util-is'\n\n/**\n * Find patterns in a tree and replace them.\n *\n * The algorithm searches the tree in *preorder* for complete values in `Text`\n * nodes.\n * Partial matches are not supported.\n *\n * @param {Nodes} tree\n *   Tree to change.\n * @param {FindAndReplaceList | FindAndReplaceTuple} list\n *   Patterns to find.\n * @param {Options | null | undefined} [options]\n *   Configuration (when `find` is not `Find`).\n * @returns {undefined}\n *   Nothing.\n */\nexport function findAndReplace(tree, list, options) {\n  const settings = options || {}\n  const ignored = convert(settings.ignore || [])\n  const pairs = toPairs(list)\n  let pairIndex = -1\n\n  while (++pairIndex < pairs.length) {\n    visitParents(tree, 'text', visitor)\n  }\n\n  /** @type {BuildVisitor<Root, 'text'>} */\n  function visitor(node, parents) {\n    let index = -1\n    /** @type {Parents | undefined} */\n    let grandparent\n\n    while (++index < parents.length) {\n      const parent = parents[index]\n      /** @type {Array<Nodes> | undefined} */\n      const siblings = grandparent ? grandparent.children : undefined\n\n      if (\n        ignored(\n          parent,\n          siblings ? siblings.indexOf(parent) : undefined,\n          grandparent\n        )\n      ) {\n        return\n      }\n\n      grandparent = parent\n    }\n\n    if (grandparent) {\n      return handler(node, parents)\n    }\n  }\n\n  /**\n   * Handle a text node which is not in an ignored parent.\n   *\n   * @param {Text} node\n   *   Text node.\n   * @param {Array<Parents>} parents\n   *   Parents.\n   * @returns {VisitorResult}\n   *   Result.\n   */\n  function handler(node, parents) {\n    const parent = parents[parents.length - 1]\n    const find = pairs[pairIndex][0]\n    const replace = pairs[pairIndex][1]\n    let start = 0\n    /** @type {Array<Nodes>} */\n    const siblings = parent.children\n    const index = siblings.indexOf(node)\n    let change = false\n    /** @type {Array<PhrasingContent>} */\n    let nodes = []\n\n    find.lastIndex = 0\n\n    let match = find.exec(node.value)\n\n    while (match) {\n      const position = match.index\n      /** @type {RegExpMatchObject} */\n      const matchObject = {\n        index: match.index,\n        input: match.input,\n        stack: [...parents, node]\n      }\n      let value = replace(...match, matchObject)\n\n      if (typeof value === 'string') {\n        value = value.length > 0 ? {type: 'text', value} : undefined\n      }\n\n      // It wasn’t a match after all.\n      if (value === false) {\n        // False acts as if there was no match.\n        // So we need to reset `lastIndex`, which currently being at the end of\n        // the current match, to the beginning.\n        find.lastIndex = position + 1\n      } else {\n        if (start !== position) {\n          nodes.push({\n            type: 'text',\n            value: node.value.slice(start, position)\n          })\n        }\n\n        if (Array.isArray(value)) {\n          nodes.push(...value)\n        } else if (value) {\n          nodes.push(value)\n        }\n\n        start = position + match[0].length\n        change = true\n      }\n\n      if (!find.global) {\n        break\n      }\n\n      match = find.exec(node.value)\n    }\n\n    if (change) {\n      if (start < node.value.length) {\n        nodes.push({type: 'text', value: node.value.slice(start)})\n      }\n\n      parent.children.splice(index, 1, ...nodes)\n    } else {\n      nodes = [node]\n    }\n\n    return index + nodes.length\n  }\n}\n\n/**\n * Turn a tuple or a list of tuples into pairs.\n *\n * @param {FindAndReplaceList | FindAndReplaceTuple} tupleOrList\n *   Schema.\n * @returns {Pairs}\n *   Clean pairs.\n */\nfunction toPairs(tupleOrList) {\n  /** @type {Pairs} */\n  const result = []\n\n  if (!Array.isArray(tupleOrList)) {\n    throw new TypeError('Expected find and replace tuple or list of tuples')\n  }\n\n  /** @type {FindAndReplaceList} */\n  // @ts-expect-error: correct.\n  const list =\n    !tupleOrList[0] || Array.isArray(tupleOrList[0])\n      ? tupleOrList\n      : [tupleOrList]\n\n  let index = -1\n\n  while (++index < list.length) {\n    const tuple = list[index]\n    result.push([toExpression(tuple[0]), toFunction(tuple[1])])\n  }\n\n  return result\n}\n\n/**\n * Turn a find into an expression.\n *\n * @param {Find} find\n *   Find.\n * @returns {RegExp}\n *   Expression.\n */\nfunction toExpression(find) {\n  return typeof find === 'string' ? new RegExp(escape(find), 'g') : find\n}\n\n/**\n * Turn a replace into a function.\n *\n * @param {Replace} replace\n *   Replace.\n * @returns {ReplaceFunction}\n *   Function.\n */\nfunction toFunction(replace) {\n  return typeof replace === 'function'\n    ? replace\n    : function () {\n        return replace\n      }\n}\n","export default function escapeStringRegexp(string) {\n\tif (typeof string !== 'string') {\n\t\tthrow new TypeError('Expected a string');\n\t}\n\n\t// Escape characters with special meaning either inside or outside character sets.\n\t// Use a simple backslash escape when it’s always valid, and a `\\xnn` escape when the simpler form would be disallowed by Unicode patterns’ stricter grammar.\n\treturn string\n\t\t.replace(/[|\\\\{}()[\\]^$+*?.]/g, '\\\\$&')\n\t\t.replace(/-/g, '\\\\x2d');\n}\n","/**\n * @import {RegExpMatchObject, ReplaceFunction} from 'mdast-util-find-and-replace'\n * @import {CompileContext, Extension as FromMarkdownExtension, Handle as FromMarkdownHandle, Transform as FromMarkdownTransform} from 'mdast-util-from-markdown'\n * @import {ConstructName, Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n * @import {Link, PhrasingContent} from 'mdast'\n */\n\nimport {ccount} from 'ccount'\nimport {ok as assert} from 'devlop'\nimport {unicodePunctuation, unicodeWhitespace} from 'micromark-util-character'\nimport {findAndReplace} from 'mdast-util-find-and-replace'\n\n/** @type {ConstructName} */\nconst inConstruct = 'phrasing'\n/** @type {Array<ConstructName>} */\nconst notInConstruct = ['autolink', 'link', 'image', 'label']\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralFromMarkdown() {\n  return {\n    transforms: [transformGfmAutolinkLiterals],\n    enter: {\n      literalAutolink: enterLiteralAutolink,\n      literalAutolinkEmail: enterLiteralAutolinkValue,\n      literalAutolinkHttp: enterLiteralAutolinkValue,\n      literalAutolinkWww: enterLiteralAutolinkValue\n    },\n    exit: {\n      literalAutolink: exitLiteralAutolink,\n      literalAutolinkEmail: exitLiteralAutolinkEmail,\n      literalAutolinkHttp: exitLiteralAutolinkHttp,\n      literalAutolinkWww: exitLiteralAutolinkWww\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM autolink\n * literals in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM autolink literals.\n */\nexport function gfmAutolinkLiteralToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '@',\n        before: '[+\\\\-.\\\\w]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: '.',\n        before: '[Ww]',\n        after: '[\\\\-.\\\\w]',\n        inConstruct,\n        notInConstruct\n      },\n      {\n        character: ':',\n        before: '[ps]',\n        after: '\\\\/',\n        inConstruct,\n        notInConstruct\n      }\n    ]\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolink(token) {\n  this.enter({type: 'link', title: null, url: '', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterLiteralAutolinkValue(token) {\n  this.config.enter.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkHttp(token) {\n  this.config.exit.autolinkProtocol.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkWww(token) {\n  this.config.exit.data.call(this, token)\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'link')\n  node.url = 'http://' + this.sliceSerialize(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolinkEmail(token) {\n  this.config.exit.autolinkEmail.call(this, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitLiteralAutolink(token) {\n  this.exit(token)\n}\n\n/** @type {FromMarkdownTransform} */\nfunction transformGfmAutolinkLiterals(tree) {\n  findAndReplace(\n    tree,\n    [\n      [/(https?:\\/\\/|www(?=\\.))([-.\\w]+)([^ \\t\\r\\n]*)/gi, findUrl],\n      [/(?<=^|\\s|\\p{P}|\\p{S})([-.\\w+]+)@([-\\w]+(?:\\.[-\\w]+)+)/gu, findEmail]\n    ],\n    {ignore: ['link', 'linkReference']}\n  )\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} protocol\n * @param {string} domain\n * @param {string} path\n * @param {RegExpMatchObject} match\n * @returns {Array<PhrasingContent> | Link | false}\n */\n// eslint-disable-next-line max-params\nfunction findUrl(_, protocol, domain, path, match) {\n  let prefix = ''\n\n  // Not an expected previous character.\n  if (!previous(match)) {\n    return false\n  }\n\n  // Treat `www` as part of the domain.\n  if (/^w/i.test(protocol)) {\n    domain = protocol + domain\n    protocol = ''\n    prefix = 'http://'\n  }\n\n  if (!isCorrectDomain(domain)) {\n    return false\n  }\n\n  const parts = splitUrl(domain + path)\n\n  if (!parts[0]) return false\n\n  /** @type {Link} */\n  const result = {\n    type: 'link',\n    title: null,\n    url: prefix + protocol + parts[0],\n    children: [{type: 'text', value: protocol + parts[0]}]\n  }\n\n  if (parts[1]) {\n    return [result, {type: 'text', value: parts[1]}]\n  }\n\n  return result\n}\n\n/**\n * @type {ReplaceFunction}\n * @param {string} _\n * @param {string} atext\n * @param {string} label\n * @param {RegExpMatchObject} match\n * @returns {Link | false}\n */\nfunction findEmail(_, atext, label, match) {\n  if (\n    // Not an expected previous character.\n    !previous(match, true) ||\n    // Label ends in not allowed character.\n    /[-\\d_]$/.test(label)\n  ) {\n    return false\n  }\n\n  return {\n    type: 'link',\n    title: null,\n    url: 'mailto:' + atext + '@' + label,\n    children: [{type: 'text', value: atext + '@' + label}]\n  }\n}\n\n/**\n * @param {string} domain\n * @returns {boolean}\n */\nfunction isCorrectDomain(domain) {\n  const parts = domain.split('.')\n\n  if (\n    parts.length < 2 ||\n    (parts[parts.length - 1] &&\n      (/_/.test(parts[parts.length - 1]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 1]))) ||\n    (parts[parts.length - 2] &&\n      (/_/.test(parts[parts.length - 2]) ||\n        !/[a-zA-Z\\d]/.test(parts[parts.length - 2])))\n  ) {\n    return false\n  }\n\n  return true\n}\n\n/**\n * @param {string} url\n * @returns {[string, string | undefined]}\n */\nfunction splitUrl(url) {\n  const trailExec = /[!\"&'),.:;<>?\\]}]+$/.exec(url)\n\n  if (!trailExec) {\n    return [url, undefined]\n  }\n\n  url = url.slice(0, trailExec.index)\n\n  let trail = trailExec[0]\n  let closingParenIndex = trail.indexOf(')')\n  const openingParens = ccount(url, '(')\n  let closingParens = ccount(url, ')')\n\n  while (closingParenIndex !== -1 && openingParens > closingParens) {\n    url += trail.slice(0, closingParenIndex + 1)\n    trail = trail.slice(closingParenIndex + 1)\n    closingParenIndex = trail.indexOf(')')\n    closingParens++\n  }\n\n  return [url, trail]\n}\n\n/**\n * @param {RegExpMatchObject} match\n * @param {boolean | null | undefined} [email=false]\n * @returns {boolean}\n */\nfunction previous(match, email) {\n  const code = match.input.charCodeAt(match.index - 1)\n\n  return (\n    (match.index === 0 ||\n      unicodeWhitespace(code) ||\n      unicodePunctuation(code)) &&\n    // If it’s an email, the previous character should not be a slash.\n    (!email || code !== 47)\n  )\n}\n","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {\n *   CompileContext,\n *   Extension as FromMarkdownExtension,\n *   Handle as FromMarkdownHandle\n * } from 'mdast-util-from-markdown'\n * @import {ToMarkdownOptions} from 'mdast-util-gfm-footnote'\n * @import {\n *   Handle as ToMarkdownHandle,\n *   Map,\n *   Options as ToMarkdownExtension\n * } from 'mdast-util-to-markdown'\n * @import {FootnoteDefinition, FootnoteReference} from 'mdast'\n */\n\nimport {ok as assert} from 'devlop'\nimport {normalizeIdentifier} from 'micromark-util-normalize-identifier'\n\nfootnoteReference.peek = footnoteReferencePeek\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCallString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteCall(token) {\n  this.enter({type: 'footnoteReference', identifier: '', label: ''}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinitionLabelString() {\n  this.buffer()\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterFootnoteDefinition(token) {\n  this.enter(\n    {type: 'footnoteDefinition', identifier: '', label: '', children: []},\n    token\n  )\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCallString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteReference')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteCall(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinitionLabelString(token) {\n  const label = this.resume()\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'footnoteDefinition')\n  node.identifier = normalizeIdentifier(\n    this.sliceSerialize(token)\n  ).toLowerCase()\n  node.label = label\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitFootnoteDefinition(token) {\n  this.exit(token)\n}\n\n/** @type {ToMarkdownHandle} */\nfunction footnoteReferencePeek() {\n  return '['\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {FootnoteReference} node\n */\nfunction footnoteReference(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[^')\n  const exit = state.enter('footnoteReference')\n  const subexit = state.enter('reference')\n  value += tracker.move(\n    state.safe(state.associationId(node), {after: ']', before: value})\n  )\n  subexit()\n  exit()\n  value += tracker.move(']')\n  return value\n}\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown`.\n */\nexport function gfmFootnoteFromMarkdown() {\n  return {\n    enter: {\n      gfmFootnoteCallString: enterFootnoteCallString,\n      gfmFootnoteCall: enterFootnoteCall,\n      gfmFootnoteDefinitionLabelString: enterFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: enterFootnoteDefinition\n    },\n    exit: {\n      gfmFootnoteCallString: exitFootnoteCallString,\n      gfmFootnoteCall: exitFootnoteCall,\n      gfmFootnoteDefinitionLabelString: exitFootnoteDefinitionLabelString,\n      gfmFootnoteDefinition: exitFootnoteDefinition\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM footnotes\n * in markdown.\n *\n * @param {ToMarkdownOptions | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown`.\n */\nexport function gfmFootnoteToMarkdown(options) {\n  // To do: next major: change default.\n  let firstLineBlank = false\n\n  if (options && options.firstLineBlank) {\n    firstLineBlank = true\n  }\n\n  return {\n    handlers: {footnoteDefinition, footnoteReference},\n    // This is on by default already.\n    unsafe: [{character: '[', inConstruct: ['label', 'phrasing', 'reference']}]\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {FootnoteDefinition} node\n   */\n  function footnoteDefinition(node, _, state, info) {\n    const tracker = state.createTracker(info)\n    let value = tracker.move('[^')\n    const exit = state.enter('footnoteDefinition')\n    const subexit = state.enter('label')\n    value += tracker.move(\n      state.safe(state.associationId(node), {before: value, after: ']'})\n    )\n    subexit()\n\n    value += tracker.move(']:')\n\n    if (node.children && node.children.length > 0) {\n      tracker.shift(4)\n\n      value += tracker.move(\n        (firstLineBlank ? '\\n' : ' ') +\n          state.indentLines(\n            state.containerFlow(node, tracker.current()),\n            firstLineBlank ? mapAll : mapExceptFirst\n          )\n      )\n    }\n\n    exit()\n\n    return value\n  }\n}\n\n/** @type {Map} */\nfunction mapExceptFirst(line, index, blank) {\n  return index === 0 ? line : mapAll(line, index, blank)\n}\n\n/** @type {Map} */\nfunction mapAll(line, index, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @typedef {import('mdast').Delete} Delete\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').ConstructName} ConstructName\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n */\n\n/**\n * List of constructs that occur in phrasing (paragraphs, headings), but cannot\n * contain strikethrough.\n * So they sort of cancel each other out.\n * Note: could use a better name.\n *\n * Note: keep in sync with: <https://github.com/syntax-tree/mdast-util-to-markdown/blob/8ce8dbf/lib/unsafe.js#L14>\n *\n * @type {Array<ConstructName>}\n */\nconst constructsWithoutStrikethrough = [\n  'autolink',\n  'destinationLiteral',\n  'destinationRaw',\n  'reference',\n  'titleQuote',\n  'titleApostrophe'\n]\n\nhandleDelete.peek = peekDelete\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughFromMarkdown() {\n  return {\n    canContainEols: ['delete'],\n    enter: {strikethrough: enterStrikethrough},\n    exit: {strikethrough: exitStrikethrough}\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM\n * strikethrough in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM strikethrough.\n */\nexport function gfmStrikethroughToMarkdown() {\n  return {\n    unsafe: [\n      {\n        character: '~',\n        inConstruct: 'phrasing',\n        notInConstruct: constructsWithoutStrikethrough\n      }\n    ],\n    handlers: {delete: handleDelete}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterStrikethrough(token) {\n  this.enter({type: 'delete', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitStrikethrough(token) {\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {Delete} node\n */\nfunction handleDelete(node, _, state, info) {\n  const tracker = state.createTracker(info)\n  const exit = state.enter('strikethrough')\n  let value = tracker.move('~~')\n  value += state.containerPhrasing(node, {\n    ...tracker.current(),\n    before: value,\n    after: '~'\n  })\n  value += tracker.move('~~')\n  exit()\n  return value\n}\n\n/** @type {ToMarkdownHandle} */\nfunction peekDelete() {\n  return '~'\n}\n","// To do: next major: remove.\n/**\n * @typedef {Options} MarkdownTableOptions\n *   Configuration.\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [alignDelimiters=true]\n *   Whether to align the delimiters (default: `true`);\n *   they are aligned by default:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   Pass `false` to make them staggered:\n *\n *   ```markdown\n *   | Alpha | B |\n *   | - | - |\n *   | C | Delta |\n *   ```\n * @property {ReadonlyArray<string | null | undefined> | string | null | undefined} [align]\n *   How to align columns (default: `''`);\n *   one style for all columns or styles for their respective columns;\n *   each style is either `'l'` (left), `'r'` (right), or `'c'` (center);\n *   other values are treated as `''`, which doesn’t place the colon in the\n *   alignment row but does align left;\n *   *only the lowercased first character is used, so `Right` is fine.*\n * @property {boolean | null | undefined} [delimiterEnd=true]\n *   Whether to end each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no ending delimiters:\n *\n *   ```markdown\n *   | Alpha | B\n *   | ----- | -----\n *   | C     | Delta\n *   ```\n * @property {boolean | null | undefined} [delimiterStart=true]\n *   Whether to begin each row with the delimiter (default: `true`).\n *\n *   > 👉 **Note**: please don’t use this: it could create fragile structures\n *   > that aren’t understandable to some markdown parsers.\n *\n *   When `true`, there are starting delimiters:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there are no starting delimiters:\n *\n *   ```markdown\n *   Alpha | B     |\n *   ----- | ----- |\n *   C     | Delta |\n *   ```\n * @property {boolean | null | undefined} [padding=true]\n *   Whether to add a space of padding between delimiters and cells\n *   (default: `true`).\n *\n *   When `true`, there is padding:\n *\n *   ```markdown\n *   | Alpha | B     |\n *   | ----- | ----- |\n *   | C     | Delta |\n *   ```\n *\n *   When `false`, there is no padding:\n *\n *   ```markdown\n *   |Alpha|B    |\n *   |-----|-----|\n *   |C    |Delta|\n *   ```\n * @property {((value: string) => number) | null | undefined} [stringLength]\n *   Function to detect the length of table cell content (optional);\n *   this is used when aligning the delimiters (`|`) between table cells;\n *   full-width characters and emoji mess up delimiter alignment when viewing\n *   the markdown source;\n *   to fix this, you can pass this function,\n *   which receives the cell content and returns its “visible” size;\n *   note that what is and isn’t visible depends on where the text is displayed.\n *\n *   Without such a function, the following:\n *\n *   ```js\n *   markdownTable([\n *     ['Alpha', 'Bravo'],\n *     ['中文', 'Charlie'],\n *     ['👩‍❤️‍👩', 'Delta']\n *   ])\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo |\n *   | - | - |\n *   | 中文 | Charlie |\n *   | 👩‍❤️‍👩 | Delta |\n *   ```\n *\n *   With [`string-width`](https://github.com/sindresorhus/string-width):\n *\n *   ```js\n *   import stringWidth from 'string-width'\n *\n *   markdownTable(\n *     [\n *       ['Alpha', 'Bravo'],\n *       ['中文', 'Charlie'],\n *       ['👩‍❤️‍👩', 'Delta']\n *     ],\n *     {stringLength: stringWidth}\n *   )\n *   ```\n *\n *   Yields:\n *\n *   ```markdown\n *   | Alpha | Bravo   |\n *   | ----- | ------- |\n *   | 中文  | Charlie |\n *   | 👩‍❤️‍👩    | Delta   |\n *   ```\n */\n\n/**\n * @param {string} value\n *   Cell value.\n * @returns {number}\n *   Cell size.\n */\nfunction defaultStringLength(value) {\n  return value.length\n}\n\n/**\n * Generate a markdown\n * ([GFM](https://docs.github.com/en/github/writing-on-github/working-with-advanced-formatting/organizing-information-with-tables))\n * table.\n *\n * @param {ReadonlyArray<ReadonlyArray<string | null | undefined>>} table\n *   Table data (matrix of strings).\n * @param {Readonly<Options> | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Result.\n */\nexport function markdownTable(table, options) {\n  const settings = options || {}\n  // To do: next major: change to spread.\n  const align = (settings.align || []).concat()\n  const stringLength = settings.stringLength || defaultStringLength\n  /** @type {Array<number>} Character codes as symbols for alignment per column. */\n  const alignments = []\n  /** @type {Array<Array<string>>} Cells per row. */\n  const cellMatrix = []\n  /** @type {Array<Array<number>>} Sizes of each cell per row. */\n  const sizeMatrix = []\n  /** @type {Array<number>} */\n  const longestCellByColumn = []\n  let mostCellsPerRow = 0\n  let rowIndex = -1\n\n  // This is a superfluous loop if we don’t align delimiters, but otherwise we’d\n  // do superfluous work when aligning, so optimize for aligning.\n  while (++rowIndex < table.length) {\n    /** @type {Array<string>} */\n    const row = []\n    /** @type {Array<number>} */\n    const sizes = []\n    let columnIndex = -1\n\n    if (table[rowIndex].length > mostCellsPerRow) {\n      mostCellsPerRow = table[rowIndex].length\n    }\n\n    while (++columnIndex < table[rowIndex].length) {\n      const cell = serialize(table[rowIndex][columnIndex])\n\n      if (settings.alignDelimiters !== false) {\n        const size = stringLength(cell)\n        sizes[columnIndex] = size\n\n        if (\n          longestCellByColumn[columnIndex] === undefined ||\n          size > longestCellByColumn[columnIndex]\n        ) {\n          longestCellByColumn[columnIndex] = size\n        }\n      }\n\n      row.push(cell)\n    }\n\n    cellMatrix[rowIndex] = row\n    sizeMatrix[rowIndex] = sizes\n  }\n\n  // Figure out which alignments to use.\n  let columnIndex = -1\n\n  if (typeof align === 'object' && 'length' in align) {\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = toAlignment(align[columnIndex])\n    }\n  } else {\n    const code = toAlignment(align)\n\n    while (++columnIndex < mostCellsPerRow) {\n      alignments[columnIndex] = code\n    }\n  }\n\n  // Inject the alignment row.\n  columnIndex = -1\n  /** @type {Array<string>} */\n  const row = []\n  /** @type {Array<number>} */\n  const sizes = []\n\n  while (++columnIndex < mostCellsPerRow) {\n    const code = alignments[columnIndex]\n    let before = ''\n    let after = ''\n\n    if (code === 99 /* `c` */) {\n      before = ':'\n      after = ':'\n    } else if (code === 108 /* `l` */) {\n      before = ':'\n    } else if (code === 114 /* `r` */) {\n      after = ':'\n    }\n\n    // There *must* be at least one hyphen-minus in each alignment cell.\n    let size =\n      settings.alignDelimiters === false\n        ? 1\n        : Math.max(\n            1,\n            longestCellByColumn[columnIndex] - before.length - after.length\n          )\n\n    const cell = before + '-'.repeat(size) + after\n\n    if (settings.alignDelimiters !== false) {\n      size = before.length + size + after.length\n\n      if (size > longestCellByColumn[columnIndex]) {\n        longestCellByColumn[columnIndex] = size\n      }\n\n      sizes[columnIndex] = size\n    }\n\n    row[columnIndex] = cell\n  }\n\n  // Inject the alignment row.\n  cellMatrix.splice(1, 0, row)\n  sizeMatrix.splice(1, 0, sizes)\n\n  rowIndex = -1\n  /** @type {Array<string>} */\n  const lines = []\n\n  while (++rowIndex < cellMatrix.length) {\n    const row = cellMatrix[rowIndex]\n    const sizes = sizeMatrix[rowIndex]\n    columnIndex = -1\n    /** @type {Array<string>} */\n    const line = []\n\n    while (++columnIndex < mostCellsPerRow) {\n      const cell = row[columnIndex] || ''\n      let before = ''\n      let after = ''\n\n      if (settings.alignDelimiters !== false) {\n        const size =\n          longestCellByColumn[columnIndex] - (sizes[columnIndex] || 0)\n        const code = alignments[columnIndex]\n\n        if (code === 114 /* `r` */) {\n          before = ' '.repeat(size)\n        } else if (code === 99 /* `c` */) {\n          if (size % 2) {\n            before = ' '.repeat(size / 2 + 0.5)\n            after = ' '.repeat(size / 2 - 0.5)\n          } else {\n            before = ' '.repeat(size / 2)\n            after = before\n          }\n        } else {\n          after = ' '.repeat(size)\n        }\n      }\n\n      if (settings.delimiterStart !== false && !columnIndex) {\n        line.push('|')\n      }\n\n      if (\n        settings.padding !== false &&\n        // Don’t add the opening space if we’re not aligning and the cell is\n        // empty: there will be a closing space.\n        !(settings.alignDelimiters === false && cell === '') &&\n        (settings.delimiterStart !== false || columnIndex)\n      ) {\n        line.push(' ')\n      }\n\n      if (settings.alignDelimiters !== false) {\n        line.push(before)\n      }\n\n      line.push(cell)\n\n      if (settings.alignDelimiters !== false) {\n        line.push(after)\n      }\n\n      if (settings.padding !== false) {\n        line.push(' ')\n      }\n\n      if (\n        settings.delimiterEnd !== false ||\n        columnIndex !== mostCellsPerRow - 1\n      ) {\n        line.push('|')\n      }\n    }\n\n    lines.push(\n      settings.delimiterEnd === false\n        ? line.join('').replace(/ +$/, '')\n        : line.join('')\n    )\n  }\n\n  return lines.join('\\n')\n}\n\n/**\n * @param {string | null | undefined} [value]\n *   Value to serialize.\n * @returns {string}\n *   Result.\n */\nfunction serialize(value) {\n  return value === null || value === undefined ? '' : String(value)\n}\n\n/**\n * @param {string | null | undefined} value\n *   Value.\n * @returns {number}\n *   Alignment.\n */\nfunction toAlignment(value) {\n  const code = typeof value === 'string' ? value.codePointAt(0) : 0\n\n  return code === 67 /* `C` */ || code === 99 /* `c` */\n    ? 99 /* `c` */\n    : code === 76 /* `L` */ || code === 108 /* `l` */\n      ? 108 /* `l` */\n      : code === 82 /* `R` */ || code === 114 /* `r` */\n        ? 114 /* `r` */\n        : 0\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * Get the count of the longest repeating streak of `substring` in `value`.\n *\n * @param {string} value\n *   Content to search in.\n * @param {string} substring\n *   Substring to look for, typically one character.\n * @returns {number}\n *   Count of most frequent adjacent `substring`s in `value`.\n */\nexport function longestStreak(value, substring) {\n  const source = String(value)\n  let index = source.indexOf(substring)\n  let expected = index\n  let count = 0\n  let max = 0\n\n  if (typeof substring !== 'string') {\n    throw new TypeError('Expected substring')\n  }\n\n  while (index !== -1) {\n    if (index === expected) {\n      if (++count > max) {\n        max = count\n      }\n    } else {\n      count = 1\n    }\n\n    expected = index + substring.length\n    index = source.indexOf(substring, expected)\n  }\n\n  return max\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').InlineCode} InlineCode\n * @typedef {import('mdast').Table} Table\n * @typedef {import('mdast').TableCell} TableCell\n * @typedef {import('mdast').TableRow} TableRow\n *\n * @typedef {import('markdown-table').Options} MarkdownTableOptions\n *\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n *\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').State} State\n * @typedef {import('mdast-util-to-markdown').Info} Info\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {boolean | null | undefined} [tableCellPadding=true]\n *   Whether to add a space of padding between delimiters and cells (default:\n *   `true`).\n * @property {boolean | null | undefined} [tablePipeAlign=true]\n *   Whether to align the delimiters (default: `true`).\n * @property {MarkdownTableOptions['stringLength'] | null | undefined} [stringLength]\n *   Function to detect the length of table cell content, used when aligning\n *   the delimiters between cells (optional).\n */\n\nimport {ok as assert} from 'devlop'\nimport {markdownTable} from 'markdown-table'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM tables in\n * markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM tables.\n */\nexport function gfmTableFromMarkdown() {\n  return {\n    enter: {\n      table: enterTable,\n      tableData: enterCell,\n      tableHeader: enterCell,\n      tableRow: enterRow\n    },\n    exit: {\n      codeText: exitCodeText,\n      table: exitTable,\n      tableData: exit,\n      tableHeader: exit,\n      tableRow: exit\n    }\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterTable(token) {\n  const align = token._align\n  assert(align, 'expected `_align` on table')\n  this.enter(\n    {\n      type: 'table',\n      align: align.map(function (d) {\n        return d === 'none' ? null : d\n      }),\n      children: []\n    },\n    token\n  )\n  this.data.inTable = true\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitTable(token) {\n  this.exit(token)\n  this.data.inTable = undefined\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterRow(token) {\n  this.enter({type: 'tableRow', children: []}, token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exit(token) {\n  this.exit(token)\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction enterCell(token) {\n  this.enter({type: 'tableCell', children: []}, token)\n}\n\n// Overwrite the default code text data handler to unescape escaped pipes when\n// they are in tables.\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCodeText(token) {\n  let value = this.resume()\n\n  if (this.data.inTable) {\n    value = value.replace(/\\\\([\\\\|])/g, replace)\n  }\n\n  const node = this.stack[this.stack.length - 1]\n  assert(node.type === 'inlineCode')\n  node.value = value\n  this.exit(token)\n}\n\n/**\n * @param {string} $0\n * @param {string} $1\n * @returns {string}\n */\nfunction replace($0, $1) {\n  // Pipes work, backslashes don’t (but can’t escape pipes).\n  return $1 === '|' ? $1 : $0\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM tables in\n * markdown.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration.\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM tables.\n */\nexport function gfmTableToMarkdown(options) {\n  const settings = options || {}\n  const padding = settings.tableCellPadding\n  const alignDelimiters = settings.tablePipeAlign\n  const stringLength = settings.stringLength\n  const around = padding ? ' ' : '|'\n\n  return {\n    unsafe: [\n      {character: '\\r', inConstruct: 'tableCell'},\n      {character: '\\n', inConstruct: 'tableCell'},\n      // A pipe, when followed by a tab or space (padding), or a dash or colon\n      // (unpadded delimiter row), could result in a table.\n      {atBreak: true, character: '|', after: '[\\t :-]'},\n      // A pipe in a cell must be encoded.\n      {character: '|', inConstruct: 'tableCell'},\n      // A colon must be followed by a dash, in which case it could start a\n      // delimiter row.\n      {atBreak: true, character: ':', after: '-'},\n      // A delimiter row can also start with a dash, when followed by more\n      // dashes, a colon, or a pipe.\n      // This is a stricter version than the built in check for lists, thematic\n      // breaks, and setex heading underlines though:\n      // <https://github.com/syntax-tree/mdast-util-to-markdown/blob/51a2038/lib/unsafe.js#L57>\n      {atBreak: true, character: '-', after: '[:|-]'}\n    ],\n    handlers: {\n      inlineCode: inlineCodeWithTable,\n      table: handleTable,\n      tableCell: handleTableCell,\n      tableRow: handleTableRow\n    }\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {Table} node\n   */\n  function handleTable(node, _, state, info) {\n    return serializeData(handleTableAsData(node, state, info), node.align)\n  }\n\n  /**\n   * This function isn’t really used normally, because we handle rows at the\n   * table level.\n   * But, if someone passes in a table row, this ensures we make somewhat sense.\n   *\n   * @type {ToMarkdownHandle}\n   * @param {TableRow} node\n   */\n  function handleTableRow(node, _, state, info) {\n    const row = handleTableRowAsData(node, state, info)\n    const value = serializeData([row])\n    // `markdown-table` will always add an align row\n    return value.slice(0, value.indexOf('\\n'))\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {TableCell} node\n   */\n  function handleTableCell(node, _, state, info) {\n    const exit = state.enter('tableCell')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...info,\n      before: around,\n      after: around\n    })\n    subexit()\n    exit()\n    return value\n  }\n\n  /**\n   * @param {Array<Array<string>>} matrix\n   * @param {Array<string | null | undefined> | null | undefined} [align]\n   */\n  function serializeData(matrix, align) {\n    return markdownTable(matrix, {\n      align,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      alignDelimiters,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      padding,\n      // @ts-expect-error: `markdown-table` types should support `null`.\n      stringLength\n    })\n  }\n\n  /**\n   * @param {Table} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<Array<string>>} */\n    const result = []\n    const subexit = state.enter('table')\n\n    while (++index < children.length) {\n      result[index] = handleTableRowAsData(children[index], state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @param {TableRow} node\n   * @param {State} state\n   * @param {Info} info\n   */\n  function handleTableRowAsData(node, state, info) {\n    const children = node.children\n    let index = -1\n    /** @type {Array<string>} */\n    const result = []\n    const subexit = state.enter('tableRow')\n\n    while (++index < children.length) {\n      // Note: the positional info as used here is incorrect.\n      // Making it correct would be impossible due to aligning cells?\n      // And it would need copy/pasting `markdown-table` into this project.\n      result[index] = handleTableCell(children[index], node, state, info)\n    }\n\n    subexit()\n\n    return result\n  }\n\n  /**\n   * @type {ToMarkdownHandle}\n   * @param {InlineCode} node\n   */\n  function inlineCodeWithTable(node, parent, state) {\n    let value = defaultHandlers.inlineCode(node, parent, state)\n\n    if (state.stack.includes('tableCell')) {\n      value = value.replace(/\\|/g, '\\\\$&')\n    }\n\n    return value\n  }\n}\n","/**\n * @import {Blockquote, Parents} from 'mdast'\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Blockquote} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function blockquote(node, _, state, info) {\n  const exit = state.enter('blockquote')\n  const tracker = state.createTracker(info)\n  tracker.move('> ')\n  tracker.shift(2)\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return '>' + (blank ? '' : ' ') + line\n}\n","/**\n * @import {ConstructName, Unsafe} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe} pattern\n * @returns {boolean}\n */\nexport function patternInScope(stack, pattern) {\n  return (\n    listInScope(stack, pattern.inConstruct, true) &&\n    !listInScope(stack, pattern.notInConstruct, false)\n  )\n}\n\n/**\n * @param {Array<ConstructName>} stack\n * @param {Unsafe['inConstruct']} list\n * @param {boolean} none\n * @returns {boolean}\n */\nfunction listInScope(stack, list, none) {\n  if (typeof list === 'string') {\n    list = [list]\n  }\n\n  if (!list || list.length === 0) {\n    return none\n  }\n\n  let index = -1\n\n  while (++index < list.length) {\n    if (stack.includes(list[index])) {\n      return true\n    }\n  }\n\n  return false\n}\n","/**\n * @import {Break, Parents} from 'mdast'\n * @import {Info, State} from 'mdast-util-to-markdown'\n */\n\nimport {patternInScope} from '../util/pattern-in-scope.js'\n\n/**\n * @param {Break} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function hardBreak(_, _1, state, info) {\n  let index = -1\n\n  while (++index < state.unsafe.length) {\n    // If we can’t put eols in this construct (setext headings, tables), use a\n    // space instead.\n    if (\n      state.unsafe[index].character === '\\n' &&\n      patternInScope(state.stack, state.unsafe[index])\n    ) {\n      return /[ \\t]/.test(info.before) ? '' : ' '\n    }\n  }\n\n  return '\\\\\\n'\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {Code, Parents} from 'mdast'\n */\n\nimport {longestStreak} from 'longest-streak'\nimport {formatCodeAsIndented} from '../util/format-code-as-indented.js'\nimport {checkFence} from '../util/check-fence.js'\n\n/**\n * @param {Code} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function code(node, _, state, info) {\n  const marker = checkFence(state)\n  const raw = node.value || ''\n  const suffix = marker === '`' ? 'GraveAccent' : 'Tilde'\n\n  if (formatCodeAsIndented(node, state)) {\n    const exit = state.enter('codeIndented')\n    const value = state.indentLines(raw, map)\n    exit()\n    return value\n  }\n\n  const tracker = state.createTracker(info)\n  const sequence = marker.repeat(Math.max(longestStreak(raw, marker) + 1, 3))\n  const exit = state.enter('codeFenced')\n  let value = tracker.move(sequence)\n\n  if (node.lang) {\n    const subexit = state.enter(`codeFencedLang${suffix}`)\n    value += tracker.move(\n      state.safe(node.lang, {\n        before: value,\n        after: ' ',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  if (node.lang && node.meta) {\n    const subexit = state.enter(`codeFencedMeta${suffix}`)\n    value += tracker.move(' ')\n    value += tracker.move(\n      state.safe(node.meta, {\n        before: value,\n        after: '\\n',\n        encode: ['`'],\n        ...tracker.current()\n      })\n    )\n    subexit()\n  }\n\n  value += tracker.move('\\n')\n\n  if (raw) {\n    value += tracker.move(raw + '\\n')\n  }\n\n  value += tracker.move(sequence)\n  exit()\n  return value\n}\n\n/** @type {Map} */\nfunction map(line, _, blank) {\n  return (blank ? '' : '    ') + line\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['quote'], null | undefined>}\n */\nexport function checkQuote(state) {\n  const marker = state.options.quote || '\"'\n\n  if (marker !== '\"' && marker !== \"'\") {\n    throw new Error(\n      'Cannot serialize title with `' +\n        marker +\n        '` for `options.quote`, expected `\"`, or `\\'`'\n    )\n  }\n\n  return marker\n}\n","/**\n * Encode a code point as a character reference.\n *\n * @param {number} code\n *   Code point to encode.\n * @returns {string}\n *   Encoded character reference.\n */\nexport function encodeCharacterReference(code) {\n  return '&#x' + code.toString(16).toUpperCase() + ';'\n}\n","/**\n * @import {EncodeSides} from '../types.js'\n */\n\nimport {classifyCharacter} from 'micromark-util-classify-character'\n\n/**\n * Check whether to encode (as a character reference) the characters\n * surrounding an attention run.\n *\n * Which characters are around an attention run influence whether it works or\n * not.\n *\n * See <https://github.com/orgs/syntax-tree/discussions/60> for more info.\n * See this markdown in a particular renderer to see what works:\n *\n * ```markdown\n * |                         | A (letter inside) | B (punctuation inside) | C (whitespace inside) | D (nothing inside) |\n * | ----------------------- | ----------------- | ---------------------- | --------------------- | ------------------ |\n * | 1 (letter outside)      | x*y*z             | x*.*z                  | x* *z                 | x**z               |\n * | 2 (punctuation outside) | .*y*.             | .*.*.                  | .* *.                 | .**.               |\n * | 3 (whitespace outside)  | x *y* z           | x *.* z                | x * * z               | x ** z             |\n * | 4 (nothing outside)     | *x*               | *.*                    | * *                   | **                 |\n * ```\n *\n * @param {number} outside\n *   Code point on the outer side of the run.\n * @param {number} inside\n *   Code point on the inner side of the run.\n * @param {'*' | '_'} marker\n *   Marker of the run.\n *   Underscores are handled more strictly (they form less often) than\n *   asterisks.\n * @returns {EncodeSides}\n *   Whether to encode characters.\n */\n// Important: punctuation must never be encoded.\n// Punctuation is solely used by markdown constructs.\n// And by encoding itself.\n// Encoding them will break constructs or double encode things.\nexport function encodeInfo(outside, inside, marker) {\n  const outsideKind = classifyCharacter(outside)\n  const insideKind = classifyCharacter(inside)\n\n  // Letter outside:\n  if (outsideKind === undefined) {\n    return insideKind === undefined\n      ? // Letter inside:\n        // we have to encode *both* letters for `_` as it is looser.\n        // it already forms for `*` (and GFMs `~`).\n        marker === '_'\n        ? {inside: true, outside: true}\n        : {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (letter, whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: encode outer (letter)\n          {inside: false, outside: true}\n  }\n\n  // Whitespace outside:\n  if (outsideKind === 1) {\n    return insideKind === undefined\n      ? // Letter inside: already forms.\n        {inside: false, outside: false}\n      : insideKind === 1\n        ? // Whitespace inside: encode both (whitespace).\n          {inside: true, outside: true}\n        : // Punctuation inside: already forms.\n          {inside: false, outside: false}\n  }\n\n  // Punctuation outside:\n  return insideKind === undefined\n    ? // Letter inside: already forms.\n      {inside: false, outside: false}\n    : insideKind === 1\n      ? // Whitespace inside: encode inner (whitespace).\n        {inside: true, outside: false}\n      : // Punctuation inside: already forms.\n        {inside: false, outside: false}\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Emphasis, Parents} from 'mdast'\n */\n\nimport {checkEmphasis} from '../util/check-emphasis.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nemphasis.peek = emphasisPeek\n\n/**\n * @param {Emphasis} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function emphasis(node, _, state, info) {\n  const marker = checkEmphasis(state)\n  const exit = state.enter('emphasis')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Emphasis} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction emphasisPeek(_, _1, state) {\n  return state.options.emphasis || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['emphasis'], null | undefined>}\n */\nexport function checkEmphasis(state) {\n  const marker = state.options.emphasis || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize emphasis with `' +\n        marker +\n        '` for `options.emphasis`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @typedef {import('mdast').Nodes} Nodes\n *\n * @typedef Options\n *   Configuration (optional).\n * @property {boolean | null | undefined} [includeImageAlt=true]\n *   Whether to use `alt` for `image`s (default: `true`).\n * @property {boolean | null | undefined} [includeHtml=true]\n *   Whether to use `value` of HTML (default: `true`).\n */\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Get the text content of a node or list of nodes.\n *\n * Prefers the node’s plain-text fields, otherwise serializes its children,\n * and if the given value is an array, serialize the nodes in it.\n *\n * @param {unknown} [value]\n *   Thing to serialize, typically `Node`.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {string}\n *   Serialized `value`.\n */\nexport function toString(value, options) {\n  const settings = options || emptyOptions\n  const includeImageAlt =\n    typeof settings.includeImageAlt === 'boolean'\n      ? settings.includeImageAlt\n      : true\n  const includeHtml =\n    typeof settings.includeHtml === 'boolean' ? settings.includeHtml : true\n\n  return one(value, includeImageAlt, includeHtml)\n}\n\n/**\n * One node or several nodes.\n *\n * @param {unknown} value\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized node.\n */\nfunction one(value, includeImageAlt, includeHtml) {\n  if (node(value)) {\n    if ('value' in value) {\n      return value.type === 'html' && !includeHtml ? '' : value.value\n    }\n\n    if (includeImageAlt && 'alt' in value && value.alt) {\n      return value.alt\n    }\n\n    if ('children' in value) {\n      return all(value.children, includeImageAlt, includeHtml)\n    }\n  }\n\n  if (Array.isArray(value)) {\n    return all(value, includeImageAlt, includeHtml)\n  }\n\n  return ''\n}\n\n/**\n * Serialize a list of nodes.\n *\n * @param {Array<unknown>} values\n *   Thing to serialize.\n * @param {boolean} includeImageAlt\n *   Include image `alt`s.\n * @param {boolean} includeHtml\n *   Include HTML.\n * @returns {string}\n *   Serialized nodes.\n */\nfunction all(values, includeImageAlt, includeHtml) {\n  /** @type {Array<string>} */\n  const result = []\n  let index = -1\n\n  while (++index < values.length) {\n    result[index] = one(values[index], includeImageAlt, includeHtml)\n  }\n\n  return result.join('')\n}\n\n/**\n * Check if `value` looks like a node.\n *\n * @param {unknown} value\n *   Thing.\n * @returns {value is Nodes}\n *   Whether `value` is a node.\n */\nfunction node(value) {\n  return Boolean(value && typeof value === 'object')\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Heading} from 'mdast'\n */\n\nimport {EXIT, visit} from 'unist-util-visit'\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Heading} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatHeadingAsSetext(node, state) {\n  let literalWithBreak = false\n\n  // Look for literals with a line break.\n  // Note that this also\n  visit(node, function (node) {\n    if (\n      ('value' in node && /\\r?\\n|\\r/.test(node.value)) ||\n      node.type === 'break'\n    ) {\n      literalWithBreak = true\n      return EXIT\n    }\n  })\n\n  return Boolean(\n    (!node.depth || node.depth < 3) &&\n      toString(node) &&\n      (state.options.setext || literalWithBreak)\n  )\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @import {Html} from 'mdast'\n */\n\nhtml.peek = htmlPeek\n\n/**\n * @param {Html} node\n * @returns {string}\n */\nexport function html(node) {\n  return node.value || ''\n}\n\n/**\n * @returns {string}\n */\nfunction htmlPeek() {\n  return '<'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Image, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\nimage.peek = imagePeek\n\n/**\n * @param {Image} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function image(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('image')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  value += tracker.move(\n    state.safe(node.alt, {before: value, after: ']', ...tracker.current()})\n  )\n  value += tracker.move('](')\n\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n  exit()\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imagePeek() {\n  return '!'\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {ImageReference, Parents} from 'mdast'\n */\n\nimageReference.peek = imageReferencePeek\n\n/**\n * @param {ImageReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function imageReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('imageReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('![')\n  const alt = state.safe(node.alt, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(alt + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !alt || alt !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction imageReferencePeek() {\n  return '!'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {InlineCode, Parents} from 'mdast'\n */\n\ninlineCode.peek = inlineCodePeek\n\n/**\n * @param {InlineCode} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nexport function inlineCode(node, _, state) {\n  let value = node.value || ''\n  let sequence = '`'\n  let index = -1\n\n  // If there is a single grave accent on its own in the code, use a fence of\n  // two.\n  // If there are two in a row, use one.\n  while (new RegExp('(^|[^`])' + sequence + '([^`]|$)').test(value)) {\n    sequence += '`'\n  }\n\n  // If this is not just spaces or eols (tabs don’t count), and either the\n  // first or last character are a space, eol, or tick, then pad with spaces.\n  if (\n    /[^ \\r\\n]/.test(value) &&\n    ((/^[ \\r\\n]/.test(value) && /[ \\r\\n]$/.test(value)) || /^`|`$/.test(value))\n  ) {\n    value = ' ' + value + ' '\n  }\n\n  // We have a potential problem: certain characters after eols could result in\n  // blocks being seen.\n  // For example, if someone injected the string `'\\n# b'`, then that would\n  // result in an ATX heading.\n  // We can’t escape characters in `inlineCode`, but because eols are\n  // transformed to spaces when going from markdown to HTML anyway, we can swap\n  // them out.\n  while (++index < state.unsafe.length) {\n    const pattern = state.unsafe[index]\n    const expression = state.compilePattern(pattern)\n    /** @type {RegExpExecArray | null} */\n    let match\n\n    // Only look for `atBreak`s.\n    // Btw: note that `atBreak` patterns will always start the regex at LF or\n    // CR.\n    if (!pattern.atBreak) continue\n\n    while ((match = expression.exec(value))) {\n      let position = match.index\n\n      // Support CRLF (patterns only look for one of the characters).\n      if (\n        value.charCodeAt(position) === 10 /* `\\n` */ &&\n        value.charCodeAt(position - 1) === 13 /* `\\r` */\n      ) {\n        position--\n      }\n\n      value = value.slice(0, position) + ' ' + value.slice(match.index + 1)\n    }\n  }\n\n  return sequence + value + sequence\n}\n\n/**\n * @returns {string}\n */\nfunction inlineCodePeek() {\n  return '`'\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Link} from 'mdast'\n */\n\nimport {toString} from 'mdast-util-to-string'\n\n/**\n * @param {Link} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatLinkAsAutolink(node, state) {\n  const raw = toString(node)\n\n  return Boolean(\n    !state.options.resourceLink &&\n      // If there’s a url…\n      node.url &&\n      // And there’s a no title…\n      !node.title &&\n      // And the content of `node` is a single text node…\n      node.children &&\n      node.children.length === 1 &&\n      node.children[0].type === 'text' &&\n      // And if the url is the same as the content…\n      (raw === node.url || 'mailto:' + raw === node.url) &&\n      // And that starts w/ a protocol…\n      /^[a-z][a-z+.-]+:/i.test(node.url) &&\n      // And that doesn’t contain ASCII control codes (character escapes and\n      // references don’t work), space, or angle brackets…\n      !/[\\0- <>\\u007F]/.test(node.url)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Link, Parents} from 'mdast'\n * @import {Exit} from '../types.js'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\nimport {formatLinkAsAutolink} from '../util/format-link-as-autolink.js'\n\nlink.peek = linkPeek\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function link(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const tracker = state.createTracker(info)\n  /** @type {Exit} */\n  let exit\n  /** @type {Exit} */\n  let subexit\n\n  if (formatLinkAsAutolink(node, state)) {\n    // Hide the fact that we’re in phrasing, because escapes don’t work.\n    const stack = state.stack\n    state.stack = []\n    exit = state.enter('autolink')\n    let value = tracker.move('<')\n    value += tracker.move(\n      state.containerPhrasing(node, {\n        before: value,\n        after: '>',\n        ...tracker.current()\n      })\n    )\n    value += tracker.move('>')\n    exit()\n    state.stack = stack\n    return value\n  }\n\n  exit = state.enter('link')\n  subexit = state.enter('label')\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.containerPhrasing(node, {\n      before: value,\n      after: '](',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move('](')\n  subexit()\n\n  if (\n    // If there’s no url but there is a title…\n    (!node.url && node.title) ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : ')',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  value += tracker.move(')')\n\n  exit()\n  return value\n}\n\n/**\n * @param {Link} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @returns {string}\n */\nfunction linkPeek(node, _, state) {\n  return formatLinkAsAutolink(node, state) ? '<' : '['\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {LinkReference, Parents} from 'mdast'\n */\n\nlinkReference.peek = linkReferencePeek\n\n/**\n * @param {LinkReference} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function linkReference(node, _, state, info) {\n  const type = node.referenceType\n  const exit = state.enter('linkReference')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  const text = state.containerPhrasing(node, {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  value += tracker.move(text + '][')\n\n  subexit()\n  // Hide the fact that we’re in phrasing, because escapes don’t work.\n  const stack = state.stack\n  state.stack = []\n  subexit = state.enter('reference')\n  // Note: for proper tracking, we should reset the output positions when we end\n  // up making a `shortcut` reference, because then there is no brace output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  const reference = state.safe(state.associationId(node), {\n    before: value,\n    after: ']',\n    ...tracker.current()\n  })\n  subexit()\n  state.stack = stack\n  exit()\n\n  if (type === 'full' || !text || text !== reference) {\n    value += tracker.move(reference + ']')\n  } else if (type === 'shortcut') {\n    // Remove the unwanted `[`.\n    value = value.slice(0, -1)\n  } else {\n    value += tracker.move(']')\n  }\n\n  return value\n}\n\n/**\n * @returns {string}\n */\nfunction linkReferencePeek() {\n  return '['\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBullet(state) {\n  const marker = state.options.bullet || '*'\n\n  if (marker !== '*' && marker !== '+' && marker !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bullet`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['rule'], null | undefined>}\n */\nexport function checkRule(state) {\n  const marker = state.options.rule || '*'\n\n  if (marker !== '*' && marker !== '-' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize rules with `' +\n        marker +\n        '` for `options.rule`, expected `*`, `-`, or `_`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('mdast').Html} Html\n * @typedef {import('mdast').PhrasingContent} PhrasingContent\n */\n\nimport {convert} from 'unist-util-is'\n\n/**\n * Check if the given value is *phrasing content*.\n *\n * > 👉 **Note**: Excludes `html`, which can be both phrasing or flow.\n *\n * @param node\n *   Thing to check, typically `Node`.\n * @returns\n *   Whether `value` is phrasing content.\n */\n\nexport const phrasing =\n  /** @type {(node?: unknown) => node is Exclude<PhrasingContent, Html>} */\n  (\n    convert([\n      'break',\n      'delete',\n      'emphasis',\n      // To do: next major: removed since footnotes were added to GFM.\n      'footnote',\n      'footnoteReference',\n      'image',\n      'imageReference',\n      'inlineCode',\n      // Enabled by `mdast-util-math`:\n      'inlineMath',\n      'link',\n      'linkReference',\n      // Enabled by `mdast-util-mdx`:\n      'mdxJsxTextElement',\n      // Enabled by `mdast-util-mdx`:\n      'mdxTextExpression',\n      'strong',\n      'text',\n      // Enabled by `mdast-util-directive`:\n      'textDirective'\n    ])\n  )\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Strong} from 'mdast'\n */\n\nimport {checkStrong} from '../util/check-strong.js'\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {encodeInfo} from '../util/encode-info.js'\n\nstrong.peek = strongPeek\n\n/**\n * @param {Strong} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function strong(node, _, state, info) {\n  const marker = checkStrong(state)\n  const exit = state.enter('strong')\n  const tracker = state.createTracker(info)\n  const before = tracker.move(marker + marker)\n\n  let between = tracker.move(\n    state.containerPhrasing(node, {\n      after: marker,\n      before,\n      ...tracker.current()\n    })\n  )\n  const betweenHead = between.charCodeAt(0)\n  const open = encodeInfo(\n    info.before.charCodeAt(info.before.length - 1),\n    betweenHead,\n    marker\n  )\n\n  if (open.inside) {\n    between = encodeCharacterReference(betweenHead) + between.slice(1)\n  }\n\n  const betweenTail = between.charCodeAt(between.length - 1)\n  const close = encodeInfo(info.after.charCodeAt(0), betweenTail, marker)\n\n  if (close.inside) {\n    between = between.slice(0, -1) + encodeCharacterReference(betweenTail)\n  }\n\n  const after = tracker.move(marker + marker)\n\n  exit()\n\n  state.attentionEncodeSurroundingInfo = {\n    after: close.outside,\n    before: open.outside\n  }\n  return before + between + after\n}\n\n/**\n * @param {Strong} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nfunction strongPeek(_, _1, state) {\n  return state.options.strong || '*'\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['strong'], null | undefined>}\n */\nexport function checkStrong(state) {\n  const marker = state.options.strong || '*'\n\n  if (marker !== '*' && marker !== '_') {\n    throw new Error(\n      'Cannot serialize strong with `' +\n        marker +\n        '` for `options.strong`, expected `*`, or `_`'\n    )\n  }\n\n  return marker\n}\n","import {blockquote} from './blockquote.js'\nimport {hardBreak} from './break.js'\nimport {code} from './code.js'\nimport {definition} from './definition.js'\nimport {emphasis} from './emphasis.js'\nimport {heading} from './heading.js'\nimport {html} from './html.js'\nimport {image} from './image.js'\nimport {imageReference} from './image-reference.js'\nimport {inlineCode} from './inline-code.js'\nimport {link} from './link.js'\nimport {linkReference} from './link-reference.js'\nimport {list} from './list.js'\nimport {listItem} from './list-item.js'\nimport {paragraph} from './paragraph.js'\nimport {root} from './root.js'\nimport {strong} from './strong.js'\nimport {text} from './text.js'\nimport {thematicBreak} from './thematic-break.js'\n\n/**\n * Default (CommonMark) handlers.\n */\nexport const handle = {\n  blockquote,\n  break: hardBreak,\n  code,\n  definition,\n  emphasis,\n  hardBreak,\n  heading,\n  html,\n  image,\n  imageReference,\n  inlineCode,\n  link,\n  linkReference,\n  list,\n  listItem,\n  paragraph,\n  root,\n  strong,\n  text,\n  thematicBreak\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['fence'], null | undefined>}\n */\nexport function checkFence(state) {\n  const marker = state.options.fence || '`'\n\n  if (marker !== '`' && marker !== '~') {\n    throw new Error(\n      'Cannot serialize code with `' +\n        marker +\n        '` for `options.fence`, expected `` ` `` or `~`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Code} from 'mdast'\n */\n\n/**\n * @param {Code} node\n * @param {State} state\n * @returns {boolean}\n */\nexport function formatCodeAsIndented(node, state) {\n  return Boolean(\n    state.options.fences === false &&\n      node.value &&\n      // If there’s no info…\n      !node.lang &&\n      // And there’s a non-whitespace character…\n      /[^ \\r\\n]/.test(node.value) &&\n      // And the value doesn’t start or end in a blank…\n      !/^[\\t ]*(?:[\\r\\n]|$)|(?:^|[\\r\\n])[\\t ]*$/.test(node.value)\n  )\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Definition, Parents} from 'mdast'\n */\n\nimport {checkQuote} from '../util/check-quote.js'\n\n/**\n * @param {Definition} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function definition(node, _, state, info) {\n  const quote = checkQuote(state)\n  const suffix = quote === '\"' ? 'Quote' : 'Apostrophe'\n  const exit = state.enter('definition')\n  let subexit = state.enter('label')\n  const tracker = state.createTracker(info)\n  let value = tracker.move('[')\n  value += tracker.move(\n    state.safe(state.associationId(node), {\n      before: value,\n      after: ']',\n      ...tracker.current()\n    })\n  )\n  value += tracker.move(']: ')\n\n  subexit()\n\n  if (\n    // If there’s no url, or…\n    !node.url ||\n    // If there are control characters or whitespace.\n    /[\\0- \\u007F]/.test(node.url)\n  ) {\n    subexit = state.enter('destinationLiteral')\n    value += tracker.move('<')\n    value += tracker.move(\n      state.safe(node.url, {before: value, after: '>', ...tracker.current()})\n    )\n    value += tracker.move('>')\n  } else {\n    // No whitespace, raw is prettier.\n    subexit = state.enter('destinationRaw')\n    value += tracker.move(\n      state.safe(node.url, {\n        before: value,\n        after: node.title ? ' ' : '\\n',\n        ...tracker.current()\n      })\n    )\n  }\n\n  subexit()\n\n  if (node.title) {\n    subexit = state.enter(`title${suffix}`)\n    value += tracker.move(' ' + quote)\n    value += tracker.move(\n      state.safe(node.title, {\n        before: value,\n        after: quote,\n        ...tracker.current()\n      })\n    )\n    value += tracker.move(quote)\n    subexit()\n  }\n\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Heading, Parents} from 'mdast'\n */\n\nimport {encodeCharacterReference} from '../util/encode-character-reference.js'\nimport {formatHeadingAsSetext} from '../util/format-heading-as-setext.js'\n\n/**\n * @param {Heading} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function heading(node, _, state, info) {\n  const rank = Math.max(Math.min(6, node.depth || 1), 1)\n  const tracker = state.createTracker(info)\n\n  if (formatHeadingAsSetext(node, state)) {\n    const exit = state.enter('headingSetext')\n    const subexit = state.enter('phrasing')\n    const value = state.containerPhrasing(node, {\n      ...tracker.current(),\n      before: '\\n',\n      after: '\\n'\n    })\n    subexit()\n    exit()\n\n    return (\n      value +\n      '\\n' +\n      (rank === 1 ? '=' : '-').repeat(\n        // The whole size…\n        value.length -\n          // Minus the position of the character after the last EOL (or\n          // 0 if there is none)…\n          (Math.max(value.lastIndexOf('\\r'), value.lastIndexOf('\\n')) + 1)\n      )\n    )\n  }\n\n  const sequence = '#'.repeat(rank)\n  const exit = state.enter('headingAtx')\n  const subexit = state.enter('phrasing')\n\n  // Note: for proper tracking, we should reset the output positions when there\n  // is no content returned, because then the space is not output.\n  // Practically, in that case, there is no content, so it doesn’t matter that\n  // we’ve tracked one too many characters.\n  tracker.move(sequence + ' ')\n\n  let value = state.containerPhrasing(node, {\n    before: '# ',\n    after: '\\n',\n    ...tracker.current()\n  })\n\n  if (/^[\\t ]/.test(value)) {\n    // To do: what effect has the character reference on tracking?\n    value = encodeCharacterReference(value.charCodeAt(0)) + value.slice(1)\n  }\n\n  value = value ? sequence + ' ' + value : sequence\n\n  if (state.options.closeAtx) {\n    value += ' ' + sequence\n  }\n\n  subexit()\n  exit()\n\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {List, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkBulletOther} from '../util/check-bullet-other.js'\nimport {checkBulletOrdered} from '../util/check-bullet-ordered.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {List} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function list(node, parent, state, info) {\n  const exit = state.enter('list')\n  const bulletCurrent = state.bulletCurrent\n  /** @type {string} */\n  let bullet = node.ordered ? checkBulletOrdered(state) : checkBullet(state)\n  /** @type {string} */\n  const bulletOther = node.ordered\n    ? bullet === '.'\n      ? ')'\n      : '.'\n    : checkBulletOther(state)\n  let useDifferentMarker =\n    parent && state.bulletLastUsed ? bullet === state.bulletLastUsed : false\n\n  if (!node.ordered) {\n    const firstListItem = node.children ? node.children[0] : undefined\n\n    // If there’s an empty first list item directly in two list items,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * - *\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (\n      // Bullet could be used as a thematic break marker:\n      (bullet === '*' || bullet === '-') &&\n      // Empty first list item:\n      firstListItem &&\n      (!firstListItem.children || !firstListItem.children[0]) &&\n      // Directly in two other list items:\n      state.stack[state.stack.length - 1] === 'list' &&\n      state.stack[state.stack.length - 2] === 'listItem' &&\n      state.stack[state.stack.length - 3] === 'list' &&\n      state.stack[state.stack.length - 4] === 'listItem' &&\n      // That are each the first child.\n      state.indexStack[state.indexStack.length - 1] === 0 &&\n      state.indexStack[state.indexStack.length - 2] === 0 &&\n      state.indexStack[state.indexStack.length - 3] === 0\n    ) {\n      useDifferentMarker = true\n    }\n\n    // If there’s a thematic break at the start of the first list item,\n    // we have to use a different bullet:\n    //\n    // ```markdown\n    // * ---\n    // ```\n    //\n    // …because otherwise it would become one big thematic break.\n    if (checkRule(state) === bullet && firstListItem) {\n      let index = -1\n\n      while (++index < node.children.length) {\n        const item = node.children[index]\n\n        if (\n          item &&\n          item.type === 'listItem' &&\n          item.children &&\n          item.children[0] &&\n          item.children[0].type === 'thematicBreak'\n        ) {\n          useDifferentMarker = true\n          break\n        }\n      }\n    }\n  }\n\n  if (useDifferentMarker) {\n    bullet = bulletOther\n  }\n\n  state.bulletCurrent = bullet\n  const value = state.containerFlow(node, info)\n  state.bulletLastUsed = bullet\n  state.bulletCurrent = bulletCurrent\n  exit()\n  return value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bulletOrdered'], null | undefined>}\n */\nexport function checkBulletOrdered(state) {\n  const marker = state.options.bulletOrdered || '.'\n\n  if (marker !== '.' && marker !== ')') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        marker +\n        '` for `options.bulletOrdered`, expected `.` or `)`'\n    )\n  }\n\n  return marker\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\nimport {checkBullet} from './check-bullet.js'\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['bullet'], null | undefined>}\n */\nexport function checkBulletOther(state) {\n  const bullet = checkBullet(state)\n  const bulletOther = state.options.bulletOther\n\n  if (!bulletOther) {\n    return bullet === '*' ? '-' : '*'\n  }\n\n  if (bulletOther !== '*' && bulletOther !== '+' && bulletOther !== '-') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        bulletOther +\n        '` for `options.bulletOther`, expected `*`, `+`, or `-`'\n    )\n  }\n\n  if (bulletOther === bullet) {\n    throw new Error(\n      'Expected `bullet` (`' +\n        bullet +\n        '`) and `bulletOther` (`' +\n        bulletOther +\n        '`) to be different'\n    )\n  }\n\n  return bulletOther\n}\n","/**\n * @import {Info, Map, State} from 'mdast-util-to-markdown'\n * @import {ListItem, Parents} from 'mdast'\n */\n\nimport {checkBullet} from '../util/check-bullet.js'\nimport {checkListItemIndent} from '../util/check-list-item-indent.js'\n\n/**\n * @param {ListItem} node\n * @param {Parents | undefined} parent\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function listItem(node, parent, state, info) {\n  const listItemIndent = checkListItemIndent(state)\n  let bullet = state.bulletCurrent || checkBullet(state)\n\n  // Add the marker value for ordered lists.\n  if (parent && parent.type === 'list' && parent.ordered) {\n    bullet =\n      (typeof parent.start === 'number' && parent.start > -1\n        ? parent.start\n        : 1) +\n      (state.options.incrementListMarker === false\n        ? 0\n        : parent.children.indexOf(node)) +\n      bullet\n  }\n\n  let size = bullet.length + 1\n\n  if (\n    listItemIndent === 'tab' ||\n    (listItemIndent === 'mixed' &&\n      ((parent && parent.type === 'list' && parent.spread) || node.spread))\n  ) {\n    size = Math.ceil(size / 4) * 4\n  }\n\n  const tracker = state.createTracker(info)\n  tracker.move(bullet + ' '.repeat(size - bullet.length))\n  tracker.shift(size)\n  const exit = state.enter('listItem')\n  const value = state.indentLines(\n    state.containerFlow(node, tracker.current()),\n    map\n  )\n  exit()\n\n  return value\n\n  /** @type {Map} */\n  function map(line, index, blank) {\n    if (index) {\n      return (blank ? '' : ' '.repeat(size)) + line\n    }\n\n    return (blank ? bullet : bullet + ' '.repeat(size - bullet.length)) + line\n  }\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['listItemIndent'], null | undefined>}\n */\nexport function checkListItemIndent(state) {\n  const style = state.options.listItemIndent || 'one'\n\n  if (style !== 'tab' && style !== 'one' && style !== 'mixed') {\n    throw new Error(\n      'Cannot serialize items with `' +\n        style +\n        '` for `options.listItemIndent`, expected `tab`, `one`, or `mixed`'\n    )\n  }\n\n  return style\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Paragraph, Parents} from 'mdast'\n */\n\n/**\n * @param {Paragraph} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function paragraph(node, _, state, info) {\n  const exit = state.enter('paragraph')\n  const subexit = state.enter('phrasing')\n  const value = state.containerPhrasing(node, info)\n  subexit()\n  exit()\n  return value\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Root} from 'mdast'\n */\n\nimport {phrasing} from 'mdast-util-phrasing'\n\n/**\n * @param {Root} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function root(node, _, state, info) {\n  // Note: `html` nodes are ambiguous.\n  const hasPhrasing = node.children.some(function (d) {\n    return phrasing(d)\n  })\n\n  const container = hasPhrasing ? state.containerPhrasing : state.containerFlow\n  return container.call(state, node, info)\n}\n","/**\n * @import {Info, State} from 'mdast-util-to-markdown'\n * @import {Parents, Text} from 'mdast'\n */\n\n/**\n * @param {Text} node\n * @param {Parents | undefined} _\n * @param {State} state\n * @param {Info} info\n * @returns {string}\n */\nexport function text(node, _, state, info) {\n  return state.safe(node.value, info)\n}\n","/**\n * @import {State} from 'mdast-util-to-markdown'\n * @import {Parents, ThematicBreak} from 'mdast'\n */\n\nimport {checkRuleRepetition} from '../util/check-rule-repetition.js'\nimport {checkRule} from '../util/check-rule.js'\n\n/**\n * @param {ThematicBreak} _\n * @param {Parents | undefined} _1\n * @param {State} state\n * @returns {string}\n */\nexport function thematicBreak(_, _1, state) {\n  const value = (\n    checkRule(state) + (state.options.ruleSpaces ? ' ' : '')\n  ).repeat(checkRuleRepetition(state))\n\n  return state.options.ruleSpaces ? value.slice(0, -1) : value\n}\n","/**\n * @import {Options, State} from 'mdast-util-to-markdown'\n */\n\n/**\n * @param {State} state\n * @returns {Exclude<Options['ruleRepetition'], null | undefined>}\n */\nexport function checkRuleRepetition(state) {\n  const repetition = state.options.ruleRepetition || 3\n\n  if (repetition < 3) {\n    throw new Error(\n      'Cannot serialize rules with repetition `' +\n        repetition +\n        '` for `options.ruleRepetition`, expected `3` or more'\n    )\n  }\n\n  return repetition\n}\n","/**\n * @typedef {import('mdast').ListItem} ListItem\n * @typedef {import('mdast').Paragraph} Paragraph\n * @typedef {import('mdast-util-from-markdown').CompileContext} CompileContext\n * @typedef {import('mdast-util-from-markdown').Extension} FromMarkdownExtension\n * @typedef {import('mdast-util-from-markdown').Handle} FromMarkdownHandle\n * @typedef {import('mdast-util-to-markdown').Options} ToMarkdownExtension\n * @typedef {import('mdast-util-to-markdown').Handle} ToMarkdownHandle\n */\n\nimport {ok as assert} from 'devlop'\nimport {defaultHandlers} from 'mdast-util-to-markdown'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM task\n * list items in markdown.\n *\n * @returns {FromMarkdownExtension}\n *   Extension for `mdast-util-from-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemFromMarkdown() {\n  return {\n    exit: {\n      taskListCheckValueChecked: exitCheck,\n      taskListCheckValueUnchecked: exitCheck,\n      paragraph: exitParagraphWithTaskListItem\n    }\n  }\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM task list\n * items in markdown.\n *\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM task list items.\n */\nexport function gfmTaskListItemToMarkdown() {\n  return {\n    unsafe: [{atBreak: true, character: '-', after: '[:|-]'}],\n    handlers: {listItem: listItemWithTaskListItem}\n  }\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitCheck(token) {\n  // We’re always in a paragraph, in a list item.\n  const node = this.stack[this.stack.length - 2]\n  assert(node.type === 'listItem')\n  node.checked = token.type === 'taskListCheckValueChecked'\n}\n\n/**\n * @this {CompileContext}\n * @type {FromMarkdownHandle}\n */\nfunction exitParagraphWithTaskListItem(token) {\n  const parent = this.stack[this.stack.length - 2]\n\n  if (\n    parent &&\n    parent.type === 'listItem' &&\n    typeof parent.checked === 'boolean'\n  ) {\n    const node = this.stack[this.stack.length - 1]\n    assert(node.type === 'paragraph')\n    const head = node.children[0]\n\n    if (head && head.type === 'text') {\n      const siblings = parent.children\n      let index = -1\n      /** @type {Paragraph | undefined} */\n      let firstParaghraph\n\n      while (++index < siblings.length) {\n        const sibling = siblings[index]\n        if (sibling.type === 'paragraph') {\n          firstParaghraph = sibling\n          break\n        }\n      }\n\n      if (firstParaghraph === node) {\n        // Must start with a space or a tab.\n        head.value = head.value.slice(1)\n\n        if (head.value.length === 0) {\n          node.children.shift()\n        } else if (\n          node.position &&\n          head.position &&\n          typeof head.position.start.offset === 'number'\n        ) {\n          head.position.start.column++\n          head.position.start.offset++\n          node.position.start = Object.assign({}, head.position.start)\n        }\n      }\n    }\n  }\n\n  this.exit(token)\n}\n\n/**\n * @type {ToMarkdownHandle}\n * @param {ListItem} node\n */\nfunction listItemWithTaskListItem(node, parent, state, info) {\n  const head = node.children[0]\n  const checkable =\n    typeof node.checked === 'boolean' && head && head.type === 'paragraph'\n  const checkbox = '[' + (node.checked ? 'x' : ' ') + '] '\n  const tracker = state.createTracker(info)\n\n  if (checkable) {\n    tracker.move(checkbox)\n  }\n\n  let value = defaultHandlers.listItem(node, parent, state, {\n    ...info,\n    ...tracker.current()\n  })\n\n  if (checkable) {\n    value = value.replace(/^(?:[*+-]|\\d+\\.)([\\r\\n]| {1,3})/, check)\n  }\n\n  return value\n\n  /**\n   * @param {string} $0\n   * @returns {string}\n   */\n  function check($0) {\n    return $0 + checkbox\n  }\n}\n","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Code, ConstructRecord, Event, Extension, Previous, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { asciiAlpha, asciiAlphanumeric, asciiControl, markdownLineEndingOrSpace, unicodePunctuation, unicodeWhitespace } from 'micromark-util-character';\nconst wwwPrefix = {\n  tokenize: tokenizeWwwPrefix,\n  partial: true\n};\nconst domain = {\n  tokenize: tokenizeDomain,\n  partial: true\n};\nconst path = {\n  tokenize: tokenizePath,\n  partial: true\n};\nconst trail = {\n  tokenize: tokenizeTrail,\n  partial: true\n};\nconst emailDomainDotTrail = {\n  tokenize: tokenizeEmailDomainDotTrail,\n  partial: true\n};\nconst wwwAutolink = {\n  name: 'wwwAutolink',\n  tokenize: tokenizeWwwAutolink,\n  previous: previousWww\n};\nconst protocolAutolink = {\n  name: 'protocolAutolink',\n  tokenize: tokenizeProtocolAutolink,\n  previous: previousProtocol\n};\nconst emailAutolink = {\n  name: 'emailAutolink',\n  tokenize: tokenizeEmailAutolink,\n  previous: previousEmail\n};\n\n/** @type {ConstructRecord} */\nconst text = {};\n\n/**\n * Create an extension for `micromark` to support GitHub autolink literal\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   autolink literal syntax.\n */\nexport function gfmAutolinkLiteral() {\n  return {\n    text\n  };\n}\n\n/** @type {Code} */\nlet code = 48;\n\n// Add alphanumerics.\nwhile (code < 123) {\n  text[code] = emailAutolink;\n  code++;\n  if (code === 58) code = 65;else if (code === 91) code = 97;\n}\ntext[43] = emailAutolink;\ntext[45] = emailAutolink;\ntext[46] = emailAutolink;\ntext[95] = emailAutolink;\ntext[72] = [emailAutolink, protocolAutolink];\ntext[104] = [emailAutolink, protocolAutolink];\ntext[87] = [emailAutolink, wwwAutolink];\ntext[119] = [emailAutolink, wwwAutolink];\n\n// To do: perform email autolink literals on events, afterwards.\n// That’s where `markdown-rs` and `cmark-gfm` perform it.\n// It should look for `@`, then for atext backwards, and then for a label\n// forwards.\n// To do: `mailto:`, `xmpp:` protocol as prefix.\n\n/**\n * Email autolink literal.\n *\n * ```markdown\n * > | a contact@example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailAutolink(effects, ok, nok) {\n  const self = this;\n  /** @type {boolean | undefined} */\n  let dot;\n  /** @type {boolean} */\n  let data;\n  return start;\n\n  /**\n   * Start of email autolink literal.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    if (!gfmAtext(code) || !previousEmail.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkEmail');\n    return atext(code);\n  }\n\n  /**\n   * In email atext.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function atext(code) {\n    if (gfmAtext(code)) {\n      effects.consume(code);\n      return atext;\n    }\n    if (code === 64) {\n      effects.consume(code);\n      return emailDomain;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In email domain.\n   *\n   * The reference code is a bit overly complex as it handles the `@`, of which\n   * there may be just one.\n   * Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L318>\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *               ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomain(code) {\n    // Dot followed by alphanumerical (not `-` or `_`).\n    if (code === 46) {\n      return effects.check(emailDomainDotTrail, emailDomainAfter, emailDomainDot)(code);\n    }\n\n    // Alphanumerical, `-`, and `_`.\n    if (code === 45 || code === 95 || asciiAlphanumeric(code)) {\n      data = true;\n      effects.consume(code);\n      return emailDomain;\n    }\n\n    // To do: `/` if xmpp.\n\n    // Note: normally we’d truncate trailing punctuation from the link.\n    // However, email autolink literals cannot contain any of those markers,\n    // except for `.`, but that can only occur if it isn’t trailing.\n    // So we can ignore truncating!\n    return emailDomainAfter(code);\n  }\n\n  /**\n   * In email domain, on dot that is not a trail.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainDot(code) {\n    effects.consume(code);\n    dot = true;\n    return emailDomain;\n  }\n\n  /**\n   * After email domain.\n   *\n   * ```markdown\n   * > | a contact@example.org b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function emailDomainAfter(code) {\n    // Domain must not be empty, must include a dot, and must end in alphabetical.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L332>.\n    if (data && dot && asciiAlpha(self.previous)) {\n      effects.exit('literalAutolinkEmail');\n      effects.exit('literalAutolink');\n      return ok(code);\n    }\n    return nok(code);\n  }\n}\n\n/**\n * `www` autolink literal.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwAutolink(effects, ok, nok) {\n  const self = this;\n  return wwwStart;\n\n  /**\n   * Start of www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwStart(code) {\n    if (code !== 87 && code !== 119 || !previousWww.call(self, self.previous) || previousUnbalanced(self.events)) {\n      return nok(code);\n    }\n    effects.enter('literalAutolink');\n    effects.enter('literalAutolinkWww');\n    // Note: we *check*, so we can discard the `www.` we parsed.\n    // If it worked, we consider it as a part of the domain.\n    return effects.check(wwwPrefix, effects.attempt(domain, effects.attempt(path, wwwAfter), nok), nok)(code);\n  }\n\n  /**\n   * After a www autolink literal.\n   *\n   * ```markdown\n   * > | www.example.com/a?b#c\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwAfter(code) {\n    effects.exit('literalAutolinkWww');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * Protocol autolink literal.\n *\n * ```markdown\n * > | a https://example.org b\n *       ^^^^^^^^^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeProtocolAutolink(effects, ok, nok) {\n  const self = this;\n  let buffer = '';\n  let seen = false;\n  return protocolStart;\n\n  /**\n   * Start of protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolStart(code) {\n    if ((code === 72 || code === 104) && previousProtocol.call(self, self.previous) && !previousUnbalanced(self.events)) {\n      effects.enter('literalAutolink');\n      effects.enter('literalAutolinkHttp');\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In protocol.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *     ^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolPrefixInside(code) {\n    // `5` is size of `https`\n    if (asciiAlpha(code) && buffer.length < 5) {\n      // @ts-expect-error: definitely number.\n      buffer += String.fromCodePoint(code);\n      effects.consume(code);\n      return protocolPrefixInside;\n    }\n    if (code === 58) {\n      const protocol = buffer.toLowerCase();\n      if (protocol === 'http' || protocol === 'https') {\n        effects.consume(code);\n        return protocolSlashesInside;\n      }\n    }\n    return nok(code);\n  }\n\n  /**\n   * In slashes.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *           ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolSlashesInside(code) {\n    if (code === 47) {\n      effects.consume(code);\n      if (seen) {\n        return afterProtocol;\n      }\n      seen = true;\n      return protocolSlashesInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After protocol, before domain.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *             ^\n   * ```\n   *\n   * @type {State}\n   */\n  function afterProtocol(code) {\n    // To do: this is different from `markdown-rs`:\n    // https://github.com/wooorm/markdown-rs/blob/b3a921c761309ae00a51fe348d8a43adbc54b518/src/construct/gfm_autolink_literal.rs#L172-L182\n    return code === null || asciiControl(code) || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || unicodePunctuation(code) ? nok(code) : effects.attempt(domain, effects.attempt(path, protocolAfter), nok)(code);\n  }\n\n  /**\n   * After a protocol autolink literal.\n   *\n   * ```markdown\n   * > | https://example.com/a?b#c\n   *                              ^\n   * ```\n   *\n   * @type {State}\n   */\n  function protocolAfter(code) {\n    effects.exit('literalAutolinkHttp');\n    effects.exit('literalAutolink');\n    return ok(code);\n  }\n}\n\n/**\n * `www` prefix.\n *\n * ```markdown\n * > | a www.example.org b\n *       ^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeWwwPrefix(effects, ok, nok) {\n  let size = 0;\n  return wwwPrefixInside;\n\n  /**\n   * In www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *     ^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixInside(code) {\n    if ((code === 87 || code === 119) && size < 3) {\n      size++;\n      effects.consume(code);\n      return wwwPrefixInside;\n    }\n    if (code === 46 && size === 3) {\n      effects.consume(code);\n      return wwwPrefixAfter;\n    }\n    return nok(code);\n  }\n\n  /**\n   * After www prefix.\n   *\n   * ```markdown\n   * > | www.example.com\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function wwwPrefixAfter(code) {\n    // If there is *anything*, we can link.\n    return code === null ? nok(code) : ok(code);\n  }\n}\n\n/**\n * Domain.\n *\n * ```markdown\n * > | a https://example.org b\n *               ^^^^^^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDomain(effects, ok, nok) {\n  /** @type {boolean | undefined} */\n  let underscoreInLastSegment;\n  /** @type {boolean | undefined} */\n  let underscoreInLastLastSegment;\n  /** @type {boolean | undefined} */\n  let seen;\n  return domainInside;\n\n  /**\n   * In domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *             ^^^^^^^^^^^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainInside(code) {\n    // Check whether this marker, which is a trailing punctuation\n    // marker, optionally followed by more trailing markers, and then\n    // followed by an end.\n    if (code === 46 || code === 95) {\n      return effects.check(trail, domainAfter, domainAtPunctuation)(code);\n    }\n\n    // GH documents that only alphanumerics (other than `-`, `.`, and `_`) can\n    // occur, which sounds like ASCII only, but they also support `www.點看.com`,\n    // so that’s Unicode.\n    // Instead of some new production for Unicode alphanumerics, markdown\n    // already has that for Unicode punctuation and whitespace, so use those.\n    // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L12>.\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code) || code !== 45 && unicodePunctuation(code)) {\n      return domainAfter(code);\n    }\n    seen = true;\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * In domain, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com\n   *                    ^\n   * ```\n   *\n   * @type {State}\n   */\n  function domainAtPunctuation(code) {\n    // There is an underscore in the last segment of the domain\n    if (code === 95) {\n      underscoreInLastSegment = true;\n    }\n    // Otherwise, it’s a `.`: save the last segment underscore in the\n    // penultimate segment slot.\n    else {\n      underscoreInLastLastSegment = underscoreInLastSegment;\n      underscoreInLastSegment = undefined;\n    }\n    effects.consume(code);\n    return domainInside;\n  }\n\n  /**\n   * After domain.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^\n   * ```\n   *\n   * @type {State} */\n  function domainAfter(code) {\n    // Note: that’s GH says a dot is needed, but it’s not true:\n    // <https://github.com/github/cmark-gfm/issues/279>\n    if (underscoreInLastLastSegment || underscoreInLastSegment || !seen) {\n      return nok(code);\n    }\n    return ok(code);\n  }\n}\n\n/**\n * Path.\n *\n * ```markdown\n * > | a https://example.org/stuff b\n *                          ^^^^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePath(effects, ok) {\n  let sizeOpen = 0;\n  let sizeClose = 0;\n  return pathInside;\n\n  /**\n   * In path.\n   *\n   * ```markdown\n   * > | https://example.com/a\n   *                        ^^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathInside(code) {\n    if (code === 40) {\n      sizeOpen++;\n      effects.consume(code);\n      return pathInside;\n    }\n\n    // To do: `markdown-rs` also needs this.\n    // If this is a paren, and there are less closings than openings,\n    // we don’t check for a trail.\n    if (code === 41 && sizeClose < sizeOpen) {\n      return pathAtPunctuation(code);\n    }\n\n    // Check whether this trailing punctuation marker is optionally\n    // followed by more trailing markers, and then followed\n    // by an end.\n    if (code === 33 || code === 34 || code === 38 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 60 || code === 63 || code === 93 || code === 95 || code === 126) {\n      return effects.check(trail, ok, pathAtPunctuation)(code);\n    }\n    if (code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n\n  /**\n   * In path, at potential trailing punctuation, that was not trailing.\n   *\n   * ```markdown\n   * > | https://example.com/a\"b\n   *                          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function pathAtPunctuation(code) {\n    // Count closing parens.\n    if (code === 41) {\n      sizeClose++;\n    }\n    effects.consume(code);\n    return pathInside;\n  }\n}\n\n/**\n * Trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the entire trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | https://example.com\").\n *                        ^^^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTrail(effects, ok, nok) {\n  return trail;\n\n  /**\n   * In trail of domain or path.\n   *\n   * ```markdown\n   * > | https://example.com\").\n   *                        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trail(code) {\n    // Regular trailing punctuation.\n    if (code === 33 || code === 34 || code === 39 || code === 41 || code === 42 || code === 44 || code === 46 || code === 58 || code === 59 || code === 63 || code === 95 || code === 126) {\n      effects.consume(code);\n      return trail;\n    }\n\n    // `&` followed by one or more alphabeticals and then a `;`, is\n    // as a whole considered as trailing punctuation.\n    // In all other cases, it is considered as continuation of the URL.\n    if (code === 38) {\n      effects.consume(code);\n      return trailCharacterReferenceStart;\n    }\n\n    // Needed because we allow literals after `[`, as we fix:\n    // <https://github.com/github/cmark-gfm/issues/278>.\n    // Check that it is not followed by `(` or `[`.\n    if (code === 93) {\n      effects.consume(code);\n      return trailBracketAfter;\n    }\n    if (\n    // `<` is an end.\n    code === 60 ||\n    // So is whitespace.\n    code === null || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return nok(code);\n  }\n\n  /**\n   * In trail, after `]`.\n   *\n   * > 👉 **Note**: this deviates from `cmark-gfm` to fix a bug.\n   * > See end of <https://github.com/github/cmark-gfm/issues/278> for more.\n   *\n   * ```markdown\n   * > | https://example.com](\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailBracketAfter(code) {\n    // Whitespace or something that could start a resource or reference is the end.\n    // Switch back to trail otherwise.\n    if (code === null || code === 40 || code === 91 || markdownLineEndingOrSpace(code) || unicodeWhitespace(code)) {\n      return ok(code);\n    }\n    return trail(code);\n  }\n\n  /**\n   * In character-reference like trail, after `&`.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceStart(code) {\n    // When non-alpha, it’s not a trail.\n    return asciiAlpha(code) ? trailCharacterReferenceInside(code) : nok(code);\n  }\n\n  /**\n   * In character-reference like trail.\n   *\n   * ```markdown\n   * > | https://example.com&amp;).\n   *                         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function trailCharacterReferenceInside(code) {\n    // Switch back to trail if this is well-formed.\n    if (code === 59) {\n      effects.consume(code);\n      return trail;\n    }\n    if (asciiAlpha(code)) {\n      effects.consume(code);\n      return trailCharacterReferenceInside;\n    }\n\n    // It’s not a trail.\n    return nok(code);\n  }\n}\n\n/**\n * Dot in email domain trail.\n *\n * This calls `ok` if this *is* the trail, followed by an end, which means\n * the trail is not part of the link.\n * It calls `nok` if this *is* part of the link.\n *\n * ```markdown\n * > | contact@example.org.\n *                        ^\n * ```\n *\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeEmailDomainDotTrail(effects, ok, nok) {\n  return start;\n\n  /**\n   * Dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                    ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    // Must be dot.\n    effects.consume(code);\n    return after;\n  }\n\n  /**\n   * After dot.\n   *\n   * ```markdown\n   * > | contact@example.org.\n   *                     ^   ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // Not a trail if alphanumeric.\n    return asciiAlphanumeric(code) ? nok(code) : ok(code);\n  }\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L156>.\n *\n * @type {Previous}\n */\nfunction previousWww(code) {\n  return code === null || code === 40 || code === 42 || code === 95 || code === 91 || code === 93 || code === 126 || markdownLineEndingOrSpace(code);\n}\n\n/**\n * See:\n * <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L214>.\n *\n * @type {Previous}\n */\nfunction previousProtocol(code) {\n  return !asciiAlpha(code);\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Previous}\n */\nfunction previousEmail(code) {\n  // Do not allow a slash “inside” atext.\n  // The reference code is a bit weird, but that’s what it results in.\n  // Source: <https://github.com/github/cmark-gfm/blob/ef1cfcb/extensions/autolink.c#L307>.\n  // Other than slash, every preceding character is allowed.\n  return !(code === 47 || gfmAtext(code));\n}\n\n/**\n * @param {Code} code\n * @returns {boolean}\n */\nfunction gfmAtext(code) {\n  return code === 43 || code === 45 || code === 46 || code === 95 || asciiAlphanumeric(code);\n}\n\n/**\n * @param {Array<Event>} events\n * @returns {boolean}\n */\nfunction previousUnbalanced(events) {\n  let index = events.length;\n  let result = false;\n  while (index--) {\n    const token = events[index][1];\n    if ((token.type === 'labelLink' || token.type === 'labelImage') && !token._balanced) {\n      result = true;\n      break;\n    }\n\n    // If we’ve seen this token, and it was marked as not having any unbalanced\n    // bracket before it, we can exit.\n    if (token._gfmAutolinkLiteralWalkedInto) {\n      result = false;\n      break;\n    }\n  }\n  if (events.length > 0 && !result) {\n    // Mark the last token as “walked into” w/o finding\n    // anything.\n    events[events.length - 1][1]._gfmAutolinkLiteralWalkedInto = true;\n  }\n  return result;\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * Normalize an identifier (as found in references, definitions).\n *\n * Collapses markdown whitespace, trim, and then lower- and uppercase.\n *\n * Some characters are considered “uppercase”, such as U+03F4 (`ϴ`), but if their\n * lowercase counterpart (U+03B8 (`θ`)) is uppercased will result in a different\n * uppercase character (U+0398 (`Θ`)).\n * So, to get a canonical form, we perform both lower- and uppercase.\n *\n * Using uppercase last makes sure keys will never interact with default\n * prototypal values (such as `constructor`): nothing in the prototype of\n * `Object` is uppercase.\n *\n * @param {string} value\n *   Identifier to normalize.\n * @returns {string}\n *   Normalized identifier.\n */\nexport function normalizeIdentifier(value) {\n  return value\n  // Collapse markdown whitespace.\n  .replace(/[\\t\\n\\r ]+/g, \" \")\n  // Trim.\n  .replace(/^ | $/g, '')\n  // Some characters are considered “uppercase”, but if their lowercase\n  // counterpart is uppercased will result in a different uppercase\n  // character.\n  // Hence, to get that form, we perform both lower- and uppercase.\n  // Upper case makes sure keys will not interact with default prototypal\n  // methods: no method is uppercase.\n  .toLowerCase().toUpperCase();\n}","/**\n * @import {Event, Exiter, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { blankLine } from 'micromark-core-commonmark';\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEndingOrSpace } from 'micromark-util-character';\nimport { normalizeIdentifier } from 'micromark-util-normalize-identifier';\nconst indent = {\n  tokenize: tokenizeIndent,\n  partial: true\n};\n\n// To do: micromark should support a `_hiddenGfmFootnoteSupport`, which only\n// affects label start (image).\n// That will let us drop `tokenizePotentialGfmFootnote*`.\n// It currently has a `_hiddenFootnoteSupport`, which affects that and more.\n// That can be removed when `micromark-extension-footnote` is archived.\n\n/**\n * Create an extension for `micromark` to enable GFM footnote syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to\n *   enable GFM footnote syntax.\n */\nexport function gfmFootnote() {\n  /** @type {Extension} */\n  return {\n    document: {\n      [91]: {\n        name: 'gfmFootnoteDefinition',\n        tokenize: tokenizeDefinitionStart,\n        continuation: {\n          tokenize: tokenizeDefinitionContinuation\n        },\n        exit: gfmFootnoteDefinitionEnd\n      }\n    },\n    text: {\n      [91]: {\n        name: 'gfmFootnoteCall',\n        tokenize: tokenizeGfmFootnoteCall\n      },\n      [93]: {\n        name: 'gfmPotentialFootnoteCall',\n        add: 'after',\n        tokenize: tokenizePotentialGfmFootnoteCall,\n        resolveTo: resolveToPotentialGfmFootnoteCall\n      }\n    }\n  };\n}\n\n// To do: remove after micromark update.\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizePotentialGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  let index = self.events.length;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {Token} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    const token = self.events[index][1];\n    if (token.type === \"labelImage\") {\n      labelStart = token;\n      break;\n    }\n\n    // Exit if we’ve walked far enough.\n    if (token.type === 'gfmFootnoteCall' || token.type === \"labelLink\" || token.type === \"label\" || token.type === \"image\" || token.type === \"link\") {\n      break;\n    }\n  }\n  return start;\n\n  /**\n   * @type {State}\n   */\n  function start(code) {\n    if (!labelStart || !labelStart._balanced) {\n      return nok(code);\n    }\n    const id = normalizeIdentifier(self.sliceSerialize({\n      start: labelStart.end,\n      end: self.now()\n    }));\n    if (id.codePointAt(0) !== 94 || !defined.includes(id.slice(1))) {\n      return nok(code);\n    }\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return ok(code);\n  }\n}\n\n// To do: remove after micromark update.\n/** @type {Resolver} */\nfunction resolveToPotentialGfmFootnoteCall(events, context) {\n  let index = events.length;\n  /** @type {Token | undefined} */\n  let labelStart;\n\n  // Find an opening.\n  while (index--) {\n    if (events[index][1].type === \"labelImage\" && events[index][0] === 'enter') {\n      labelStart = events[index][1];\n      break;\n    }\n  }\n  // Change the `labelImageMarker` to a `data`.\n  events[index + 1][1].type = \"data\";\n  events[index + 3][1].type = 'gfmFootnoteCallLabelMarker';\n\n  // The whole (without `!`):\n  /** @type {Token} */\n  const call = {\n    type: 'gfmFootnoteCall',\n    start: Object.assign({}, events[index + 3][1].start),\n    end: Object.assign({}, events[events.length - 1][1].end)\n  };\n  // The `^` marker\n  /** @type {Token} */\n  const marker = {\n    type: 'gfmFootnoteCallMarker',\n    start: Object.assign({}, events[index + 3][1].end),\n    end: Object.assign({}, events[index + 3][1].end)\n  };\n  // Increment the end 1 character.\n  marker.end.column++;\n  marker.end.offset++;\n  marker.end._bufferIndex++;\n  /** @type {Token} */\n  const string = {\n    type: 'gfmFootnoteCallString',\n    start: Object.assign({}, marker.end),\n    end: Object.assign({}, events[events.length - 1][1].start)\n  };\n  /** @type {Token} */\n  const chunk = {\n    type: \"chunkString\",\n    contentType: 'string',\n    start: Object.assign({}, string.start),\n    end: Object.assign({}, string.end)\n  };\n\n  /** @type {Array<Event>} */\n  const replacement = [\n  // Take the `labelImageMarker` (now `data`, the `!`)\n  events[index + 1], events[index + 2], ['enter', call, context],\n  // The `[`\n  events[index + 3], events[index + 4],\n  // The `^`.\n  ['enter', marker, context], ['exit', marker, context],\n  // Everything in between.\n  ['enter', string, context], ['enter', chunk, context], ['exit', chunk, context], ['exit', string, context],\n  // The ending (`]`, properly parsed and labelled).\n  events[events.length - 2], events[events.length - 1], ['exit', call, context]];\n  events.splice(index, events.length - index + 1, ...replacement);\n  return events;\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeGfmFootnoteCall(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  let size = 0;\n  /** @type {boolean} */\n  let data;\n\n  // Note: the implementation of `markdown-rs` is different, because it houses\n  // core *and* extensions in one project.\n  // Therefore, it can include footnote logic inside `label-end`.\n  // We can’t do that, but luckily, we can parse footnotes in a simpler way than\n  // needed for labels.\n  return start;\n\n  /**\n   * Start of footnote label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteCall');\n    effects.enter('gfmFootnoteCallLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallLabelMarker');\n    return callStart;\n  }\n\n  /**\n   * After `[`, at `^`.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callStart(code) {\n    if (code !== 94) return nok(code);\n    effects.enter('gfmFootnoteCallMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteCallMarker');\n    effects.enter('gfmFootnoteCallString');\n    effects.enter('chunkString').contentType = 'string';\n    return callData;\n  }\n\n  /**\n   * In label.\n   *\n   * ```markdown\n   * > | a [^b] c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callData(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteCallString');\n      if (!defined.includes(normalizeIdentifier(self.sliceSerialize(token)))) {\n        return nok(code);\n      }\n      effects.enter('gfmFootnoteCallLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteCallLabelMarker');\n      effects.exit('gfmFootnoteCall');\n      return ok;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? callEscape : callData;\n  }\n\n  /**\n   * On character after escape.\n   *\n   * ```markdown\n   * > | a [^b\\c] d\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function callEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return callData;\n    }\n    return callData(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionStart(effects, ok, nok) {\n  const self = this;\n  const defined = self.parser.gfmFootnotes || (self.parser.gfmFootnotes = []);\n  /** @type {string} */\n  let identifier;\n  let size = 0;\n  /** @type {boolean | undefined} */\n  let data;\n  return start;\n\n  /**\n   * Start of GFM footnote definition.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function start(code) {\n    effects.enter('gfmFootnoteDefinition')._container = true;\n    effects.enter('gfmFootnoteDefinitionLabel');\n    effects.enter('gfmFootnoteDefinitionLabelMarker');\n    effects.consume(code);\n    effects.exit('gfmFootnoteDefinitionLabelMarker');\n    return labelAtMarker;\n  }\n\n  /**\n   * In label, at caret.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAtMarker(code) {\n    if (code === 94) {\n      effects.enter('gfmFootnoteDefinitionMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionMarker');\n      effects.enter('gfmFootnoteDefinitionLabelString');\n      effects.enter('chunkString').contentType = 'string';\n      return labelInside;\n    }\n    return nok(code);\n  }\n\n  /**\n   * In label.\n   *\n   * > 👉 **Note**: `cmark-gfm` prevents whitespace from occurring in footnote\n   * > definition labels.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelInside(code) {\n    if (\n    // Too long.\n    size > 999 ||\n    // Closing brace with nothing.\n    code === 93 && !data ||\n    // Space or tab is not supported by GFM for some reason.\n    // `\\n` and `[` not being supported makes sense.\n    code === null || code === 91 || markdownLineEndingOrSpace(code)) {\n      return nok(code);\n    }\n    if (code === 93) {\n      effects.exit('chunkString');\n      const token = effects.exit('gfmFootnoteDefinitionLabelString');\n      identifier = normalizeIdentifier(self.sliceSerialize(token));\n      effects.enter('gfmFootnoteDefinitionLabelMarker');\n      effects.consume(code);\n      effects.exit('gfmFootnoteDefinitionLabelMarker');\n      effects.exit('gfmFootnoteDefinitionLabel');\n      return labelAfter;\n    }\n    if (!markdownLineEndingOrSpace(code)) {\n      data = true;\n    }\n    size++;\n    effects.consume(code);\n    return code === 92 ? labelEscape : labelInside;\n  }\n\n  /**\n   * After `\\`, at a special character.\n   *\n   * > 👉 **Note**: `cmark-gfm` currently does not support escaped brackets:\n   * > <https://github.com/github/cmark-gfm/issues/240>\n   *\n   * ```markdown\n   * > | [^a\\*b]: c\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelEscape(code) {\n    if (code === 91 || code === 92 || code === 93) {\n      effects.consume(code);\n      size++;\n      return labelInside;\n    }\n    return labelInside(code);\n  }\n\n  /**\n   * After definition label.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function labelAfter(code) {\n    if (code === 58) {\n      effects.enter('definitionMarker');\n      effects.consume(code);\n      effects.exit('definitionMarker');\n      if (!defined.includes(identifier)) {\n        defined.push(identifier);\n      }\n\n      // Any whitespace after the marker is eaten, forming indented code\n      // is not possible.\n      // No space is also fine, just like a block quote marker.\n      return factorySpace(effects, whitespaceAfter, 'gfmFootnoteDefinitionWhitespace');\n    }\n    return nok(code);\n  }\n\n  /**\n   * After definition prefix.\n   *\n   * ```markdown\n   * > | [^a]: b\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function whitespaceAfter(code) {\n    // `markdown-rs` has a wrapping token for the prefix that is closed here.\n    return ok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeDefinitionContinuation(effects, ok, nok) {\n  /// Start of footnote definition continuation.\n  ///\n  /// ```markdown\n  ///   | [^a]: b\n  /// > |     c\n  ///     ^\n  /// ```\n  //\n  // Either a blank line, which is okay, or an indented thing.\n  return effects.check(blankLine, ok, effects.attempt(indent, ok, nok));\n}\n\n/** @type {Exiter} */\nfunction gfmFootnoteDefinitionEnd(effects) {\n  effects.exit('gfmFootnoteDefinition');\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeIndent(effects, ok, nok) {\n  const self = this;\n  return factorySpace(effects, afterPrefix, 'gfmFootnoteDefinitionIndent', 4 + 1);\n\n  /**\n   * @type {State}\n   */\n  function afterPrefix(code) {\n    const tail = self.events[self.events.length - 1];\n    return tail && tail[1].type === 'gfmFootnoteDefinitionIndent' && tail[2].sliceSerialize(tail[1], true).length === 4 ? ok(code) : nok(code);\n  }\n}","/**\n * @import {Options} from 'micromark-extension-gfm-strikethrough'\n * @import {Event, Extension, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { splice } from 'micromark-util-chunked';\nimport { classifyCharacter } from 'micromark-util-classify-character';\nimport { resolveAll } from 'micromark-util-resolve-all';\n/**\n * Create an extension for `micromark` to enable GFM strikethrough syntax.\n *\n * @param {Options | null | undefined} [options={}]\n *   Configuration.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions`, to\n *   enable GFM strikethrough syntax.\n */\nexport function gfmStrikethrough(options) {\n  const options_ = options || {};\n  let single = options_.singleTilde;\n  const tokenizer = {\n    name: 'strikethrough',\n    tokenize: tokenizeStrikethrough,\n    resolveAll: resolveAllStrikethrough\n  };\n  if (single === null || single === undefined) {\n    single = true;\n  }\n  return {\n    text: {\n      [126]: tokenizer\n    },\n    insideSpan: {\n      null: [tokenizer]\n    },\n    attentionMarkers: {\n      null: [126]\n    }\n  };\n\n  /**\n   * Take events and resolve strikethrough.\n   *\n   * @type {Resolver}\n   */\n  function resolveAllStrikethrough(events, context) {\n    let index = -1;\n\n    // Walk through all events.\n    while (++index < events.length) {\n      // Find a token that can close.\n      if (events[index][0] === 'enter' && events[index][1].type === 'strikethroughSequenceTemporary' && events[index][1]._close) {\n        let open = index;\n\n        // Now walk back to find an opener.\n        while (open--) {\n          // Find a token that can open the closer.\n          if (events[open][0] === 'exit' && events[open][1].type === 'strikethroughSequenceTemporary' && events[open][1]._open &&\n          // If the sizes are the same:\n          events[index][1].end.offset - events[index][1].start.offset === events[open][1].end.offset - events[open][1].start.offset) {\n            events[index][1].type = 'strikethroughSequence';\n            events[open][1].type = 'strikethroughSequence';\n\n            /** @type {Token} */\n            const strikethrough = {\n              type: 'strikethrough',\n              start: Object.assign({}, events[open][1].start),\n              end: Object.assign({}, events[index][1].end)\n            };\n\n            /** @type {Token} */\n            const text = {\n              type: 'strikethroughText',\n              start: Object.assign({}, events[open][1].end),\n              end: Object.assign({}, events[index][1].start)\n            };\n\n            // Opening.\n            /** @type {Array<Event>} */\n            const nextEvents = [['enter', strikethrough, context], ['enter', events[open][1], context], ['exit', events[open][1], context], ['enter', text, context]];\n            const insideSpan = context.parser.constructs.insideSpan.null;\n            if (insideSpan) {\n              // Between.\n              splice(nextEvents, nextEvents.length, 0, resolveAll(insideSpan, events.slice(open + 1, index), context));\n            }\n\n            // Closing.\n            splice(nextEvents, nextEvents.length, 0, [['exit', text, context], ['enter', events[index][1], context], ['exit', events[index][1], context], ['exit', strikethrough, context]]);\n            splice(events, open - 1, index - open + 3, nextEvents);\n            index = open + nextEvents.length - 2;\n            break;\n          }\n        }\n      }\n    }\n    index = -1;\n    while (++index < events.length) {\n      if (events[index][1].type === 'strikethroughSequenceTemporary') {\n        events[index][1].type = \"data\";\n      }\n    }\n    return events;\n  }\n\n  /**\n   * @this {TokenizeContext}\n   * @type {Tokenizer}\n   */\n  function tokenizeStrikethrough(effects, ok, nok) {\n    const previous = this.previous;\n    const events = this.events;\n    let size = 0;\n    return start;\n\n    /** @type {State} */\n    function start(code) {\n      if (previous === 126 && events[events.length - 1][1].type !== \"characterEscape\") {\n        return nok(code);\n      }\n      effects.enter('strikethroughSequenceTemporary');\n      return more(code);\n    }\n\n    /** @type {State} */\n    function more(code) {\n      const before = classifyCharacter(previous);\n      if (code === 126) {\n        // If this is the third marker, exit.\n        if (size > 1) return nok(code);\n        effects.consume(code);\n        size++;\n        return more;\n      }\n      if (size < 2 && !single) return nok(code);\n      const token = effects.exit('strikethroughSequenceTemporary');\n      const after = classifyCharacter(code);\n      token._open = !after || after === 2 && Boolean(before);\n      token._close = !before || before === 2 && Boolean(after);\n      return ok(code);\n    }\n  }\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n// Port of `edit_map.rs` from `markdown-rs`.\n// This should move to `markdown-js` later.\n\n// Deal with several changes in events, batching them together.\n//\n// Preferably, changes should be kept to a minimum.\n// Sometimes, it’s needed to change the list of events, because parsing can be\n// messy, and it helps to expose a cleaner interface of events to the compiler\n// and other users.\n// It can also help to merge many adjacent similar events.\n// And, in other cases, it’s needed to parse subcontent: pass some events\n// through another tokenizer and inject the result.\n\n/**\n * @typedef {[number, number, Array<Event>]} Change\n * @typedef {[number, number, number]} Jump\n */\n\n/**\n * Tracks a bunch of edits.\n */\nexport class EditMap {\n  /**\n   * Create a new edit map.\n   */\n  constructor() {\n    /**\n     * Record of changes.\n     *\n     * @type {Array<Change>}\n     */\n    this.map = [];\n  }\n\n  /**\n   * Create an edit: a remove and/or add at a certain place.\n   *\n   * @param {number} index\n   * @param {number} remove\n   * @param {Array<Event>} add\n   * @returns {undefined}\n   */\n  add(index, remove, add) {\n    addImplementation(this, index, remove, add);\n  }\n\n  // To do: add this when moving to `micromark`.\n  // /**\n  //  * Create an edit: but insert `add` before existing additions.\n  //  *\n  //  * @param {number} index\n  //  * @param {number} remove\n  //  * @param {Array<Event>} add\n  //  * @returns {undefined}\n  //  */\n  // addBefore(index, remove, add) {\n  //   addImplementation(this, index, remove, add, true)\n  // }\n\n  /**\n   * Done, change the events.\n   *\n   * @param {Array<Event>} events\n   * @returns {undefined}\n   */\n  consume(events) {\n    this.map.sort(function (a, b) {\n      return a[0] - b[0];\n    });\n\n    /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n    if (this.map.length === 0) {\n      return;\n    }\n\n    // To do: if links are added in events, like they are in `markdown-rs`,\n    // this is needed.\n    // // Calculate jumps: where items in the current list move to.\n    // /** @type {Array<Jump>} */\n    // const jumps = []\n    // let index = 0\n    // let addAcc = 0\n    // let removeAcc = 0\n    // while (index < this.map.length) {\n    //   const [at, remove, add] = this.map[index]\n    //   removeAcc += remove\n    //   addAcc += add.length\n    //   jumps.push([at, removeAcc, addAcc])\n    //   index += 1\n    // }\n    //\n    // . shiftLinks(events, jumps)\n\n    let index = this.map.length;\n    /** @type {Array<Array<Event>>} */\n    const vecs = [];\n    while (index > 0) {\n      index -= 1;\n      vecs.push(events.slice(this.map[index][0] + this.map[index][1]), this.map[index][2]);\n\n      // Truncate rest.\n      events.length = this.map[index][0];\n    }\n    vecs.push(events.slice());\n    events.length = 0;\n    let slice = vecs.pop();\n    while (slice) {\n      for (const element of slice) {\n        events.push(element);\n      }\n      slice = vecs.pop();\n    }\n\n    // Truncate everything.\n    this.map.length = 0;\n  }\n}\n\n/**\n * Create an edit.\n *\n * @param {EditMap} editMap\n * @param {number} at\n * @param {number} remove\n * @param {Array<Event>} add\n * @returns {undefined}\n */\nfunction addImplementation(editMap, at, remove, add) {\n  let index = 0;\n\n  /* c8 ignore next 3 -- `resolve` is never called without tables, so without edits. */\n  if (remove === 0 && add.length === 0) {\n    return;\n  }\n  while (index < editMap.map.length) {\n    if (editMap.map[index][0] === at) {\n      editMap.map[index][1] += remove;\n\n      // To do: before not used by tables, use when moving to micromark.\n      // if (before) {\n      //   add.push(...editMap.map[index][2])\n      //   editMap.map[index][2] = add\n      // } else {\n      editMap.map[index][2].push(...add);\n      // }\n\n      return;\n    }\n    index += 1;\n  }\n  editMap.map.push([at, remove, add]);\n}\n\n// /**\n//  * Shift `previous` and `next` links according to `jumps`.\n//  *\n//  * This fixes links in case there are events removed or added between them.\n//  *\n//  * @param {Array<Event>} events\n//  * @param {Array<Jump>} jumps\n//  */\n// function shiftLinks(events, jumps) {\n//   let jumpIndex = 0\n//   let index = 0\n//   let add = 0\n//   let rm = 0\n\n//   while (index < events.length) {\n//     const rmCurr = rm\n\n//     while (jumpIndex < jumps.length && jumps[jumpIndex][0] <= index) {\n//       add = jumps[jumpIndex][2]\n//       rm = jumps[jumpIndex][1]\n//       jumpIndex += 1\n//     }\n\n//     // Ignore items that will be removed.\n//     if (rm > rmCurr) {\n//       index += rm - rmCurr\n//     } else {\n//       // ?\n//       // if let Some(link) = &events[index].link {\n//       //     if let Some(next) = link.next {\n//       //         events[next].link.as_mut().unwrap().previous = Some(index + add - rm);\n//       //         while jumpIndex < jumps.len() && jumps[jumpIndex].0 <= next {\n//       //             add = jumps[jumpIndex].2;\n//       //             rm = jumps[jumpIndex].1;\n//       //             jumpIndex += 1;\n//       //         }\n//       //         events[index].link.as_mut().unwrap().next = Some(next + add - rm);\n//       //         index = next;\n//       //         continue;\n//       //     }\n//       // }\n//       index += 1\n//     }\n//   }\n// }","/**\n * @import {Event} from 'micromark-util-types'\n */\n\n/**\n * @typedef {'center' | 'left' | 'none' | 'right'} Align\n */\n\n/**\n * Figure out the alignment of a GFM table.\n *\n * @param {Readonly<Array<Event>>} events\n *   List of events.\n * @param {number} index\n *   Table enter event.\n * @returns {Array<Align>}\n *   List of aligns.\n */\nexport function gfmTableAlign(events, index) {\n  let inDelimiterRow = false;\n  /** @type {Array<Align>} */\n  const align = [];\n  while (index < events.length) {\n    const event = events[index];\n    if (inDelimiterRow) {\n      if (event[0] === 'enter') {\n        // Start of alignment value: set a new column.\n        // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n        if (event[1].type === 'tableContent') {\n          align.push(events[index + 1][1].type === 'tableDelimiterMarker' ? 'left' : 'none');\n        }\n      }\n      // Exits:\n      // End of alignment value: change the column.\n      // To do: `markdown-rs` uses `tableDelimiterCellValue`.\n      else if (event[1].type === 'tableContent') {\n        if (events[index - 1][1].type === 'tableDelimiterMarker') {\n          const alignIndex = align.length - 1;\n          align[alignIndex] = align[alignIndex] === 'left' ? 'center' : 'right';\n        }\n      }\n      // Done!\n      else if (event[1].type === 'tableDelimiterRow') {\n        break;\n      }\n    } else if (event[0] === 'enter' && event[1].type === 'tableDelimiterRow') {\n      inDelimiterRow = true;\n    }\n    index += 1;\n  }\n  return align;\n}","/**\n * @import {Event, Extension, Point, Resolver, State, Token, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\n/**\n * @typedef {[number, number, number, number]} Range\n *   Cell info.\n *\n * @typedef {0 | 1 | 2 | 3} RowKind\n *   Where we are: `1` for head row, `2` for delimiter row, `3` for body row.\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nimport { EditMap } from './edit-map.js';\nimport { gfmTableAlign } from './infer.js';\n\n/**\n * Create an HTML extension for `micromark` to support GitHub tables syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   table syntax.\n */\nexport function gfmTable() {\n  return {\n    flow: {\n      null: {\n        name: 'table',\n        tokenize: tokenizeTable,\n        resolveAll: resolveTable\n      }\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTable(effects, ok, nok) {\n  const self = this;\n  let size = 0;\n  let sizeB = 0;\n  /** @type {boolean | undefined} */\n  let seen;\n  return start;\n\n  /**\n   * Start of a GFM table.\n   *\n   * If there is a valid table row or table head before, then we try to parse\n   * another row.\n   * Otherwise, we try to parse a head.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   * @type {State}\n   */\n  function start(code) {\n    let index = self.events.length - 1;\n    while (index > -1) {\n      const type = self.events[index][1].type;\n      if (type === \"lineEnding\" ||\n      // Note: markdown-rs uses `whitespace` instead of `linePrefix`\n      type === \"linePrefix\") index--;else break;\n    }\n    const tail = index > -1 ? self.events[index][1].type : null;\n    const next = tail === 'tableHead' || tail === 'tableRow' ? bodyRowStart : headRowBefore;\n\n    // Don’t allow lazy body rows.\n    if (next === bodyRowStart && self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    return next(code);\n  }\n\n  /**\n   * Before table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBefore(code) {\n    effects.enter('tableHead');\n    effects.enter('tableRow');\n    return headRowStart(code);\n  }\n\n  /**\n   * Before table head row, after whitespace.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowStart(code) {\n    if (code === 124) {\n      return headRowBreak(code);\n    }\n\n    // To do: micromark-js should let us parse our own whitespace in extensions,\n    // like `markdown-rs`:\n    //\n    // ```js\n    // // 4+ spaces.\n    // if (markdownSpace(code)) {\n    //   return nok(code)\n    // }\n    // ```\n\n    seen = true;\n    // Count the first character, that isn’t a pipe, double.\n    sizeB += 1;\n    return headRowBreak(code);\n  }\n\n  /**\n   * At break in table head row.\n   *\n   * ```markdown\n   * > | | a |\n   *     ^\n   *       ^\n   *         ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowBreak(code) {\n    if (code === null) {\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownLineEnding(code)) {\n      // If anything other than one pipe (ignoring whitespace) was used, it’s fine.\n      if (sizeB > 1) {\n        sizeB = 0;\n        // To do: check if this works.\n        // Feel free to interrupt:\n        self.interrupt = true;\n        effects.exit('tableRow');\n        effects.enter(\"lineEnding\");\n        effects.consume(code);\n        effects.exit(\"lineEnding\");\n        return headDelimiterStart;\n      }\n\n      // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n      return nok(code);\n    }\n    if (markdownSpace(code)) {\n      // To do: check if this is fine.\n      // effects.attempt(State::Next(StateName::GfmTableHeadRowBreak), State::Nok)\n      // State::Retry(space_or_tab(tokenizer))\n      return factorySpace(effects, headRowBreak, \"whitespace\")(code);\n    }\n    sizeB += 1;\n    if (seen) {\n      seen = false;\n      // Header cell count.\n      size += 1;\n    }\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      // Whether a delimiter was seen.\n      seen = true;\n      return headRowBreak;\n    }\n\n    // Anything else is cell data.\n    effects.enter(\"data\");\n    return headRowData(code);\n  }\n\n  /**\n   * In table head row data.\n   *\n   * ```markdown\n   * > | | a |\n   *       ^\n   *   | | - |\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return headRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? headRowEscape : headRowData;\n  }\n\n  /**\n   * In table head row escape.\n   *\n   * ```markdown\n   * > | | a\\-b |\n   *         ^\n   *   | | ---- |\n   *   | | c    |\n   * ```\n   *\n   * @type {State}\n   */\n  function headRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return headRowData;\n    }\n    return headRowData(code);\n  }\n\n  /**\n   * Before delimiter row.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterStart(code) {\n    // Reset `interrupt`.\n    self.interrupt = false;\n\n    // Note: in `markdown-rs`, we need to handle piercing here too.\n    if (self.parser.lazy[self.now().line]) {\n      return nok(code);\n    }\n    effects.enter('tableDelimiterRow');\n    // Track if we’ve seen a `:` or `|`.\n    seen = false;\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterBefore, \"linePrefix\", self.parser.constructs.disable.null.includes('codeIndented') ? undefined : 4)(code);\n    }\n    return headDelimiterBefore(code);\n  }\n\n  /**\n   * Before delimiter row, after optional whitespace.\n   *\n   * Reused when a `|` is found later, to parse another cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *     ^\n   *   | | b |\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterBefore(code) {\n    if (code === 45 || code === 58) {\n      return headDelimiterValueBefore(code);\n    }\n    if (code === 124) {\n      seen = true;\n      // If we start with a pipe, we open a cell marker.\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return headDelimiterCellBefore;\n    }\n\n    // More whitespace / empty row not allowed at start.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After `|`, before delimiter cell.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *      ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellBefore(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterValueBefore, \"whitespace\")(code);\n    }\n    return headDelimiterValueBefore(code);\n  }\n\n  /**\n   * Before delimiter cell value.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterValueBefore(code) {\n    // Align: left.\n    if (code === 58) {\n      sizeB += 1;\n      seen = true;\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterLeftAlignmentAfter;\n    }\n\n    // Align: none.\n    if (code === 45) {\n      sizeB += 1;\n      // To do: seems weird that this *isn’t* left aligned, but that state is used?\n      return headDelimiterLeftAlignmentAfter(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      return headDelimiterCellAfter(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * After delimiter cell left alignment marker.\n   *\n   * ```markdown\n   *   | | a  |\n   * > | | :- |\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterLeftAlignmentAfter(code) {\n    if (code === 45) {\n      effects.enter('tableDelimiterFiller');\n      return headDelimiterFiller(code);\n    }\n\n    // Anything else is not ok after the left-align colon.\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter cell filler.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | - |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterFiller(code) {\n    if (code === 45) {\n      effects.consume(code);\n      return headDelimiterFiller;\n    }\n\n    // Align is `center` if it was `left`, `right` otherwise.\n    if (code === 58) {\n      seen = true;\n      effects.exit('tableDelimiterFiller');\n      effects.enter('tableDelimiterMarker');\n      effects.consume(code);\n      effects.exit('tableDelimiterMarker');\n      return headDelimiterRightAlignmentAfter;\n    }\n    effects.exit('tableDelimiterFiller');\n    return headDelimiterRightAlignmentAfter(code);\n  }\n\n  /**\n   * After delimiter cell right alignment marker.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterRightAlignmentAfter(code) {\n    if (markdownSpace(code)) {\n      return factorySpace(effects, headDelimiterCellAfter, \"whitespace\")(code);\n    }\n    return headDelimiterCellAfter(code);\n  }\n\n  /**\n   * After delimiter cell.\n   *\n   * ```markdown\n   *   | |  a |\n   * > | | -: |\n   *          ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterCellAfter(code) {\n    if (code === 124) {\n      return headDelimiterBefore(code);\n    }\n    if (code === null || markdownLineEnding(code)) {\n      // Exit when:\n      // * there was no `:` or `|` at all (it’s a thematic break or setext\n      //   underline instead)\n      // * the header cell count is not the delimiter cell count\n      if (!seen || size !== sizeB) {\n        return headDelimiterNok(code);\n      }\n\n      // Note: in markdown-rs`, a reset is needed here.\n      effects.exit('tableDelimiterRow');\n      effects.exit('tableHead');\n      // To do: in `markdown-rs`, resolvers need to be registered manually.\n      // effects.register_resolver(ResolveName::GfmTable)\n      return ok(code);\n    }\n    return headDelimiterNok(code);\n  }\n\n  /**\n   * In delimiter row, at a disallowed byte.\n   *\n   * ```markdown\n   *   | | a |\n   * > | | x |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function headDelimiterNok(code) {\n    // Note: in `markdown-rs`, we need to reset, in `micromark-js` we don‘t.\n    return nok(code);\n  }\n\n  /**\n   * Before table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowStart(code) {\n    // Note: in `markdown-rs` we need to manually take care of a prefix,\n    // but in `micromark-js` that is done for us, so if we’re here, we’re\n    // never at whitespace.\n    effects.enter('tableRow');\n    return bodyRowBreak(code);\n  }\n\n  /**\n   * At break in table body row.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *     ^\n   *       ^\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowBreak(code) {\n    if (code === 124) {\n      effects.enter('tableCellDivider');\n      effects.consume(code);\n      effects.exit('tableCellDivider');\n      return bodyRowBreak;\n    }\n    if (code === null || markdownLineEnding(code)) {\n      effects.exit('tableRow');\n      return ok(code);\n    }\n    if (markdownSpace(code)) {\n      return factorySpace(effects, bodyRowBreak, \"whitespace\")(code);\n    }\n\n    // Anything else is cell content.\n    effects.enter(\"data\");\n    return bodyRowData(code);\n  }\n\n  /**\n   * In table body row data.\n   *\n   * ```markdown\n   *   | | a |\n   *   | | - |\n   * > | | b |\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowData(code) {\n    if (code === null || code === 124 || markdownLineEndingOrSpace(code)) {\n      effects.exit(\"data\");\n      return bodyRowBreak(code);\n    }\n    effects.consume(code);\n    return code === 92 ? bodyRowEscape : bodyRowData;\n  }\n\n  /**\n   * In table body row escape.\n   *\n   * ```markdown\n   *   | | a    |\n   *   | | ---- |\n   * > | | b\\-c |\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function bodyRowEscape(code) {\n    if (code === 92 || code === 124) {\n      effects.consume(code);\n      return bodyRowData;\n    }\n    return bodyRowData(code);\n  }\n}\n\n/** @type {Resolver} */\n\nfunction resolveTable(events, context) {\n  let index = -1;\n  let inFirstCellAwaitingPipe = true;\n  /** @type {RowKind} */\n  let rowKind = 0;\n  /** @type {Range} */\n  let lastCell = [0, 0, 0, 0];\n  /** @type {Range} */\n  let cell = [0, 0, 0, 0];\n  let afterHeadAwaitingFirstBodyRow = false;\n  let lastTableEnd = 0;\n  /** @type {Token | undefined} */\n  let currentTable;\n  /** @type {Token | undefined} */\n  let currentBody;\n  /** @type {Token | undefined} */\n  let currentCell;\n  const map = new EditMap();\n  while (++index < events.length) {\n    const event = events[index];\n    const token = event[1];\n    if (event[0] === 'enter') {\n      // Start of head.\n      if (token.type === 'tableHead') {\n        afterHeadAwaitingFirstBodyRow = false;\n\n        // Inject previous (body end and) table end.\n        if (lastTableEnd !== 0) {\n          flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n          currentBody = undefined;\n          lastTableEnd = 0;\n        }\n\n        // Inject table start.\n        currentTable = {\n          type: 'table',\n          start: Object.assign({}, token.start),\n          // Note: correct end is set later.\n          end: Object.assign({}, token.end)\n        };\n        map.add(index, 0, [['enter', currentTable, context]]);\n      } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n        inFirstCellAwaitingPipe = true;\n        currentCell = undefined;\n        lastCell = [0, 0, 0, 0];\n        cell = [0, index + 1, 0, 0];\n\n        // Inject table body start.\n        if (afterHeadAwaitingFirstBodyRow) {\n          afterHeadAwaitingFirstBodyRow = false;\n          currentBody = {\n            type: 'tableBody',\n            start: Object.assign({}, token.start),\n            // Note: correct end is set later.\n            end: Object.assign({}, token.end)\n          };\n          map.add(index, 0, [['enter', currentBody, context]]);\n        }\n        rowKind = token.type === 'tableDelimiterRow' ? 2 : currentBody ? 3 : 1;\n      }\n      // Cell data.\n      else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n        inFirstCellAwaitingPipe = false;\n\n        // First value in cell.\n        if (cell[2] === 0) {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n            lastCell = [0, 0, 0, 0];\n          }\n          cell[2] = index;\n        }\n      } else if (token.type === 'tableCellDivider') {\n        if (inFirstCellAwaitingPipe) {\n          inFirstCellAwaitingPipe = false;\n        } else {\n          if (lastCell[1] !== 0) {\n            cell[0] = cell[1];\n            currentCell = flushCell(map, context, lastCell, rowKind, undefined, currentCell);\n          }\n          lastCell = cell;\n          cell = [lastCell[1], index, 0, 0];\n        }\n      }\n    }\n    // Exit events.\n    else if (token.type === 'tableHead') {\n      afterHeadAwaitingFirstBodyRow = true;\n      lastTableEnd = index;\n    } else if (token.type === 'tableRow' || token.type === 'tableDelimiterRow') {\n      lastTableEnd = index;\n      if (lastCell[1] !== 0) {\n        cell[0] = cell[1];\n        currentCell = flushCell(map, context, lastCell, rowKind, index, currentCell);\n      } else if (cell[1] !== 0) {\n        currentCell = flushCell(map, context, cell, rowKind, index, currentCell);\n      }\n      rowKind = 0;\n    } else if (rowKind && (token.type === \"data\" || token.type === 'tableDelimiterMarker' || token.type === 'tableDelimiterFiller')) {\n      cell[3] = index;\n    }\n  }\n  if (lastTableEnd !== 0) {\n    flushTableEnd(map, context, lastTableEnd, currentTable, currentBody);\n  }\n  map.consume(context.events);\n\n  // To do: move this into `html`, when events are exposed there.\n  // That’s what `markdown-rs` does.\n  // That needs updates to `mdast-util-gfm-table`.\n  index = -1;\n  while (++index < context.events.length) {\n    const event = context.events[index];\n    if (event[0] === 'enter' && event[1].type === 'table') {\n      event[1]._align = gfmTableAlign(context.events, index);\n    }\n  }\n  return events;\n}\n\n/**\n * Generate a cell.\n *\n * @param {EditMap} map\n * @param {Readonly<TokenizeContext>} context\n * @param {Readonly<Range>} range\n * @param {RowKind} rowKind\n * @param {number | undefined} rowEnd\n * @param {Token | undefined} previousCell\n * @returns {Token | undefined}\n */\n// eslint-disable-next-line max-params\nfunction flushCell(map, context, range, rowKind, rowEnd, previousCell) {\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCell' : 'tableCell'\n  const groupName = rowKind === 1 ? 'tableHeader' : rowKind === 2 ? 'tableDelimiter' : 'tableData';\n  // `markdown-rs` uses:\n  // rowKind === 2 ? 'tableDelimiterCellValue' : 'tableCellText'\n  const valueName = 'tableContent';\n\n  // Insert an exit for the previous cell, if there is one.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //          ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[0] !== 0) {\n    previousCell.end = Object.assign({}, getPoint(context.events, range[0]));\n    map.add(range[0], 0, [['exit', previousCell, context]]);\n  }\n\n  // Insert enter of this cell.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //           ^-- enter\n  //           ^^^^-- this cell\n  // ```\n  const now = getPoint(context.events, range[1]);\n  previousCell = {\n    type: groupName,\n    start: Object.assign({}, now),\n    // Note: correct end is set later.\n    end: Object.assign({}, now)\n  };\n  map.add(range[1], 0, [['enter', previousCell, context]]);\n\n  // Insert text start at first data start and end at last data end, and\n  // remove events between.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //            ^-- enter\n  //             ^-- exit\n  //           ^^^^-- this cell\n  // ```\n  if (range[2] !== 0) {\n    const relatedStart = getPoint(context.events, range[2]);\n    const relatedEnd = getPoint(context.events, range[3]);\n    /** @type {Token} */\n    const valueToken = {\n      type: valueName,\n      start: Object.assign({}, relatedStart),\n      end: Object.assign({}, relatedEnd)\n    };\n    map.add(range[2], 0, [['enter', valueToken, context]]);\n    if (rowKind !== 2) {\n      // Fix positional info on remaining events\n      const start = context.events[range[2]];\n      const end = context.events[range[3]];\n      start[1].end = Object.assign({}, end[1].end);\n      start[1].type = \"chunkText\";\n      start[1].contentType = \"text\";\n\n      // Remove if needed.\n      if (range[3] > range[2] + 1) {\n        const a = range[2] + 1;\n        const b = range[3] - range[2] - 1;\n        map.add(a, b, []);\n      }\n    }\n    map.add(range[3] + 1, 0, [['exit', valueToken, context]]);\n  }\n\n  // Insert an exit for the last cell, if at the row end.\n  //\n  // ```markdown\n  // > | | aa | bb | cc |\n  //                    ^-- exit\n  //               ^^^^^^-- this cell (the last one contains two “between” parts)\n  // ```\n  if (rowEnd !== undefined) {\n    previousCell.end = Object.assign({}, getPoint(context.events, rowEnd));\n    map.add(rowEnd, 0, [['exit', previousCell, context]]);\n    previousCell = undefined;\n  }\n  return previousCell;\n}\n\n/**\n * Generate table end (and table body end).\n *\n * @param {Readonly<EditMap>} map\n * @param {Readonly<TokenizeContext>} context\n * @param {number} index\n * @param {Token} table\n * @param {Token | undefined} tableBody\n */\n// eslint-disable-next-line max-params\nfunction flushTableEnd(map, context, index, table, tableBody) {\n  /** @type {Array<Event>} */\n  const exits = [];\n  const related = getPoint(context.events, index);\n  if (tableBody) {\n    tableBody.end = Object.assign({}, related);\n    exits.push(['exit', tableBody, context]);\n  }\n  table.end = Object.assign({}, related);\n  exits.push(['exit', table, context]);\n  map.add(index + 1, 0, exits);\n}\n\n/**\n * @param {Readonly<Array<Event>>} events\n * @param {number} index\n * @returns {Readonly<Point>}\n */\nfunction getPoint(events, index) {\n  const event = events[index];\n  const side = event[0] === 'enter' ? 'start' : 'end';\n  return event[1][side];\n}","/**\n * @import {Code} from 'micromark-util-types'\n */\n\n/**\n * Check whether the character code represents an ASCII alpha (`a` through `z`,\n * case insensitive).\n *\n * An **ASCII alpha** is an ASCII upper alpha or ASCII lower alpha.\n *\n * An **ASCII upper alpha** is a character in the inclusive range U+0041 (`A`)\n * to U+005A (`Z`).\n *\n * An **ASCII lower alpha** is a character in the inclusive range U+0061 (`a`)\n * to U+007A (`z`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlpha = regexCheck(/[A-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII alphanumeric (`a`\n * through `z`, case insensitive, or `0` through `9`).\n *\n * An **ASCII alphanumeric** is an ASCII digit (see `asciiDigit`) or ASCII alpha\n * (see `asciiAlpha`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAlphanumeric = regexCheck(/[\\dA-Za-z]/);\n\n/**\n * Check whether the character code represents an ASCII atext.\n *\n * atext is an ASCII alphanumeric (see `asciiAlphanumeric`), or a character in\n * the inclusive ranges U+0023 NUMBER SIGN (`#`) to U+0027 APOSTROPHE (`'`),\n * U+002A ASTERISK (`*`), U+002B PLUS SIGN (`+`), U+002D DASH (`-`), U+002F\n * SLASH (`/`), U+003D EQUALS TO (`=`), U+003F QUESTION MARK (`?`), U+005E\n * CARET (`^`) to U+0060 GRAVE ACCENT (`` ` ``), or U+007B LEFT CURLY BRACE\n * (`{`) to U+007E TILDE (`~`).\n *\n * See:\n * **\\[RFC5322]**:\n * [Internet Message Format](https://tools.ietf.org/html/rfc5322).\n * P. Resnick.\n * IETF.\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiAtext = regexCheck(/[#-'*+\\--9=?A-Z^-~]/);\n\n/**\n * Check whether a character code is an ASCII control character.\n *\n * An **ASCII control** is a character in the inclusive range U+0000 NULL (NUL)\n * to U+001F (US), or U+007F (DEL).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function asciiControl(code) {\n  return (\n    // Special whitespace codes (which have negative values), C0 and Control\n    // character DEL\n    code !== null && (code < 32 || code === 127)\n  );\n}\n\n/**\n * Check whether the character code represents an ASCII digit (`0` through `9`).\n *\n * An **ASCII digit** is a character in the inclusive range U+0030 (`0`) to\n * U+0039 (`9`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiDigit = regexCheck(/\\d/);\n\n/**\n * Check whether the character code represents an ASCII hex digit (`a` through\n * `f`, case insensitive, or `0` through `9`).\n *\n * An **ASCII hex digit** is an ASCII digit (see `asciiDigit`), ASCII upper hex\n * digit, or an ASCII lower hex digit.\n *\n * An **ASCII upper hex digit** is a character in the inclusive range U+0041\n * (`A`) to U+0046 (`F`).\n *\n * An **ASCII lower hex digit** is a character in the inclusive range U+0061\n * (`a`) to U+0066 (`f`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiHexDigit = regexCheck(/[\\dA-Fa-f]/);\n\n/**\n * Check whether the character code represents ASCII punctuation.\n *\n * An **ASCII punctuation** is a character in the inclusive ranges U+0021\n * EXCLAMATION MARK (`!`) to U+002F SLASH (`/`), U+003A COLON (`:`) to U+0040 AT\n * SIGN (`@`), U+005B LEFT SQUARE BRACKET (`[`) to U+0060 GRAVE ACCENT\n * (`` ` ``), or U+007B LEFT CURLY BRACE (`{`) to U+007E TILDE (`~`).\n *\n * @param code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport const asciiPunctuation = regexCheck(/[!-/:-@[-`{-~]/);\n\n/**\n * Check whether a character code is a markdown line ending.\n *\n * A **markdown line ending** is the virtual characters M-0003 CARRIAGE RETURN\n * LINE FEED (CRLF), M-0004 LINE FEED (LF) and M-0005 CARRIAGE RETURN (CR).\n *\n * In micromark, the actual character U+000A LINE FEED (LF) and U+000D CARRIAGE\n * RETURN (CR) are replaced by these virtual characters depending on whether\n * they occurred together.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEnding(code) {\n  return code !== null && code < -2;\n}\n\n/**\n * Check whether a character code is a markdown line ending (see\n * `markdownLineEnding`) or markdown space (see `markdownSpace`).\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownLineEndingOrSpace(code) {\n  return code !== null && (code < 0 || code === 32);\n}\n\n/**\n * Check whether a character code is a markdown space.\n *\n * A **markdown space** is the concrete character U+0020 SPACE (SP) and the\n * virtual characters M-0001 VIRTUAL SPACE (VS) and M-0002 HORIZONTAL TAB (HT).\n *\n * In micromark, the actual character U+0009 CHARACTER TABULATION (HT) is\n * replaced by one M-0002 HORIZONTAL TAB (HT) and between 0 and 3 M-0001 VIRTUAL\n * SPACE (VS) characters, depending on the column at which the tab occurred.\n *\n * @param {Code} code\n *   Code.\n * @returns {boolean}\n *   Whether it matches.\n */\nexport function markdownSpace(code) {\n  return code === -2 || code === -1 || code === 32;\n}\n\n// Size note: removing ASCII from the regex and using `asciiPunctuation` here\n// In fact adds to the bundle size.\n/**\n * Check whether the character code represents Unicode punctuation.\n *\n * A **Unicode punctuation** is a character in the Unicode `Pc` (Punctuation,\n * Connector), `Pd` (Punctuation, Dash), `Pe` (Punctuation, Close), `Pf`\n * (Punctuation, Final quote), `Pi` (Punctuation, Initial quote), `Po`\n * (Punctuation, Other), or `Ps` (Punctuation, Open) categories, or an ASCII\n * punctuation (see `asciiPunctuation`).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodePunctuation = regexCheck(/\\p{P}|\\p{S}/u);\n\n/**\n * Check whether the character code represents Unicode whitespace.\n *\n * Note that this does handle micromark specific markdown whitespace characters.\n * See `markdownLineEndingOrSpace` to check that.\n *\n * A **Unicode whitespace** is a character in the Unicode `Zs` (Separator,\n * Space) category, or U+0009 CHARACTER TABULATION (HT), U+000A LINE FEED (LF),\n * U+000C (FF), or U+000D CARRIAGE RETURN (CR) (**\\[UNICODE]**).\n *\n * See:\n * **\\[UNICODE]**:\n * [The Unicode Standard](https://www.unicode.org/versions/).\n * Unicode Consortium.\n *\n * @param code\n *   Code.\n * @returns\n *   Whether it matches.\n */\nexport const unicodeWhitespace = regexCheck(/\\s/);\n\n/**\n * Create a code check from a regex.\n *\n * @param {RegExp} regex\n *   Expression.\n * @returns {(code: Code) => boolean}\n *   Check.\n */\nfunction regexCheck(regex) {\n  return check;\n\n  /**\n   * Check whether a code matches the bound regex.\n   *\n   * @param {Code} code\n   *   Character code.\n   * @returns {boolean}\n   *   Whether the character code matches the bound regex.\n   */\n  function check(code) {\n    return code !== null && code > -1 && regex.test(String.fromCharCode(code));\n  }\n}","/**\n * @import {Extension, State, TokenizeContext, Tokenizer} from 'micromark-util-types'\n */\n\nimport { factorySpace } from 'micromark-factory-space';\nimport { markdownLineEnding, markdownLineEndingOrSpace, markdownSpace } from 'micromark-util-character';\nconst tasklistCheck = {\n  name: 'tasklistCheck',\n  tokenize: tokenizeTasklistCheck\n};\n\n/**\n * Create an HTML extension for `micromark` to support GFM task list items\n * syntax.\n *\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM task list items when serializing to HTML.\n */\nexport function gfmTaskListItem() {\n  return {\n    text: {\n      [91]: tasklistCheck\n    }\n  };\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction tokenizeTasklistCheck(effects, ok, nok) {\n  const self = this;\n  return open;\n\n  /**\n   * At start of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *       ^\n   * ```\n   *\n   * @type {State}\n   */\n  function open(code) {\n    if (\n    // Exit if there’s stuff before.\n    self.previous !== null ||\n    // Exit if not in the first content that is the first child of a list\n    // item.\n    !self._gfmTasklistFirstContentOfListItem) {\n      return nok(code);\n    }\n    effects.enter('taskListCheck');\n    effects.enter('taskListCheckMarker');\n    effects.consume(code);\n    effects.exit('taskListCheckMarker');\n    return inside;\n  }\n\n  /**\n   * In task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *        ^\n   * ```\n   *\n   * @type {State}\n   */\n  function inside(code) {\n    // Currently we match how GH works in files.\n    // To match how GH works in comments, use `markdownSpace` (`[\\t ]`) instead\n    // of `markdownLineEndingOrSpace` (`[\\t\\n\\r ]`).\n    if (markdownLineEndingOrSpace(code)) {\n      effects.enter('taskListCheckValueUnchecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueUnchecked');\n      return close;\n    }\n    if (code === 88 || code === 120) {\n      effects.enter('taskListCheckValueChecked');\n      effects.consume(code);\n      effects.exit('taskListCheckValueChecked');\n      return close;\n    }\n    return nok(code);\n  }\n\n  /**\n   * At close of task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *         ^\n   * ```\n   *\n   * @type {State}\n   */\n  function close(code) {\n    if (code === 93) {\n      effects.enter('taskListCheckMarker');\n      effects.consume(code);\n      effects.exit('taskListCheckMarker');\n      effects.exit('taskListCheck');\n      return after;\n    }\n    return nok(code);\n  }\n\n  /**\n   * @type {State}\n   */\n  function after(code) {\n    // EOL in paragraph means there must be something else after it.\n    if (markdownLineEnding(code)) {\n      return ok(code);\n    }\n\n    // Space or tab?\n    // Check what comes after.\n    if (markdownSpace(code)) {\n      return effects.check({\n        tokenize: spaceThenNonSpace\n      }, ok, nok)(code);\n    }\n\n    // EOF, or non-whitespace, both wrong.\n    return nok(code);\n  }\n}\n\n/**\n * @this {TokenizeContext}\n * @type {Tokenizer}\n */\nfunction spaceThenNonSpace(effects, ok, nok) {\n  return factorySpace(effects, after, \"whitespace\");\n\n  /**\n   * After whitespace, after task list item check.\n   *\n   * ```markdown\n   * > | * [x] y.\n   *           ^\n   * ```\n   *\n   * @type {State}\n   */\n  function after(code) {\n    // EOF means there was nothing, so bad.\n    // EOL means there’s content after it, so good.\n    // Impossible to have more spaces.\n    // Anything else is good.\n    return code === null ? nok(code) : ok(code);\n  }\n}","/**\n * @import {Root} from 'mdast'\n * @import {Options} from 'remark-gfm'\n * @import {} from 'remark-parse'\n * @import {} from 'remark-stringify'\n * @import {Processor} from 'unified'\n */\n\nimport {gfmFromMarkdown, gfmToMarkdown} from 'mdast-util-gfm'\nimport {gfm} from 'micromark-extension-gfm'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\n/**\n * Add support GFM (autolink literals, footnotes, strikethrough, tables,\n * tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {undefined}\n *   Nothing.\n */\nexport default function remarkGfm(options) {\n  // @ts-expect-error: TS is wrong about `this`.\n  // eslint-disable-next-line unicorn/no-this-assignment\n  const self = /** @type {Processor<Root>} */ (this)\n  const settings = options || emptyOptions\n  const data = self.data()\n\n  const micromarkExtensions =\n    data.micromarkExtensions || (data.micromarkExtensions = [])\n  const fromMarkdownExtensions =\n    data.fromMarkdownExtensions || (data.fromMarkdownExtensions = [])\n  const toMarkdownExtensions =\n    data.toMarkdownExtensions || (data.toMarkdownExtensions = [])\n\n  micromarkExtensions.push(gfm(settings))\n  fromMarkdownExtensions.push(gfmFromMarkdown())\n  toMarkdownExtensions.push(gfmToMarkdown(settings))\n}\n","/**\n * @typedef {import('micromark-extension-gfm-footnote').HtmlOptions} HtmlOptions\n * @typedef {import('micromark-extension-gfm-strikethrough').Options} Options\n * @typedef {import('micromark-util-types').Extension} Extension\n * @typedef {import('micromark-util-types').HtmlExtension} HtmlExtension\n */\n\nimport {\n  combineExtensions,\n  combineHtmlExtensions\n} from 'micromark-util-combine-extensions'\nimport {\n  gfmAutolinkLiteral,\n  gfmAutolinkLiteralHtml\n} from 'micromark-extension-gfm-autolink-literal'\nimport {gfmFootnote, gfmFootnoteHtml} from 'micromark-extension-gfm-footnote'\nimport {\n  gfmStrikethrough,\n  gfmStrikethroughHtml\n} from 'micromark-extension-gfm-strikethrough'\nimport {gfmTable, gfmTableHtml} from 'micromark-extension-gfm-table'\nimport {gfmTagfilterHtml} from 'micromark-extension-gfm-tagfilter'\nimport {\n  gfmTaskListItem,\n  gfmTaskListItemHtml\n} from 'micromark-extension-gfm-task-list-item'\n\n/**\n * Create an extension for `micromark` to enable GFM syntax.\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-strikethrough`.\n * @returns {Extension}\n *   Extension for `micromark` that can be passed in `extensions` to enable GFM\n *   syntax.\n */\nexport function gfm(options) {\n  return combineExtensions([\n    gfmAutolinkLiteral(),\n    gfmFootnote(),\n    gfmStrikethrough(options),\n    gfmTable(),\n    gfmTaskListItem()\n  ])\n}\n\n/**\n * Create an extension for `micromark` to support GFM when serializing to HTML.\n *\n * @param {HtmlOptions | null | undefined} [options]\n *   Configuration (optional).\n *\n *   Passed to `micromark-extens-gfm-footnote`.\n * @returns {HtmlExtension}\n *   Extension for `micromark` that can be passed in `htmlExtensions` to\n *   support GFM when serializing to HTML.\n */\nexport function gfmHtml(options) {\n  return combineHtmlExtensions([\n    gfmAutolinkLiteralHtml(),\n    gfmFootnoteHtml(options),\n    gfmStrikethroughHtml(),\n    gfmTableHtml(),\n    gfmTagfilterHtml(),\n    gfmTaskListItemHtml()\n  ])\n}\n","/**\n * @import {Extension as FromMarkdownExtension} from 'mdast-util-from-markdown'\n * @import {Options} from 'mdast-util-gfm'\n * @import {Options as ToMarkdownExtension} from 'mdast-util-to-markdown'\n */\n\nimport {\n  gfmAutolinkLiteralFromMarkdown,\n  gfmAutolinkLiteralToMarkdown\n} from 'mdast-util-gfm-autolink-literal'\nimport {\n  gfmFootnoteFromMarkdown,\n  gfmFootnoteToMarkdown\n} from 'mdast-util-gfm-footnote'\nimport {\n  gfmStrikethroughFromMarkdown,\n  gfmStrikethroughToMarkdown\n} from 'mdast-util-gfm-strikethrough'\nimport {gfmTableFromMarkdown, gfmTableToMarkdown} from 'mdast-util-gfm-table'\nimport {\n  gfmTaskListItemFromMarkdown,\n  gfmTaskListItemToMarkdown\n} from 'mdast-util-gfm-task-list-item'\n\n/**\n * Create an extension for `mdast-util-from-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @returns {Array<FromMarkdownExtension>}\n *   Extension for `mdast-util-from-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmFromMarkdown() {\n  return [\n    gfmAutolinkLiteralFromMarkdown(),\n    gfmFootnoteFromMarkdown(),\n    gfmStrikethroughFromMarkdown(),\n    gfmTableFromMarkdown(),\n    gfmTaskListItemFromMarkdown()\n  ]\n}\n\n/**\n * Create an extension for `mdast-util-to-markdown` to enable GFM (autolink\n * literals, footnotes, strikethrough, tables, tasklists).\n *\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {ToMarkdownExtension}\n *   Extension for `mdast-util-to-markdown` to enable GFM (autolink literals,\n *   footnotes, strikethrough, tables, tasklists).\n */\nexport function gfmToMarkdown(options) {\n  return {\n    extensions: [\n      gfmAutolinkLiteralToMarkdown(),\n      gfmFootnoteToMarkdown(options),\n      gfmStrikethroughToMarkdown(),\n      gfmTableToMarkdown(options),\n      gfmTaskListItemToMarkdown()\n    ]\n  }\n}\n","import \"src/style.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/style.css.ts.vanilla.css\\\",\\\"source\\\":\\\"LnV4ZTRrajAgewogIC0tdXhlNGtqMTogIzQ5NDc1NzsKICAtLXV4ZTRrajI6ICNkOTRiOTU7CiAgLS11eGU0a2ozOiAjZGRkZGRjOwogIC0tdXhlNGtqNDogI2I2YjZiNjsKfQ==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nimport \"src/components/organisms/markdown-renderer/index.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/organisms/markdown-renderer/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"#H4sIAAAAAAAAA9VVwW6cMBC971eMElVKqhIBYVeJkfZHqqoy2CxuvB7HmCzbKv9eAWYXMKQ99FL5gjzznsczz4+H7zGj6nUXwq8NwEkwWxKIwvBTunnfPLhg1AWP1ByEIhDtdAPhOB538QKVDSrxkxOIE92kw9aJi0NpCSThBPQIe/g8Ig4s6gE5ziqjK/uFahumsxOfPFy8gAs93NbDPfq4R/+82MMlCzjvvOjZw219XOyd1zZ9iqtlh5OiskFlz5IH9qw5ASaqPL12VfLCLrUV1+A8F0cq/4JBio5BU8aEOvTj86ZAu5wcJRoCb9TcBUHd8OTlR3Q/SyQlvnGzlh7P0sXx4LTTBBPVApTXYfcqHIT7pBugtUWvjzky3rFlaBg3BCLdQIVSMLjNdu1KL8HAUCbqioCTuLt+j0mmB4bDRkbzl4PBWrHA3e2WF+26TLmgRyHPBI6osNI059Mi9X9Q476r8QuMd7Th18qZqLSkZwKZxPwlnfsNQCuAQuIpaAhUuUEpJ7snQzUBhcbp01221WewIJnkfp7U6Zz0XZvHhlJcMz7uY6IbiOJ/1jdLMzkebkskqa44geFrrT1LRHuwJaesJ/Sqm7dohSFDdgZriLJlkJdCsrtY3a9QXi68xGXZVBJu14zNo5XA3DmqWsPe+cfEHDOUbDGVkIwXaLjzEGW5sgRuvt6sZNPCXgxnSP42S34oEK1Cy6vhh3JRsULFV5OdvQ7m2Huob+JThHPUqyeTBb/a98/ntUY70cxYxclExX/U/urjuY4nbhW/m1pH+0uAcOUNFM/tSjfvvwGPRWWvYggAAA==\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var articleRoot = '_2danq63';\nexport var blockStyle = '_2danq61';\nexport var css = '_2danq60';\nexport var h2Style = '_2danq62';","import type { FC } from \"react\";\nimport { Tag } from \"@/components/atoms/tag\";\nimport { createTagSlug } from \"@/utils/tagUtils\";\nimport { containerStyle } from \"./index.css\";\n\ntype Props = {\n  tags: string[];\n  clickable?: boolean;\n  title?: string;\n};\n\nexport const TagList: FC<Props> = ({ tags, clickable = true, title }) => {\n  if (!tags || tags.length === 0) {\n    return null;\n  }\n\n  return (\n    <div className={containerStyle}>\n      {title && <span>{title}</span>}\n      {tags.map((tag) => (\n        <Tag\n          key={tag}\n          tag={tag}\n          tagSlug={createTagSlug(tag)}\n          clickable={clickable}\n        />\n      ))}\n    </div>\n  );\n};\n","import \"src/components/organisms/tag-list/index.css.ts.vanilla.css!=!../../../../node_modules/@vanilla-extract/webpack-plugin/virtualFileLoader/dist/vanilla-extract-webpack-plugin-virtualFileLoader.cjs.js?{\\\"fileName\\\":\\\"src/components/organisms/tag-list/index.css.ts.vanilla.css\\\",\\\"source\\\":\\\"Ll8xd2EzMXVmMCB7CiAgZGlzcGxheTogZmxleDsKICBmbGV4LXdyYXA6IHdyYXA7CiAgYWxpZ24taXRlbXM6IGNlbnRlcjsKICBnYXA6IDAuMmVtOwogIG1hcmdpbi10b3A6IDAuNWVtOwp9\\\"}!../../../../node_modules/@vanilla-extract/webpack-plugin/extracted.js\"\nexport var containerStyle = '_1wa31uf0';","/**\n * @import {Schema as SchemaType, Space} from 'property-information'\n */\n\n/** @type {SchemaType} */\nexport class Schema {\n  /**\n   * @param {SchemaType['property']} property\n   *   Property.\n   * @param {SchemaType['normal']} normal\n   *   Normal.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Schema.\n   */\n  constructor(property, normal, space) {\n    this.normal = normal\n    this.property = property\n\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\nSchema.prototype.normal = {}\nSchema.prototype.property = {}\nSchema.prototype.space = undefined\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {ReadonlyArray<Schema>} definitions\n *   Definitions.\n * @param {Space | undefined} [space]\n *   Space.\n * @returns {Schema}\n *   Schema.\n */\nexport function merge(definitions, space) {\n  /** @type {Record<string, Info>} */\n  const property = {}\n  /** @type {Record<string, string>} */\n  const normal = {}\n\n  for (const definition of definitions) {\n    Object.assign(property, definition.property)\n    Object.assign(normal, definition.normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * Get the cleaned case insensitive form of an attribute or property.\n *\n * @param {string} value\n *   An attribute-like or property-like name.\n * @returns {string}\n *   Value that can be used to look up the properly cased property on a\n *   `Schema`.\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","/**\n * @import {Info as InfoType} from 'property-information'\n */\n\n/** @type {InfoType} */\nexport class Info {\n  /**\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute) {\n    this.attribute = attribute\n    this.property = property\n  }\n}\n\nInfo.prototype.attribute = ''\nInfo.prototype.booleanish = false\nInfo.prototype.boolean = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.defined = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.number = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.property = ''\nInfo.prototype.spaceSeparated = false\nInfo.prototype.space = undefined\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","/**\n * @import {Space} from 'property-information'\n */\n\nimport {Info} from './info.js'\nimport * as types from './types.js'\n\nconst checks = /** @type {ReadonlyArray<keyof typeof types>} */ (\n  Object.keys(types)\n)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   *   Property.\n   * @param {string} attribute\n   *   Attribute.\n   * @param {number | null | undefined} [mask]\n   *   Mask.\n   * @param {Space | undefined} [space]\n   *   Space.\n   * @returns\n   *   Info.\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @template {keyof DefinedInfo} Key\n *   Key type.\n * @param {DefinedInfo} values\n *   Info.\n * @param {Key} key\n *   Key.\n * @param {DefinedInfo[Key]} value\n *   Value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction mark(values, key, value) {\n  if (value) {\n    values[key] = value\n  }\n}\n","/**\n * @import {Info, Space} from 'property-information'\n */\n\n/**\n * @typedef Definition\n *   Definition of a schema.\n * @property {Record<string, string> | undefined} [attributes]\n *   Normalzed names to special attribute case.\n * @property {ReadonlyArray<string> | undefined} [mustUseProperty]\n *   Normalized names that must be set as properties.\n * @property {Record<string, number | null>} properties\n *   Property names to their types.\n * @property {Space | undefined} [space]\n *   Space.\n * @property {Transform} transform\n *   Transform a property name.\n */\n\n/**\n * @callback Transform\n *   Transform.\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Attribute.\n */\n\nimport {normalize} from '../normalize.js'\nimport {DefinedInfo} from './defined-info.js'\nimport {Schema} from './schema.js'\n\n/**\n * @param {Definition} definition\n *   Definition.\n * @returns {Schema}\n *   Schema.\n */\nexport function create(definition) {\n  /** @type {Record<string, Info>} */\n  const properties = {}\n  /** @type {Record<string, string>} */\n  const normals = {}\n\n  for (const [property, value] of Object.entries(definition.properties)) {\n    const info = new DefinedInfo(\n      property,\n      definition.transform(definition.attributes || {}, property),\n      value,\n      definition.space\n    )\n\n    if (\n      definition.mustUseProperty &&\n      definition.mustUseProperty.includes(property)\n    ) {\n      info.mustUseProperty = true\n    }\n\n    properties[property] = info\n\n    normals[normalize(property)] = property\n    normals[normalize(info.attribute)] = property\n  }\n\n  return new Schema(properties, normals, definition.space)\n}\n","import {create} from './util/create.js'\nimport {booleanish, number, spaceSeparated} from './util/types.js'\n\nexport const aria = create({\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  },\n  transform(_, property) {\n    return property === 'role'\n      ? property\n      : 'aria-' + property.slice(4).toLowerCase()\n  }\n})\n","/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} attribute\n *   Attribute.\n * @returns {string}\n *   Transformed attribute.\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n *   Attributes.\n * @param {string} property\n *   Property.\n * @returns {string}\n *   Transformed property.\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  booleanish,\n  boolean,\n  commaSeparated,\n  number,\n  overloadedBoolean,\n  spaceSeparated\n} from './util/types.js'\n\nexport const html = create({\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: overloadedBoolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  },\n  space: 'html',\n  transform: caseInsensitiveTransform\n})\n","import {caseSensitiveTransform} from './util/case-sensitive-transform.js'\nimport {create} from './util/create.js'\nimport {\n  boolean,\n  commaOrSpaceSeparated,\n  commaSeparated,\n  number,\n  spaceSeparated\n} from './util/types.js'\n\nexport const svg = create({\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  },\n  space: 'svg',\n  transform: caseSensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  },\n  space: 'xlink',\n  transform(_, property) {\n    return 'xlink:' + property.slice(5).toLowerCase()\n  }\n})\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  properties: {xmlnsXLink: null, xmlns: null},\n  space: 'xmlns',\n  transform: caseInsensitiveTransform\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  properties: {xmlBase: null, xmlLang: null, xmlSpace: null},\n  space: 'xml',\n  transform(_, property) {\n    return 'xml:' + property.slice(3).toLowerCase()\n  }\n})\n","// Note: types exposed from `index.d.ts`.\nimport {merge} from './lib/util/merge.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\nimport {xlink} from './lib/xlink.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {xml} from './lib/xml.js'\n\nexport {hastToReact} from './lib/hast-to-react.js'\n\nexport const html = merge([aria, htmlBase, xlink, xmlns, xml], 'html')\n\nexport {find} from './lib/find.js'\nexport {normalize} from './lib/normalize.js'\n\nexport const svg = merge([aria, svgBase, xlink, xmlns, xml], 'svg')\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Properties} Properties\n */\n\n/**\n * @template {string} SimpleSelector\n *   Selector type.\n * @template {string} DefaultTagName\n *   Default tag name.\n * @typedef {(\n *   SimpleSelector extends ''\n *     ? DefaultTagName\n *     : SimpleSelector extends `${infer TagName}.${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends `${infer TagName}#${infer Rest}`\n *     ? ExtractTagName<TagName, DefaultTagName>\n *     : SimpleSelector extends string\n *     ? SimpleSelector\n *     : DefaultTagName\n * )} ExtractTagName\n *   Extract tag name from a simple selector.\n */\n\nconst search = /[#.]/g\n\n/**\n * Create a hast element from a simple CSS selector.\n *\n * @template {string} Selector\n *   Type of selector.\n * @template {string} [DefaultTagName='div']\n *   Type of default tag name (default: `'div'`).\n * @param {Selector | null | undefined} [selector]\n *   Simple CSS selector (optional).\n *\n *   Can contain a tag name (`foo`), classes (`.bar`), and an ID (`#baz`).\n *   Multiple classes are allowed.\n *   Uses the last ID if multiple IDs are found.\n * @param {DefaultTagName | null | undefined} [defaultTagName='div']\n *   Tag name to use if `selector` does not specify one (default: `'div'`).\n * @returns {Element & {tagName: ExtractTagName<Selector, DefaultTagName>}}\n *   Built element.\n */\nexport function parseSelector(selector, defaultTagName) {\n  const value = selector || ''\n  /** @type {Properties} */\n  const props = {}\n  let start = 0\n  /** @type {string | undefined} */\n  let previous\n  /** @type {string | undefined} */\n  let tagName\n\n  while (start < value.length) {\n    search.lastIndex = start\n    const match = search.exec(value)\n    const subvalue = value.slice(start, match ? match.index : value.length)\n\n    if (subvalue) {\n      if (!previous) {\n        tagName = subvalue\n      } else if (previous === '#') {\n        props.id = subvalue\n      } else if (Array.isArray(props.className)) {\n        props.className.push(subvalue)\n      } else {\n        props.className = [subvalue]\n      }\n\n      start += subvalue.length\n    }\n\n    if (match) {\n      previous = match[0]\n      start++\n    }\n  }\n\n  return {\n    type: 'element',\n    // @ts-expect-error: tag name is parsed.\n    tagName: tagName || defaultTagName || 'div',\n    properties: props,\n    children: []\n  }\n}\n","/**\n * @import {Schema} from 'property-information'\n */\n\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\nimport {normalize} from './normalize.js'\n\nconst cap = /[A-Z]/g\nconst dash = /-[a-z]/g\nconst valid = /^data[-\\w.:]+$/i\n\n/**\n * Look up info on a property.\n *\n * In most cases the given `schema` contains info on the property.\n * All standard,\n * most legacy,\n * and some non-standard properties are supported.\n * For these cases,\n * the returned `Info` has hints about the value of the property.\n *\n * `name` can also be a valid data attribute or property,\n * in which case an `Info` object with the correctly cased `attribute` and\n * `property` is returned.\n *\n * `name` can be an unknown attribute,\n * in which case an `Info` object with `attribute` and `property` set to the\n * given name is returned.\n * It is not recommended to provide unsupported legacy or recently specced\n * properties.\n *\n *\n * @param {Schema} schema\n *   Schema;\n *   either the `html` or `svg` export.\n * @param {string} value\n *   An attribute-like or property-like name;\n *   it will be passed through `normalize` to hopefully find the correct info.\n * @returns {Info}\n *   Info.\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let property = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      property = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(property, value)\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Kebab.\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n *   Value.\n * @returns {string}\n *   Camel.\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * @import {Element, Nodes, RootContent, Root} from 'hast'\n * @import {Info, Schema} from 'property-information'\n */\n\n/**\n * @typedef {Array<Nodes | PrimitiveChild>} ArrayChildNested\n *   List of children (deep).\n */\n\n/**\n * @typedef {Array<ArrayChildNested | Nodes | PrimitiveChild>} ArrayChild\n *   List of children.\n */\n\n/**\n * @typedef {Array<number | string>} ArrayValue\n *   List of property values for space- or comma separated values (such as `className`).\n */\n\n/**\n * @typedef {ArrayChild | Nodes | PrimitiveChild} Child\n *   Acceptable child value.\n */\n\n/**\n * @typedef {number | string | null | undefined} PrimitiveChild\n *   Primitive children, either ignored (nullish), or turned into text nodes.\n */\n\n/**\n * @typedef {boolean | number | string | null | undefined} PrimitiveValue\n *   Primitive property value.\n */\n\n/**\n * @typedef {Record<string, PropertyValue | Style>} Properties\n *   Acceptable value for element properties.\n */\n\n/**\n * @typedef {ArrayValue | PrimitiveValue} PropertyValue\n *   Primitive value or list value.\n */\n\n/**\n * @typedef {Element | Root} Result\n *   Result from a `h` (or `s`) call.\n */\n\n/**\n * @typedef {number | string} StyleValue\n *   Value for a CSS style field.\n */\n\n/**\n * @typedef {Record<string, StyleValue>} Style\n *   Supported value of a `style` prop.\n */\n\nimport {parse as parseCommas} from 'comma-separated-tokens'\nimport {parseSelector} from 'hast-util-parse-selector'\nimport {find, normalize} from 'property-information'\nimport {parse as parseSpaces} from 'space-separated-tokens'\n\n/**\n * @param {Schema} schema\n *   Schema to use.\n * @param {string} defaultTagName\n *   Default tag name.\n * @param {ReadonlyArray<string> | undefined} [caseSensitive]\n *   Case-sensitive tag names (default: `undefined`).\n * @returns\n *   `h`.\n */\nexport function createH(schema, defaultTagName, caseSensitive) {\n  const adjust = caseSensitive ? createAdjustMap(caseSensitive) : undefined\n\n  /**\n   * Hyperscript compatible DSL for creating virtual hast trees.\n   *\n   * @overload\n   * @param {null | undefined} [selector]\n   * @param {...Child} children\n   * @returns {Root}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {Properties} properties\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @overload\n   * @param {string} selector\n   * @param {...Child} children\n   * @returns {Element}\n   *\n   * @param {string | null | undefined} [selector]\n   *   Selector.\n   * @param {Child | Properties | null | undefined} [properties]\n   *   Properties (or first child) (default: `undefined`).\n   * @param {...Child} children\n   *   Children.\n   * @returns {Result}\n   *   Result.\n   */\n  function h(selector, properties, ...children) {\n    /** @type {Result} */\n    let node\n\n    if (selector === null || selector === undefined) {\n      node = {type: 'root', children: []}\n      // Properties are not supported for roots.\n      const child = /** @type {Child} */ (properties)\n      children.unshift(child)\n    } else {\n      node = parseSelector(selector, defaultTagName)\n      // Normalize the name.\n      const lower = node.tagName.toLowerCase()\n      const adjusted = adjust ? adjust.get(lower) : undefined\n      node.tagName = adjusted || lower\n\n      // Handle properties.\n      if (isChild(properties)) {\n        children.unshift(properties)\n      } else {\n        for (const [key, value] of Object.entries(properties)) {\n          addProperty(schema, node.properties, key, value)\n        }\n      }\n    }\n\n    // Handle children.\n    for (const child of children) {\n      addChild(node.children, child)\n    }\n\n    if (node.type === 'element' && node.tagName === 'template') {\n      node.content = {type: 'root', children: node.children}\n      node.children = []\n    }\n\n    return node\n  }\n\n  return h\n}\n\n/**\n * Check if something is properties or a child.\n *\n * @param {Child | Properties} value\n *   Value to check.\n * @returns {value is Child}\n *   Whether `value` is definitely a child.\n */\nfunction isChild(value) {\n  // Never properties if not an object.\n  if (value === null || typeof value !== 'object' || Array.isArray(value)) {\n    return true\n  }\n\n  // Never node without `type`; that’s the main discriminator.\n  if (typeof value.type !== 'string') return false\n\n  // Slower check: never property value if object or array with\n  // non-number/strings.\n  const record = /** @type {Record<string, unknown>} */ (value)\n  const keys = Object.keys(value)\n\n  for (const key of keys) {\n    const value = record[key]\n\n    if (value && typeof value === 'object') {\n      if (!Array.isArray(value)) return true\n\n      const list = /** @type {ReadonlyArray<unknown>} */ (value)\n\n      for (const item of list) {\n        if (typeof item !== 'number' && typeof item !== 'string') {\n          return true\n        }\n      }\n    }\n  }\n\n  // Also see empty `children` as a node.\n  if ('children' in value && Array.isArray(value.children)) {\n    return true\n  }\n\n  // Default to properties, someone can always pass an empty object,\n  // put `data: {}` in a node,\n  // or wrap it in an array.\n  return false\n}\n\n/**\n * @param {Schema} schema\n *   Schema.\n * @param {Properties} properties\n *   Properties object.\n * @param {string} key\n *   Property name.\n * @param {PropertyValue | Style} value\n *   Property value.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addProperty(schema, properties, key, value) {\n  const info = find(schema, key)\n  /** @type {PropertyValue} */\n  let result\n\n  // Ignore nullish and NaN values.\n  if (value === null || value === undefined) return\n\n  if (typeof value === 'number') {\n    // Ignore NaN.\n    if (Number.isNaN(value)) return\n\n    result = value\n  }\n  // Booleans.\n  else if (typeof value === 'boolean') {\n    result = value\n  }\n  // Handle list values.\n  else if (typeof value === 'string') {\n    if (info.spaceSeparated) {\n      result = parseSpaces(value)\n    } else if (info.commaSeparated) {\n      result = parseCommas(value)\n    } else if (info.commaOrSpaceSeparated) {\n      result = parseSpaces(parseCommas(value).join(' '))\n    } else {\n      result = parsePrimitive(info, info.property, value)\n    }\n  } else if (Array.isArray(value)) {\n    result = [...value]\n  } else {\n    result = info.property === 'style' ? style(value) : String(value)\n  }\n\n  if (Array.isArray(result)) {\n    /** @type {Array<number | string>} */\n    const finalResult = []\n\n    for (const item of result) {\n      // Assume no booleans in array.\n      finalResult.push(\n        /** @type {number | string} */ (\n          parsePrimitive(info, info.property, item)\n        )\n      )\n    }\n\n    result = finalResult\n  }\n\n  // Class names (which can be added both on the `selector` and here).\n  if (info.property === 'className' && Array.isArray(properties.className)) {\n    // Assume no booleans in `className`.\n    result = properties.className.concat(\n      /** @type {Array<number | string> | number | string} */ (result)\n    )\n  }\n\n  properties[info.property] = result\n}\n\n/**\n * @param {Array<RootContent>} nodes\n *   Children.\n * @param {Child} value\n *   Child.\n * @returns {undefined}\n *   Nothing.\n */\nfunction addChild(nodes, value) {\n  if (value === null || value === undefined) {\n    // Empty.\n  } else if (typeof value === 'number' || typeof value === 'string') {\n    nodes.push({type: 'text', value: String(value)})\n  } else if (Array.isArray(value)) {\n    for (const child of value) {\n      addChild(nodes, child)\n    }\n  } else if (typeof value === 'object' && 'type' in value) {\n    if (value.type === 'root') {\n      addChild(nodes, value.children)\n    } else {\n      nodes.push(value)\n    }\n  } else {\n    throw new Error('Expected node, nodes, or string, got `' + value + '`')\n  }\n}\n\n/**\n * Parse a single primitives.\n *\n * @param {Info} info\n *   Property information.\n * @param {string} name\n *   Property name.\n * @param {PrimitiveValue} value\n *   Property value.\n * @returns {PrimitiveValue}\n *   Property value.\n */\nfunction parsePrimitive(info, name, value) {\n  if (typeof value === 'string') {\n    if (info.number && value && !Number.isNaN(Number(value))) {\n      return Number(value)\n    }\n\n    if (\n      (info.boolean || info.overloadedBoolean) &&\n      (value === '' || normalize(value) === normalize(name))\n    ) {\n      return true\n    }\n  }\n\n  return value\n}\n\n/**\n * Serialize a `style` object as a string.\n *\n * @param {Style} styles\n *   Style object.\n * @returns {string}\n *   CSS string.\n */\nfunction style(styles) {\n  /** @type {Array<string>} */\n  const result = []\n\n  for (const [key, value] of Object.entries(styles)) {\n    result.push([key, value].join(': '))\n  }\n\n  return result.join('; ')\n}\n\n/**\n * Create a map to adjust casing.\n *\n * @param {ReadonlyArray<string>} values\n *   List of properly cased keys.\n * @returns {Map<string, string>}\n *   Map of lowercase keys to uppercase keys.\n */\nfunction createAdjustMap(values) {\n  /** @type {Map<string, string>} */\n  const result = new Map()\n\n  for (const value of values) {\n    result.set(value.toLowerCase(), value)\n  }\n\n  return result\n}\n","/**\n * List of case-sensitive SVG tag names.\n *\n * @type {ReadonlyArray<string>}\n */\nexport const svgCaseSensitiveTagNames = [\n  'altGlyph',\n  'altGlyphDef',\n  'altGlyphItem',\n  'animateColor',\n  'animateMotion',\n  'animateTransform',\n  'clipPath',\n  'feBlend',\n  'feColorMatrix',\n  'feComponentTransfer',\n  'feComposite',\n  'feConvolveMatrix',\n  'feDiffuseLighting',\n  'feDisplacementMap',\n  'feDistantLight',\n  'feDropShadow',\n  'feFlood',\n  'feFuncA',\n  'feFuncB',\n  'feFuncG',\n  'feFuncR',\n  'feGaussianBlur',\n  'feImage',\n  'feMerge',\n  'feMergeNode',\n  'feMorphology',\n  'feOffset',\n  'fePointLight',\n  'feSpecularLighting',\n  'feSpotLight',\n  'feTile',\n  'feTurbulence',\n  'foreignObject',\n  'glyphRef',\n  'linearGradient',\n  'radialGradient',\n  'solidColor',\n  'textArea',\n  'textPath'\n]\n","// Register the JSX namespace on `h`.\n/**\n * @typedef {import('./jsx-classic.js').Element} h.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} h.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} h.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} h.JSX.IntrinsicElements\n */\n\n// Register the JSX namespace on `s`.\n/**\n * @typedef {import('./jsx-classic.js').Element} s.JSX.Element\n * @typedef {import('./jsx-classic.js').ElementChildrenAttribute} s.JSX.ElementChildrenAttribute\n * @typedef {import('./jsx-classic.js').IntrinsicAttributes} s.JSX.IntrinsicAttributes\n * @typedef {import('./jsx-classic.js').IntrinsicElements} s.JSX.IntrinsicElements\n */\n\nimport {html, svg} from 'property-information'\nimport {createH} from './create-h.js'\nimport {svgCaseSensitiveTagNames} from './svg-case-sensitive-tag-names.js'\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const h = createH(html, 'div')\n\n// Note: this explicit type is needed, otherwise TS creates broken types.\n/** @type {ReturnType<createH>} */\nexport const s = createH(svg, 'g', svgCaseSensitiveTagNames)\n","/**\n * @import {VFile, Value} from 'vfile'\n * @import {Location} from 'vfile-location'\n */\n\n/**\n * Create an index of the given document to translate between line/column and\n * offset based positional info.\n *\n * Also implemented in Rust in [`wooorm/markdown-rs`][markdown-rs].\n *\n * [markdown-rs]: https://github.com/wooorm/markdown-rs/blob/main/src/util/location.rs\n *\n * @param {VFile | Value} file\n *   File to index.\n * @returns {Location}\n *   Accessors for index.\n */\nexport function location(file) {\n  const value = String(file)\n  /**\n   * List, where each index is a line number (0-based), and each value is the\n   * byte index *after* where the line ends.\n   *\n   * @type {Array<number>}\n   */\n  const indices = []\n\n  return {toOffset, toPoint}\n\n  /** @type {Location['toPoint']} */\n  function toPoint(offset) {\n    if (typeof offset === 'number' && offset > -1 && offset <= value.length) {\n      let index = 0\n\n      while (true) {\n        let end = indices[index]\n\n        if (end === undefined) {\n          const eol = next(value, indices[index - 1])\n          end = eol === -1 ? value.length + 1 : eol + 1\n          indices[index] = end\n        }\n\n        if (end > offset) {\n          return {\n            line: index + 1,\n            column: offset - (index > 0 ? indices[index - 1] : 0) + 1,\n            offset\n          }\n        }\n\n        index++\n      }\n    }\n  }\n\n  /** @type {Location['toOffset']} */\n  function toOffset(point) {\n    if (\n      point &&\n      typeof point.line === 'number' &&\n      typeof point.column === 'number' &&\n      !Number.isNaN(point.line) &&\n      !Number.isNaN(point.column)\n    ) {\n      while (indices.length < point.line) {\n        const from = indices[indices.length - 1]\n        const eol = next(value, from)\n        const end = eol === -1 ? value.length + 1 : eol + 1\n        if (from === end) break\n        indices.push(end)\n      }\n\n      const offset =\n        (point.line > 1 ? indices[point.line - 2] : 0) + point.column - 1\n      // The given `column` could not exist on this line.\n      if (offset < indices[point.line - 1]) return offset\n    }\n  }\n}\n\n/**\n * @param {string} value\n * @param {number} from\n */\nfunction next(value, from) {\n  const cr = value.indexOf('\\r', from)\n  const lf = value.indexOf('\\n', from)\n  if (lf === -1) return cr\n  if (cr === -1 || cr + 1 === lf) return lf\n  return cr < lf ? cr : lf\n}\n","/**\n * Map of web namespaces.\n *\n * @type {Record<string, string>}\n */\nexport const webNamespaces = {\n  html: 'http://www.w3.org/1999/xhtml',\n  mathml: 'http://www.w3.org/1998/Math/MathML',\n  svg: 'http://www.w3.org/2000/svg',\n  xlink: 'http://www.w3.org/1999/xlink',\n  xml: 'http://www.w3.org/XML/1998/namespace',\n  xmlns: 'http://www.w3.org/2000/xmlns/'\n}\n","/**\n * @import {ElementData, Element, Nodes, RootContent, Root} from 'hast'\n * @import {DefaultTreeAdapterMap, Token} from 'parse5'\n * @import {Schema} from 'property-information'\n * @import {Point, Position} from 'unist'\n * @import {VFile} from 'vfile'\n * @import {Options} from 'hast-util-from-parse5'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {VFile | undefined} file\n *   Corresponding file.\n * @property {boolean} location\n *   Whether location info was found.\n * @property {Schema} schema\n *   Current schema.\n * @property {boolean | undefined} verbose\n *   Add extra positional info.\n */\n\nimport {ok as assert} from 'devlop'\nimport {h, s} from 'hastscript'\nimport {find, html, svg} from 'property-information'\nimport {location} from 'vfile-location'\nimport {webNamespaces} from 'web-namespaces'\n\nconst own = {}.hasOwnProperty\n/** @type {unknown} */\n// type-coverage:ignore-next-line\nconst proto = Object.prototype\n\n/**\n * Transform a `parse5` AST to hast.\n *\n * @param {DefaultTreeAdapterMap['node']} tree\n *   `parse5` tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   hast tree.\n */\nexport function fromParse5(tree, options) {\n  const settings = options || {}\n\n  return one(\n    {\n      file: settings.file || undefined,\n      location: false,\n      schema: settings.space === 'svg' ? svg : html,\n      verbose: settings.verbose || false\n    },\n    tree\n  )\n}\n\n/**\n * Transform a node.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} node\n *   p5 node.\n * @returns {Nodes}\n *   hast node.\n */\nfunction one(state, node) {\n  /** @type {Nodes} */\n  let result\n\n  switch (node.nodeName) {\n    case '#comment': {\n      const reference = /** @type {DefaultTreeAdapterMap['commentNode']} */ (\n        node\n      )\n      result = {type: 'comment', value: reference.data}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#document':\n    case '#document-fragment': {\n      const reference =\n        /** @type {DefaultTreeAdapterMap['document'] | DefaultTreeAdapterMap['documentFragment']} */ (\n          node\n        )\n      const quirksMode =\n        'mode' in reference\n          ? reference.mode === 'quirks' || reference.mode === 'limited-quirks'\n          : false\n\n      result = {\n        type: 'root',\n        children: all(state, node.childNodes),\n        data: {quirksMode}\n      }\n\n      if (state.file && state.location) {\n        const document = String(state.file)\n        const loc = location(document)\n        const start = loc.toPoint(0)\n        const end = loc.toPoint(document.length)\n        // Always defined as we give valid input.\n        assert(start, 'expected `start`')\n        assert(end, 'expected `end`')\n        result.position = {start, end}\n      }\n\n      return result\n    }\n\n    case '#documentType': {\n      const reference = /** @type {DefaultTreeAdapterMap['documentType']} */ (\n        node\n      )\n      result = {type: 'doctype'}\n      patch(state, reference, result)\n      return result\n    }\n\n    case '#text': {\n      const reference = /** @type {DefaultTreeAdapterMap['textNode']} */ (node)\n      result = {type: 'text', value: reference.value}\n      patch(state, reference, result)\n      return result\n    }\n\n    // Element.\n    default: {\n      const reference = /** @type {DefaultTreeAdapterMap['element']} */ (node)\n      result = element(state, reference)\n      return result\n    }\n  }\n}\n\n/**\n * Transform children.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Array<DefaultTreeAdapterMap['node']>} nodes\n *   Nodes.\n * @returns {Array<RootContent>}\n *   hast nodes.\n */\nfunction all(state, nodes) {\n  let index = -1\n  /** @type {Array<RootContent>} */\n  const results = []\n\n  while (++index < nodes.length) {\n    // Assume no roots in `nodes`.\n    const result = /** @type {RootContent} */ (one(state, nodes[index]))\n    results.push(result)\n  }\n\n  return results\n}\n\n/**\n * Transform an element.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['element']} node\n *   `parse5` node to transform.\n * @returns {Element}\n *   hast node.\n */\nfunction element(state, node) {\n  const schema = state.schema\n\n  state.schema = node.namespaceURI === webNamespaces.svg ? svg : html\n\n  // Props.\n  let index = -1\n  /** @type {Record<string, string>} */\n  const properties = {}\n\n  while (++index < node.attrs.length) {\n    const attribute = node.attrs[index]\n    const name =\n      (attribute.prefix ? attribute.prefix + ':' : '') + attribute.name\n    if (!own.call(proto, name)) {\n      properties[name] = attribute.value\n    }\n  }\n\n  // Build.\n  const x = state.schema.space === 'svg' ? s : h\n  const result = x(node.tagName, properties, all(state, node.childNodes))\n  patch(state, node, result)\n\n  // Switch content.\n  if (result.tagName === 'template') {\n    const reference = /** @type {DefaultTreeAdapterMap['template']} */ (node)\n    const pos = reference.sourceCodeLocation\n    const startTag = pos && pos.startTag && position(pos.startTag)\n    const endTag = pos && pos.endTag && position(pos.endTag)\n\n    // Root in, root out.\n    const content = /** @type {Root} */ (one(state, reference.content))\n\n    if (startTag && endTag && state.file) {\n      content.position = {start: startTag.end, end: endTag.start}\n    }\n\n    result.content = content\n  }\n\n  state.schema = schema\n\n  return result\n}\n\n/**\n * Patch positional info from `from` onto `to`.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {DefaultTreeAdapterMap['node']} from\n *   p5 node.\n * @param {Nodes} to\n *   hast node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(state, from, to) {\n  if ('sourceCodeLocation' in from && from.sourceCodeLocation && state.file) {\n    const position = createLocation(state, to, from.sourceCodeLocation)\n\n    if (position) {\n      state.location = true\n      to.position = position\n    }\n  }\n}\n\n/**\n * Create clean positional information.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Nodes} node\n *   hast node.\n * @param {Token.ElementLocation} location\n *   p5 location info.\n * @returns {Position | undefined}\n *   Position, or nothing.\n */\nfunction createLocation(state, node, location) {\n  const result = position(location)\n\n  if (node.type === 'element') {\n    const tail = node.children[node.children.length - 1]\n\n    // Bug for unclosed with children.\n    // See: <https://github.com/inikulin/parse5/issues/109>.\n    if (\n      result &&\n      !location.endTag &&\n      tail &&\n      tail.position &&\n      tail.position.end\n    ) {\n      result.end = Object.assign({}, tail.position.end)\n    }\n\n    if (state.verbose) {\n      /** @type {Record<string, Position | undefined>} */\n      const properties = {}\n      /** @type {string} */\n      let key\n\n      if (location.attrs) {\n        for (key in location.attrs) {\n          if (own.call(location.attrs, key)) {\n            properties[find(state.schema, key).property] = position(\n              location.attrs[key]\n            )\n          }\n        }\n      }\n\n      assert(location.startTag, 'a start tag should exist')\n      const opening = position(location.startTag)\n      const closing = location.endTag ? position(location.endTag) : undefined\n      /** @type {ElementData['position']} */\n      const data = {opening}\n      if (closing) data.closing = closing\n      data.properties = properties\n\n      node.data = {position: data}\n    }\n  }\n\n  return result\n}\n\n/**\n * Turn a p5 location into a position.\n *\n * @param {Token.Location} loc\n *   Location.\n * @returns {Position | undefined}\n *   Position or nothing.\n */\nfunction position(loc) {\n  const start = point({\n    line: loc.startLine,\n    column: loc.startCol,\n    offset: loc.startOffset\n  })\n  const end = point({\n    line: loc.endLine,\n    column: loc.endCol,\n    offset: loc.endOffset\n  })\n\n  // @ts-expect-error: we do use `undefined` for points if one or the other\n  // exists.\n  return start || end ? {start, end} : undefined\n}\n\n/**\n * Filter out invalid points.\n *\n * @param {Point} point\n *   Point with potentially `undefined` values.\n * @returns {Point | undefined}\n *   Point or nothing.\n */\nfunction point(point) {\n  return point.line && point.column ? point : undefined\n}\n","/**\n * @typedef {import('./info.js').Info} Info\n * @typedef {Record<string, Info>} Properties\n * @typedef {Record<string, string>} Normal\n */\n\nexport class Schema {\n  /**\n   * @constructor\n   * @param {Properties} property\n   * @param {Normal} normal\n   * @param {string} [space]\n   */\n  constructor(property, normal, space) {\n    this.property = property\n    this.normal = normal\n    if (space) {\n      this.space = space\n    }\n  }\n}\n\n/** @type {Properties} */\nSchema.prototype.property = {}\n/** @type {Normal} */\nSchema.prototype.normal = {}\n/** @type {string|null} */\nSchema.prototype.space = null\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n */\n\nimport {Schema} from './schema.js'\n\n/**\n * @param {Schema[]} definitions\n * @param {string} [space]\n * @returns {Schema}\n */\nexport function merge(definitions, space) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  let index = -1\n\n  while (++index < definitions.length) {\n    Object.assign(property, definitions[index].property)\n    Object.assign(normal, definitions[index].normal)\n  }\n\n  return new Schema(property, normal, space)\n}\n","/**\n * @param {string} value\n * @returns {string}\n */\nexport function normalize(value) {\n  return value.toLowerCase()\n}\n","export class Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   */\n  constructor(property, attribute) {\n    /** @type {string} */\n    this.property = property\n    /** @type {string} */\n    this.attribute = attribute\n  }\n}\n\n/** @type {string|null} */\nInfo.prototype.space = null\nInfo.prototype.boolean = false\nInfo.prototype.booleanish = false\nInfo.prototype.overloadedBoolean = false\nInfo.prototype.number = false\nInfo.prototype.commaSeparated = false\nInfo.prototype.spaceSeparated = false\nInfo.prototype.commaOrSpaceSeparated = false\nInfo.prototype.mustUseProperty = false\nInfo.prototype.defined = false\n","let powers = 0\n\nexport const boolean = increment()\nexport const booleanish = increment()\nexport const overloadedBoolean = increment()\nexport const number = increment()\nexport const spaceSeparated = increment()\nexport const commaSeparated = increment()\nexport const commaOrSpaceSeparated = increment()\n\nfunction increment() {\n  return 2 ** ++powers\n}\n","import {Info} from './info.js'\nimport * as types from './types.js'\n\n/** @type {Array<keyof types>} */\n// @ts-expect-error: hush.\nconst checks = Object.keys(types)\n\nexport class DefinedInfo extends Info {\n  /**\n   * @constructor\n   * @param {string} property\n   * @param {string} attribute\n   * @param {number|null} [mask]\n   * @param {string} [space]\n   */\n  constructor(property, attribute, mask, space) {\n    let index = -1\n\n    super(property, attribute)\n\n    mark(this, 'space', space)\n\n    if (typeof mask === 'number') {\n      while (++index < checks.length) {\n        const check = checks[index]\n        mark(this, checks[index], (mask & types[check]) === types[check])\n      }\n    }\n  }\n}\n\nDefinedInfo.prototype.defined = true\n\n/**\n * @param {DefinedInfo} values\n * @param {string} key\n * @param {unknown} value\n */\nfunction mark(values, key, value) {\n  if (value) {\n    // @ts-expect-error: assume `value` matches the expected value of `key`.\n    values[key] = value\n  }\n}\n","/**\n * @typedef {import('./schema.js').Properties} Properties\n * @typedef {import('./schema.js').Normal} Normal\n *\n * @typedef {Record<string, string>} Attributes\n *\n * @typedef {Object} Definition\n * @property {Record<string, number|null>} properties\n * @property {(attributes: Attributes, property: string) => string} transform\n * @property {string} [space]\n * @property {Attributes} [attributes]\n * @property {Array<string>} [mustUseProperty]\n */\n\nimport {normalize} from '../normalize.js'\nimport {Schema} from './schema.js'\nimport {DefinedInfo} from './defined-info.js'\n\nconst own = {}.hasOwnProperty\n\n/**\n * @param {Definition} definition\n * @returns {Schema}\n */\nexport function create(definition) {\n  /** @type {Properties} */\n  const property = {}\n  /** @type {Normal} */\n  const normal = {}\n  /** @type {string} */\n  let prop\n\n  for (prop in definition.properties) {\n    if (own.call(definition.properties, prop)) {\n      const value = definition.properties[prop]\n      const info = new DefinedInfo(\n        prop,\n        definition.transform(definition.attributes || {}, prop),\n        value,\n        definition.space\n      )\n\n      if (\n        definition.mustUseProperty &&\n        definition.mustUseProperty.includes(prop)\n      ) {\n        info.mustUseProperty = true\n      }\n\n      property[prop] = info\n\n      normal[normalize(prop)] = prop\n      normal[normalize(info.attribute)] = prop\n    }\n  }\n\n  return new Schema(property, normal, definition.space)\n}\n","import {create} from './util/create.js'\n\nexport const xlink = create({\n  space: 'xlink',\n  transform(_, prop) {\n    return 'xlink:' + prop.slice(5).toLowerCase()\n  },\n  properties: {\n    xLinkActuate: null,\n    xLinkArcRole: null,\n    xLinkHref: null,\n    xLinkRole: null,\n    xLinkShow: null,\n    xLinkTitle: null,\n    xLinkType: null\n  }\n})\n","import {create} from './util/create.js'\n\nexport const xml = create({\n  space: 'xml',\n  transform(_, prop) {\n    return 'xml:' + prop.slice(3).toLowerCase()\n  },\n  properties: {xmlLang: null, xmlBase: null, xmlSpace: null}\n})\n","/**\n * @param {Record<string, string>} attributes\n * @param {string} attribute\n * @returns {string}\n */\nexport function caseSensitiveTransform(attributes, attribute) {\n  return attribute in attributes ? attributes[attribute] : attribute\n}\n","import {caseSensitiveTransform} from './case-sensitive-transform.js'\n\n/**\n * @param {Record<string, string>} attributes\n * @param {string} property\n * @returns {string}\n */\nexport function caseInsensitiveTransform(attributes, property) {\n  return caseSensitiveTransform(attributes, property.toLowerCase())\n}\n","import {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const xmlns = create({\n  space: 'xmlns',\n  attributes: {xmlnsxlink: 'xmlns:xlink'},\n  transform: caseInsensitiveTransform,\n  properties: {xmlns: null, xmlnsXLink: null}\n})\n","import {booleanish, number, spaceSeparated} from './util/types.js'\nimport {create} from './util/create.js'\n\nexport const aria = create({\n  transform(_, prop) {\n    return prop === 'role' ? prop : 'aria-' + prop.slice(4).toLowerCase()\n  },\n  properties: {\n    ariaActiveDescendant: null,\n    ariaAtomic: booleanish,\n    ariaAutoComplete: null,\n    ariaBusy: booleanish,\n    ariaChecked: booleanish,\n    ariaColCount: number,\n    ariaColIndex: number,\n    ariaColSpan: number,\n    ariaControls: spaceSeparated,\n    ariaCurrent: null,\n    ariaDescribedBy: spaceSeparated,\n    ariaDetails: null,\n    ariaDisabled: booleanish,\n    ariaDropEffect: spaceSeparated,\n    ariaErrorMessage: null,\n    ariaExpanded: booleanish,\n    ariaFlowTo: spaceSeparated,\n    ariaGrabbed: booleanish,\n    ariaHasPopup: null,\n    ariaHidden: booleanish,\n    ariaInvalid: null,\n    ariaKeyShortcuts: null,\n    ariaLabel: null,\n    ariaLabelledBy: spaceSeparated,\n    ariaLevel: number,\n    ariaLive: null,\n    ariaModal: booleanish,\n    ariaMultiLine: booleanish,\n    ariaMultiSelectable: booleanish,\n    ariaOrientation: null,\n    ariaOwns: spaceSeparated,\n    ariaPlaceholder: null,\n    ariaPosInSet: number,\n    ariaPressed: booleanish,\n    ariaReadOnly: booleanish,\n    ariaRelevant: null,\n    ariaRequired: booleanish,\n    ariaRoleDescription: spaceSeparated,\n    ariaRowCount: number,\n    ariaRowIndex: number,\n    ariaRowSpan: number,\n    ariaSelected: booleanish,\n    ariaSetSize: number,\n    ariaSort: null,\n    ariaValueMax: number,\n    ariaValueMin: number,\n    ariaValueNow: number,\n    ariaValueText: null,\n    role: null\n  }\n})\n","import {\n  boolean,\n  overloadedBoolean,\n  booleanish,\n  number,\n  spaceSeparated,\n  commaSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseInsensitiveTransform} from './util/case-insensitive-transform.js'\n\nexport const html = create({\n  space: 'html',\n  attributes: {\n    acceptcharset: 'accept-charset',\n    classname: 'class',\n    htmlfor: 'for',\n    httpequiv: 'http-equiv'\n  },\n  transform: caseInsensitiveTransform,\n  mustUseProperty: ['checked', 'multiple', 'muted', 'selected'],\n  properties: {\n    // Standard Properties.\n    abbr: null,\n    accept: commaSeparated,\n    acceptCharset: spaceSeparated,\n    accessKey: spaceSeparated,\n    action: null,\n    allow: null,\n    allowFullScreen: boolean,\n    allowPaymentRequest: boolean,\n    allowUserMedia: boolean,\n    alt: null,\n    as: null,\n    async: boolean,\n    autoCapitalize: null,\n    autoComplete: spaceSeparated,\n    autoFocus: boolean,\n    autoPlay: boolean,\n    blocking: spaceSeparated,\n    capture: null,\n    charSet: null,\n    checked: boolean,\n    cite: null,\n    className: spaceSeparated,\n    cols: number,\n    colSpan: null,\n    content: null,\n    contentEditable: booleanish,\n    controls: boolean,\n    controlsList: spaceSeparated,\n    coords: number | commaSeparated,\n    crossOrigin: null,\n    data: null,\n    dateTime: null,\n    decoding: null,\n    default: boolean,\n    defer: boolean,\n    dir: null,\n    dirName: null,\n    disabled: boolean,\n    download: overloadedBoolean,\n    draggable: booleanish,\n    encType: null,\n    enterKeyHint: null,\n    fetchPriority: null,\n    form: null,\n    formAction: null,\n    formEncType: null,\n    formMethod: null,\n    formNoValidate: boolean,\n    formTarget: null,\n    headers: spaceSeparated,\n    height: number,\n    hidden: boolean,\n    high: number,\n    href: null,\n    hrefLang: null,\n    htmlFor: spaceSeparated,\n    httpEquiv: spaceSeparated,\n    id: null,\n    imageSizes: null,\n    imageSrcSet: null,\n    inert: boolean,\n    inputMode: null,\n    integrity: null,\n    is: null,\n    isMap: boolean,\n    itemId: null,\n    itemProp: spaceSeparated,\n    itemRef: spaceSeparated,\n    itemScope: boolean,\n    itemType: spaceSeparated,\n    kind: null,\n    label: null,\n    lang: null,\n    language: null,\n    list: null,\n    loading: null,\n    loop: boolean,\n    low: number,\n    manifest: null,\n    max: null,\n    maxLength: number,\n    media: null,\n    method: null,\n    min: null,\n    minLength: number,\n    multiple: boolean,\n    muted: boolean,\n    name: null,\n    nonce: null,\n    noModule: boolean,\n    noValidate: boolean,\n    onAbort: null,\n    onAfterPrint: null,\n    onAuxClick: null,\n    onBeforeMatch: null,\n    onBeforePrint: null,\n    onBeforeToggle: null,\n    onBeforeUnload: null,\n    onBlur: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onContextLost: null,\n    onContextMenu: null,\n    onContextRestored: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFormData: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLanguageChange: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadEnd: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMessageError: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRejectionHandled: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onScrollEnd: null,\n    onSecurityPolicyViolation: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onSlotChange: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnhandledRejection: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onWheel: null,\n    open: boolean,\n    optimum: number,\n    pattern: null,\n    ping: spaceSeparated,\n    placeholder: null,\n    playsInline: boolean,\n    popover: null,\n    popoverTarget: null,\n    popoverTargetAction: null,\n    poster: null,\n    preload: null,\n    readOnly: boolean,\n    referrerPolicy: null,\n    rel: spaceSeparated,\n    required: boolean,\n    reversed: boolean,\n    rows: number,\n    rowSpan: number,\n    sandbox: spaceSeparated,\n    scope: null,\n    scoped: boolean,\n    seamless: boolean,\n    selected: boolean,\n    shadowRootClonable: boolean,\n    shadowRootDelegatesFocus: boolean,\n    shadowRootMode: null,\n    shape: null,\n    size: number,\n    sizes: null,\n    slot: null,\n    span: number,\n    spellCheck: booleanish,\n    src: null,\n    srcDoc: null,\n    srcLang: null,\n    srcSet: null,\n    start: number,\n    step: null,\n    style: null,\n    tabIndex: number,\n    target: null,\n    title: null,\n    translate: null,\n    type: null,\n    typeMustMatch: boolean,\n    useMap: null,\n    value: booleanish,\n    width: number,\n    wrap: null,\n    writingSuggestions: null,\n\n    // Legacy.\n    // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis\n    align: null, // Several. Use CSS `text-align` instead,\n    aLink: null, // `<body>`. Use CSS `a:active {color}` instead\n    archive: spaceSeparated, // `<object>`. List of URIs to archives\n    axis: null, // `<td>` and `<th>`. Use `scope` on `<th>`\n    background: null, // `<body>`. Use CSS `background-image` instead\n    bgColor: null, // `<body>` and table elements. Use CSS `background-color` instead\n    border: number, // `<table>`. Use CSS `border-width` instead,\n    borderColor: null, // `<table>`. Use CSS `border-color` instead,\n    bottomMargin: number, // `<body>`\n    cellPadding: null, // `<table>`\n    cellSpacing: null, // `<table>`\n    char: null, // Several table elements. When `align=char`, sets the character to align on\n    charOff: null, // Several table elements. When `char`, offsets the alignment\n    classId: null, // `<object>`\n    clear: null, // `<br>`. Use CSS `clear` instead\n    code: null, // `<object>`\n    codeBase: null, // `<object>`\n    codeType: null, // `<object>`\n    color: null, // `<font>` and `<hr>`. Use CSS instead\n    compact: boolean, // Lists. Use CSS to reduce space between items instead\n    declare: boolean, // `<object>`\n    event: null, // `<script>`\n    face: null, // `<font>`. Use CSS instead\n    frame: null, // `<table>`\n    frameBorder: null, // `<iframe>`. Use CSS `border` instead\n    hSpace: number, // `<img>` and `<object>`\n    leftMargin: number, // `<body>`\n    link: null, // `<body>`. Use CSS `a:link {color: *}` instead\n    longDesc: null, // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`\n    lowSrc: null, // `<img>`. Use a `<picture>`\n    marginHeight: number, // `<body>`\n    marginWidth: number, // `<body>`\n    noResize: boolean, // `<frame>`\n    noHref: boolean, // `<area>`. Use no href instead of an explicit `nohref`\n    noShade: boolean, // `<hr>`. Use background-color and height instead of borders\n    noWrap: boolean, // `<td>` and `<th>`\n    object: null, // `<applet>`\n    profile: null, // `<head>`\n    prompt: null, // `<isindex>`\n    rev: null, // `<link>`\n    rightMargin: number, // `<body>`\n    rules: null, // `<table>`\n    scheme: null, // `<meta>`\n    scrolling: booleanish, // `<frame>`. Use overflow in the child context\n    standby: null, // `<object>`\n    summary: null, // `<table>`\n    text: null, // `<body>`. Use CSS `color` instead\n    topMargin: number, // `<body>`\n    valueType: null, // `<param>`\n    version: null, // `<html>`. Use a doctype.\n    vAlign: null, // Several. Use CSS `vertical-align` instead\n    vLink: null, // `<body>`. Use CSS `a:visited {color}` instead\n    vSpace: number, // `<img>` and `<object>`\n\n    // Non-standard Properties.\n    allowTransparency: null,\n    autoCorrect: null,\n    autoSave: null,\n    disablePictureInPicture: boolean,\n    disableRemotePlayback: boolean,\n    prefix: null,\n    property: null,\n    results: number,\n    security: null,\n    unselectable: null\n  }\n})\n","import {\n  boolean,\n  number,\n  spaceSeparated,\n  commaSeparated,\n  commaOrSpaceSeparated\n} from './util/types.js'\nimport {create} from './util/create.js'\nimport {caseSensitiveTransform} from './util/case-sensitive-transform.js'\n\nexport const svg = create({\n  space: 'svg',\n  attributes: {\n    accentHeight: 'accent-height',\n    alignmentBaseline: 'alignment-baseline',\n    arabicForm: 'arabic-form',\n    baselineShift: 'baseline-shift',\n    capHeight: 'cap-height',\n    className: 'class',\n    clipPath: 'clip-path',\n    clipRule: 'clip-rule',\n    colorInterpolation: 'color-interpolation',\n    colorInterpolationFilters: 'color-interpolation-filters',\n    colorProfile: 'color-profile',\n    colorRendering: 'color-rendering',\n    crossOrigin: 'crossorigin',\n    dataType: 'datatype',\n    dominantBaseline: 'dominant-baseline',\n    enableBackground: 'enable-background',\n    fillOpacity: 'fill-opacity',\n    fillRule: 'fill-rule',\n    floodColor: 'flood-color',\n    floodOpacity: 'flood-opacity',\n    fontFamily: 'font-family',\n    fontSize: 'font-size',\n    fontSizeAdjust: 'font-size-adjust',\n    fontStretch: 'font-stretch',\n    fontStyle: 'font-style',\n    fontVariant: 'font-variant',\n    fontWeight: 'font-weight',\n    glyphName: 'glyph-name',\n    glyphOrientationHorizontal: 'glyph-orientation-horizontal',\n    glyphOrientationVertical: 'glyph-orientation-vertical',\n    hrefLang: 'hreflang',\n    horizAdvX: 'horiz-adv-x',\n    horizOriginX: 'horiz-origin-x',\n    horizOriginY: 'horiz-origin-y',\n    imageRendering: 'image-rendering',\n    letterSpacing: 'letter-spacing',\n    lightingColor: 'lighting-color',\n    markerEnd: 'marker-end',\n    markerMid: 'marker-mid',\n    markerStart: 'marker-start',\n    navDown: 'nav-down',\n    navDownLeft: 'nav-down-left',\n    navDownRight: 'nav-down-right',\n    navLeft: 'nav-left',\n    navNext: 'nav-next',\n    navPrev: 'nav-prev',\n    navRight: 'nav-right',\n    navUp: 'nav-up',\n    navUpLeft: 'nav-up-left',\n    navUpRight: 'nav-up-right',\n    onAbort: 'onabort',\n    onActivate: 'onactivate',\n    onAfterPrint: 'onafterprint',\n    onBeforePrint: 'onbeforeprint',\n    onBegin: 'onbegin',\n    onCancel: 'oncancel',\n    onCanPlay: 'oncanplay',\n    onCanPlayThrough: 'oncanplaythrough',\n    onChange: 'onchange',\n    onClick: 'onclick',\n    onClose: 'onclose',\n    onCopy: 'oncopy',\n    onCueChange: 'oncuechange',\n    onCut: 'oncut',\n    onDblClick: 'ondblclick',\n    onDrag: 'ondrag',\n    onDragEnd: 'ondragend',\n    onDragEnter: 'ondragenter',\n    onDragExit: 'ondragexit',\n    onDragLeave: 'ondragleave',\n    onDragOver: 'ondragover',\n    onDragStart: 'ondragstart',\n    onDrop: 'ondrop',\n    onDurationChange: 'ondurationchange',\n    onEmptied: 'onemptied',\n    onEnd: 'onend',\n    onEnded: 'onended',\n    onError: 'onerror',\n    onFocus: 'onfocus',\n    onFocusIn: 'onfocusin',\n    onFocusOut: 'onfocusout',\n    onHashChange: 'onhashchange',\n    onInput: 'oninput',\n    onInvalid: 'oninvalid',\n    onKeyDown: 'onkeydown',\n    onKeyPress: 'onkeypress',\n    onKeyUp: 'onkeyup',\n    onLoad: 'onload',\n    onLoadedData: 'onloadeddata',\n    onLoadedMetadata: 'onloadedmetadata',\n    onLoadStart: 'onloadstart',\n    onMessage: 'onmessage',\n    onMouseDown: 'onmousedown',\n    onMouseEnter: 'onmouseenter',\n    onMouseLeave: 'onmouseleave',\n    onMouseMove: 'onmousemove',\n    onMouseOut: 'onmouseout',\n    onMouseOver: 'onmouseover',\n    onMouseUp: 'onmouseup',\n    onMouseWheel: 'onmousewheel',\n    onOffline: 'onoffline',\n    onOnline: 'ononline',\n    onPageHide: 'onpagehide',\n    onPageShow: 'onpageshow',\n    onPaste: 'onpaste',\n    onPause: 'onpause',\n    onPlay: 'onplay',\n    onPlaying: 'onplaying',\n    onPopState: 'onpopstate',\n    onProgress: 'onprogress',\n    onRateChange: 'onratechange',\n    onRepeat: 'onrepeat',\n    onReset: 'onreset',\n    onResize: 'onresize',\n    onScroll: 'onscroll',\n    onSeeked: 'onseeked',\n    onSeeking: 'onseeking',\n    onSelect: 'onselect',\n    onShow: 'onshow',\n    onStalled: 'onstalled',\n    onStorage: 'onstorage',\n    onSubmit: 'onsubmit',\n    onSuspend: 'onsuspend',\n    onTimeUpdate: 'ontimeupdate',\n    onToggle: 'ontoggle',\n    onUnload: 'onunload',\n    onVolumeChange: 'onvolumechange',\n    onWaiting: 'onwaiting',\n    onZoom: 'onzoom',\n    overlinePosition: 'overline-position',\n    overlineThickness: 'overline-thickness',\n    paintOrder: 'paint-order',\n    panose1: 'panose-1',\n    pointerEvents: 'pointer-events',\n    referrerPolicy: 'referrerpolicy',\n    renderingIntent: 'rendering-intent',\n    shapeRendering: 'shape-rendering',\n    stopColor: 'stop-color',\n    stopOpacity: 'stop-opacity',\n    strikethroughPosition: 'strikethrough-position',\n    strikethroughThickness: 'strikethrough-thickness',\n    strokeDashArray: 'stroke-dasharray',\n    strokeDashOffset: 'stroke-dashoffset',\n    strokeLineCap: 'stroke-linecap',\n    strokeLineJoin: 'stroke-linejoin',\n    strokeMiterLimit: 'stroke-miterlimit',\n    strokeOpacity: 'stroke-opacity',\n    strokeWidth: 'stroke-width',\n    tabIndex: 'tabindex',\n    textAnchor: 'text-anchor',\n    textDecoration: 'text-decoration',\n    textRendering: 'text-rendering',\n    transformOrigin: 'transform-origin',\n    typeOf: 'typeof',\n    underlinePosition: 'underline-position',\n    underlineThickness: 'underline-thickness',\n    unicodeBidi: 'unicode-bidi',\n    unicodeRange: 'unicode-range',\n    unitsPerEm: 'units-per-em',\n    vAlphabetic: 'v-alphabetic',\n    vHanging: 'v-hanging',\n    vIdeographic: 'v-ideographic',\n    vMathematical: 'v-mathematical',\n    vectorEffect: 'vector-effect',\n    vertAdvY: 'vert-adv-y',\n    vertOriginX: 'vert-origin-x',\n    vertOriginY: 'vert-origin-y',\n    wordSpacing: 'word-spacing',\n    writingMode: 'writing-mode',\n    xHeight: 'x-height',\n    // These were camelcased in Tiny. Now lowercased in SVG 2\n    playbackOrder: 'playbackorder',\n    timelineBegin: 'timelinebegin'\n  },\n  transform: caseSensitiveTransform,\n  properties: {\n    about: commaOrSpaceSeparated,\n    accentHeight: number,\n    accumulate: null,\n    additive: null,\n    alignmentBaseline: null,\n    alphabetic: number,\n    amplitude: number,\n    arabicForm: null,\n    ascent: number,\n    attributeName: null,\n    attributeType: null,\n    azimuth: number,\n    bandwidth: null,\n    baselineShift: null,\n    baseFrequency: null,\n    baseProfile: null,\n    bbox: null,\n    begin: null,\n    bias: number,\n    by: null,\n    calcMode: null,\n    capHeight: number,\n    className: spaceSeparated,\n    clip: null,\n    clipPath: null,\n    clipPathUnits: null,\n    clipRule: null,\n    color: null,\n    colorInterpolation: null,\n    colorInterpolationFilters: null,\n    colorProfile: null,\n    colorRendering: null,\n    content: null,\n    contentScriptType: null,\n    contentStyleType: null,\n    crossOrigin: null,\n    cursor: null,\n    cx: null,\n    cy: null,\n    d: null,\n    dataType: null,\n    defaultAction: null,\n    descent: number,\n    diffuseConstant: number,\n    direction: null,\n    display: null,\n    dur: null,\n    divisor: number,\n    dominantBaseline: null,\n    download: boolean,\n    dx: null,\n    dy: null,\n    edgeMode: null,\n    editable: null,\n    elevation: number,\n    enableBackground: null,\n    end: null,\n    event: null,\n    exponent: number,\n    externalResourcesRequired: null,\n    fill: null,\n    fillOpacity: number,\n    fillRule: null,\n    filter: null,\n    filterRes: null,\n    filterUnits: null,\n    floodColor: null,\n    floodOpacity: null,\n    focusable: null,\n    focusHighlight: null,\n    fontFamily: null,\n    fontSize: null,\n    fontSizeAdjust: null,\n    fontStretch: null,\n    fontStyle: null,\n    fontVariant: null,\n    fontWeight: null,\n    format: null,\n    fr: null,\n    from: null,\n    fx: null,\n    fy: null,\n    g1: commaSeparated,\n    g2: commaSeparated,\n    glyphName: commaSeparated,\n    glyphOrientationHorizontal: null,\n    glyphOrientationVertical: null,\n    glyphRef: null,\n    gradientTransform: null,\n    gradientUnits: null,\n    handler: null,\n    hanging: number,\n    hatchContentUnits: null,\n    hatchUnits: null,\n    height: null,\n    href: null,\n    hrefLang: null,\n    horizAdvX: number,\n    horizOriginX: number,\n    horizOriginY: number,\n    id: null,\n    ideographic: number,\n    imageRendering: null,\n    initialVisibility: null,\n    in: null,\n    in2: null,\n    intercept: number,\n    k: number,\n    k1: number,\n    k2: number,\n    k3: number,\n    k4: number,\n    kernelMatrix: commaOrSpaceSeparated,\n    kernelUnitLength: null,\n    keyPoints: null, // SEMI_COLON_SEPARATED\n    keySplines: null, // SEMI_COLON_SEPARATED\n    keyTimes: null, // SEMI_COLON_SEPARATED\n    kerning: null,\n    lang: null,\n    lengthAdjust: null,\n    letterSpacing: null,\n    lightingColor: null,\n    limitingConeAngle: number,\n    local: null,\n    markerEnd: null,\n    markerMid: null,\n    markerStart: null,\n    markerHeight: null,\n    markerUnits: null,\n    markerWidth: null,\n    mask: null,\n    maskContentUnits: null,\n    maskUnits: null,\n    mathematical: null,\n    max: null,\n    media: null,\n    mediaCharacterEncoding: null,\n    mediaContentEncodings: null,\n    mediaSize: number,\n    mediaTime: null,\n    method: null,\n    min: null,\n    mode: null,\n    name: null,\n    navDown: null,\n    navDownLeft: null,\n    navDownRight: null,\n    navLeft: null,\n    navNext: null,\n    navPrev: null,\n    navRight: null,\n    navUp: null,\n    navUpLeft: null,\n    navUpRight: null,\n    numOctaves: null,\n    observer: null,\n    offset: null,\n    onAbort: null,\n    onActivate: null,\n    onAfterPrint: null,\n    onBeforePrint: null,\n    onBegin: null,\n    onCancel: null,\n    onCanPlay: null,\n    onCanPlayThrough: null,\n    onChange: null,\n    onClick: null,\n    onClose: null,\n    onCopy: null,\n    onCueChange: null,\n    onCut: null,\n    onDblClick: null,\n    onDrag: null,\n    onDragEnd: null,\n    onDragEnter: null,\n    onDragExit: null,\n    onDragLeave: null,\n    onDragOver: null,\n    onDragStart: null,\n    onDrop: null,\n    onDurationChange: null,\n    onEmptied: null,\n    onEnd: null,\n    onEnded: null,\n    onError: null,\n    onFocus: null,\n    onFocusIn: null,\n    onFocusOut: null,\n    onHashChange: null,\n    onInput: null,\n    onInvalid: null,\n    onKeyDown: null,\n    onKeyPress: null,\n    onKeyUp: null,\n    onLoad: null,\n    onLoadedData: null,\n    onLoadedMetadata: null,\n    onLoadStart: null,\n    onMessage: null,\n    onMouseDown: null,\n    onMouseEnter: null,\n    onMouseLeave: null,\n    onMouseMove: null,\n    onMouseOut: null,\n    onMouseOver: null,\n    onMouseUp: null,\n    onMouseWheel: null,\n    onOffline: null,\n    onOnline: null,\n    onPageHide: null,\n    onPageShow: null,\n    onPaste: null,\n    onPause: null,\n    onPlay: null,\n    onPlaying: null,\n    onPopState: null,\n    onProgress: null,\n    onRateChange: null,\n    onRepeat: null,\n    onReset: null,\n    onResize: null,\n    onScroll: null,\n    onSeeked: null,\n    onSeeking: null,\n    onSelect: null,\n    onShow: null,\n    onStalled: null,\n    onStorage: null,\n    onSubmit: null,\n    onSuspend: null,\n    onTimeUpdate: null,\n    onToggle: null,\n    onUnload: null,\n    onVolumeChange: null,\n    onWaiting: null,\n    onZoom: null,\n    opacity: null,\n    operator: null,\n    order: null,\n    orient: null,\n    orientation: null,\n    origin: null,\n    overflow: null,\n    overlay: null,\n    overlinePosition: number,\n    overlineThickness: number,\n    paintOrder: null,\n    panose1: null,\n    path: null,\n    pathLength: number,\n    patternContentUnits: null,\n    patternTransform: null,\n    patternUnits: null,\n    phase: null,\n    ping: spaceSeparated,\n    pitch: null,\n    playbackOrder: null,\n    pointerEvents: null,\n    points: null,\n    pointsAtX: number,\n    pointsAtY: number,\n    pointsAtZ: number,\n    preserveAlpha: null,\n    preserveAspectRatio: null,\n    primitiveUnits: null,\n    propagate: null,\n    property: commaOrSpaceSeparated,\n    r: null,\n    radius: null,\n    referrerPolicy: null,\n    refX: null,\n    refY: null,\n    rel: commaOrSpaceSeparated,\n    rev: commaOrSpaceSeparated,\n    renderingIntent: null,\n    repeatCount: null,\n    repeatDur: null,\n    requiredExtensions: commaOrSpaceSeparated,\n    requiredFeatures: commaOrSpaceSeparated,\n    requiredFonts: commaOrSpaceSeparated,\n    requiredFormats: commaOrSpaceSeparated,\n    resource: null,\n    restart: null,\n    result: null,\n    rotate: null,\n    rx: null,\n    ry: null,\n    scale: null,\n    seed: null,\n    shapeRendering: null,\n    side: null,\n    slope: null,\n    snapshotTime: null,\n    specularConstant: number,\n    specularExponent: number,\n    spreadMethod: null,\n    spacing: null,\n    startOffset: null,\n    stdDeviation: null,\n    stemh: null,\n    stemv: null,\n    stitchTiles: null,\n    stopColor: null,\n    stopOpacity: null,\n    strikethroughPosition: number,\n    strikethroughThickness: number,\n    string: null,\n    stroke: null,\n    strokeDashArray: commaOrSpaceSeparated,\n    strokeDashOffset: null,\n    strokeLineCap: null,\n    strokeLineJoin: null,\n    strokeMiterLimit: number,\n    strokeOpacity: number,\n    strokeWidth: null,\n    style: null,\n    surfaceScale: number,\n    syncBehavior: null,\n    syncBehaviorDefault: null,\n    syncMaster: null,\n    syncTolerance: null,\n    syncToleranceDefault: null,\n    systemLanguage: commaOrSpaceSeparated,\n    tabIndex: number,\n    tableValues: null,\n    target: null,\n    targetX: number,\n    targetY: number,\n    textAnchor: null,\n    textDecoration: null,\n    textRendering: null,\n    textLength: null,\n    timelineBegin: null,\n    title: null,\n    transformBehavior: null,\n    type: null,\n    typeOf: commaOrSpaceSeparated,\n    to: null,\n    transform: null,\n    transformOrigin: null,\n    u1: null,\n    u2: null,\n    underlinePosition: number,\n    underlineThickness: number,\n    unicode: null,\n    unicodeBidi: null,\n    unicodeRange: null,\n    unitsPerEm: number,\n    values: null,\n    vAlphabetic: number,\n    vMathematical: number,\n    vectorEffect: null,\n    vHanging: number,\n    vIdeographic: number,\n    version: null,\n    vertAdvY: number,\n    vertOriginX: number,\n    vertOriginY: number,\n    viewBox: null,\n    viewTarget: null,\n    visibility: null,\n    width: null,\n    widths: null,\n    wordSpacing: null,\n    writingMode: null,\n    x: null,\n    x1: null,\n    x2: null,\n    xChannelSelector: null,\n    xHeight: number,\n    y: null,\n    y1: null,\n    y2: null,\n    yChannelSelector: null,\n    z: null,\n    zoomAndPan: null\n  }\n})\n","/**\n * @typedef {import('./lib/util/info.js').Info} Info\n * @typedef {import('./lib/util/schema.js').Schema} Schema\n */\n\nimport {merge} from './lib/util/merge.js'\nimport {xlink} from './lib/xlink.js'\nimport {xml} from './lib/xml.js'\nimport {xmlns} from './lib/xmlns.js'\nimport {aria} from './lib/aria.js'\nimport {html as htmlBase} from './lib/html.js'\nimport {svg as svgBase} from './lib/svg.js'\n\nexport {find} from './lib/find.js'\nexport {hastToReact} from './lib/hast-to-react.js'\nexport {normalize} from './lib/normalize.js'\nexport const html = merge([xml, xlink, xmlns, aria, htmlBase], 'html')\nexport const svg = merge([xml, xlink, xmlns, aria, svgBase], 'svg')\n","/**\n * @typedef {import('./util/schema.js').Schema} Schema\n */\n\nimport {normalize} from './normalize.js'\nimport {DefinedInfo} from './util/defined-info.js'\nimport {Info} from './util/info.js'\n\nconst valid = /^data[-\\w.:]+$/i\nconst dash = /-[a-z]/g\nconst cap = /[A-Z]/g\n\n/**\n * @param {Schema} schema\n * @param {string} value\n * @returns {Info}\n */\nexport function find(schema, value) {\n  const normal = normalize(value)\n  let prop = value\n  let Type = Info\n\n  if (normal in schema.normal) {\n    return schema.property[schema.normal[normal]]\n  }\n\n  if (normal.length > 4 && normal.slice(0, 4) === 'data' && valid.test(value)) {\n    // Attribute or property.\n    if (value.charAt(4) === '-') {\n      // Turn it into a property.\n      const rest = value.slice(5).replace(dash, camelcase)\n      prop = 'data' + rest.charAt(0).toUpperCase() + rest.slice(1)\n    } else {\n      // Turn it into an attribute.\n      const rest = value.slice(4)\n\n      if (!dash.test(rest)) {\n        let dashes = rest.replace(cap, kebab)\n\n        if (dashes.charAt(0) !== '-') {\n          dashes = '-' + dashes\n        }\n\n        value = 'data' + dashes\n      }\n    }\n\n    Type = DefinedInfo\n  }\n\n  return new Type(prop, value)\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction kebab($0) {\n  return '-' + $0.toLowerCase()\n}\n\n/**\n * @param {string} $0\n * @returns {string}\n */\nfunction camelcase($0) {\n  return $0.charAt(1).toUpperCase()\n}\n","/**\n * @callback Handler\n *   Handle a value, with a certain ID field set to a certain value.\n *   The ID field is passed to `zwitch`, and it’s value is this function’s\n *   place on the `handlers` record.\n * @param {...any} parameters\n *   Arbitrary parameters passed to the zwitch.\n *   The first will be an object with a certain ID field set to a certain value.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback UnknownHandler\n *   Handle values that do have a certain ID field, but it’s set to a value\n *   that is not listed in the `handlers` record.\n * @param {unknown} value\n *   An object with a certain ID field set to an unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {any}\n *   Anything!\n */\n\n/**\n * @callback InvalidHandler\n *   Handle values that do not have a certain ID field.\n * @param {unknown} value\n *   Any unknown value.\n * @param {...any} rest\n *   Arbitrary parameters passed to the zwitch.\n * @returns {void|null|undefined|never}\n *   This should crash or return nothing.\n */\n\n/**\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @typedef Options\n *   Configuration (required).\n * @property {Invalid} [invalid]\n *   Handler to use for invalid values.\n * @property {Unknown} [unknown]\n *   Handler to use for unknown values.\n * @property {Handlers} [handlers]\n *   Handlers to use.\n */\n\nconst own = {}.hasOwnProperty\n\n/**\n * Handle values based on a field.\n *\n * @template {InvalidHandler} [Invalid=InvalidHandler]\n * @template {UnknownHandler} [Unknown=UnknownHandler]\n * @template {Record<string, Handler>} [Handlers=Record<string, Handler>]\n * @param {string} key\n *   Field to switch on.\n * @param {Options<Invalid, Unknown, Handlers>} [options]\n *   Configuration (required).\n * @returns {{unknown: Unknown, invalid: Invalid, handlers: Handlers, (...parameters: Parameters<Handlers[keyof Handlers]>): ReturnType<Handlers[keyof Handlers]>, (...parameters: Parameters<Unknown>): ReturnType<Unknown>}}\n */\nexport function zwitch(key, options) {\n  const settings = options || {}\n\n  /**\n   * Handle one value.\n   *\n   * Based on the bound `key`, a respective handler will be called.\n   * If `value` is not an object, or doesn’t have a `key` property, the special\n   * “invalid” handler will be called.\n   * If `value` has an unknown `key`, the special “unknown” handler will be\n   * called.\n   *\n   * All arguments, and the context object, are passed through to the handler,\n   * and it’s result is returned.\n   *\n   * @this {unknown}\n   *   Any context object.\n   * @param {unknown} [value]\n   *   Any value.\n   * @param {...unknown} parameters\n   *   Arbitrary parameters passed to the zwitch.\n   * @property {Handler} invalid\n   *   Handle for values that do not have a certain ID field.\n   * @property {Handler} unknown\n   *   Handle values that do have a certain ID field, but it’s set to a value\n   *   that is not listed in the `handlers` record.\n   * @property {Handlers} handlers\n   *   Record of handlers.\n   * @returns {unknown}\n   *   Anything.\n   */\n  function one(value, ...parameters) {\n    /** @type {Handler|undefined} */\n    let fn = one.invalid\n    const handlers = one.handlers\n\n    if (value && own.call(value, key)) {\n      // @ts-expect-error Indexable.\n      const id = String(value[key])\n      // @ts-expect-error Indexable.\n      fn = own.call(handlers, id) ? handlers[id] : one.unknown\n    }\n\n    if (fn) {\n      return fn.call(this, value, ...parameters)\n    }\n  }\n\n  one.handlers = settings.handlers || {}\n  one.invalid = settings.invalid\n  one.unknown = settings.unknown\n\n  // @ts-expect-error: matches!\n  return one\n}\n","/**\n * @typedef {import('hast').Comment} Comment\n * @typedef {import('hast').Doctype} Doctype\n * @typedef {import('hast').Element} Element\n * @typedef {import('hast').Nodes} Nodes\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast').RootContent} RootContent\n * @typedef {import('hast').Text} Text\n *\n * @typedef {import('parse5').DefaultTreeAdapterMap['document']} Parse5Document\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentFragment']} Parse5Fragment\n * @typedef {import('parse5').DefaultTreeAdapterMap['element']} Parse5Element\n * @typedef {import('parse5').DefaultTreeAdapterMap['node']} Parse5Nodes\n * @typedef {import('parse5').DefaultTreeAdapterMap['documentType']} Parse5Doctype\n * @typedef {import('parse5').DefaultTreeAdapterMap['commentNode']} Parse5Comment\n * @typedef {import('parse5').DefaultTreeAdapterMap['textNode']} Parse5Text\n * @typedef {import('parse5').DefaultTreeAdapterMap['parentNode']} Parse5Parent\n * @typedef {import('parse5').Token.Attribute} Parse5Attribute\n *\n * @typedef {import('property-information').Schema} Schema\n */\n\n/**\n * @typedef Options\n *   Configuration.\n * @property {Space | null | undefined} [space='html']\n *   Which space the document is in (default: `'html'`).\n *\n *   When an `<svg>` element is found in the HTML space, this package already\n *   automatically switches to and from the SVG space when entering and exiting\n *   it.\n *\n * @typedef {Exclude<Parse5Nodes, Parse5Document | Parse5Fragment>} Parse5Content\n *\n * @typedef {'html' | 'svg'} Space\n */\n\nimport {stringify as commas} from 'comma-separated-tokens'\nimport {ok as assert} from 'devlop'\nimport {find, html, svg} from 'property-information'\nimport {stringify as spaces} from 'space-separated-tokens'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\n/** @type {Options} */\nconst emptyOptions = {}\n\nconst own = {}.hasOwnProperty\n\nconst one = zwitch('type', {handlers: {root, element, text, comment, doctype}})\n\n/**\n * Transform a hast tree to a `parse5` AST.\n *\n * @param {Nodes} tree\n *   Tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Parse5Nodes}\n *   `parse5` node.\n */\nexport function toParse5(tree, options) {\n  const settings = options || emptyOptions\n  const space = settings.space\n  return one(tree, space === 'svg' ? svg : html)\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Document}\n *   Parse5 node.\n */\nfunction root(node, schema) {\n  /** @type {Parse5Document} */\n  const result = {\n    nodeName: '#document',\n    // @ts-expect-error: `parse5` uses enums, which are actually strings.\n    mode: (node.data || {}).quirksMode ? 'quirks' : 'no-quirks',\n    childNodes: []\n  }\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Root} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Fragment}\n *   Parse5 node.\n */\nfunction fragment(node, schema) {\n  /** @type {Parse5Fragment} */\n  const result = {nodeName: '#document-fragment', childNodes: []}\n  result.childNodes = all(node.children, result, schema)\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Doctype} node\n *   Node (hast) to transform.\n * @returns {Parse5Doctype}\n *   Parse5 node.\n */\nfunction doctype(node) {\n  /** @type {Parse5Doctype} */\n  const result = {\n    nodeName: '#documentType',\n    name: 'html',\n    publicId: '',\n    systemId: '',\n    parentNode: null\n  }\n\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Text} node\n *   Node (hast) to transform.\n * @returns {Parse5Text}\n *   Parse5 node.\n */\nfunction text(node) {\n  /** @type {Parse5Text} */\n  const result = {\n    nodeName: '#text',\n    value: node.value,\n    parentNode: null\n  }\n  patch(node, result)\n  return result\n}\n\n/**\n * @param {Comment} node\n *   Node (hast) to transform.\n * @returns {Parse5Comment}\n *   Parse5 node.\n */\nfunction comment(node) {\n  /** @type {Parse5Comment} */\n  const result = {\n    nodeName: '#comment',\n    data: node.value,\n    parentNode: null\n  }\n\n  patch(node, result)\n\n  return result\n}\n\n/**\n * @param {Element} node\n *   Node (hast) to transform.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Parse5Element}\n *   Parse5 node.\n */\nfunction element(node, schema) {\n  const parentSchema = schema\n  let currentSchema = parentSchema\n\n  if (\n    node.type === 'element' &&\n    node.tagName.toLowerCase() === 'svg' &&\n    parentSchema.space === 'html'\n  ) {\n    currentSchema = svg\n  }\n\n  /** @type {Array<Parse5Attribute>} */\n  const attrs = []\n  /** @type {string} */\n  let prop\n\n  if (node.properties) {\n    for (prop in node.properties) {\n      if (prop !== 'children' && own.call(node.properties, prop)) {\n        const result = createProperty(\n          currentSchema,\n          prop,\n          node.properties[prop]\n        )\n\n        if (result) {\n          attrs.push(result)\n        }\n      }\n    }\n  }\n\n  const space = currentSchema.space\n  // `html` and `svg` both have a space.\n  assert(space)\n\n  /** @type {Parse5Element} */\n  const result = {\n    nodeName: node.tagName,\n    tagName: node.tagName,\n    attrs,\n    // @ts-expect-error: `parse5` types are wrong.\n    namespaceURI: webNamespaces[space],\n    childNodes: [],\n    parentNode: null\n  }\n  result.childNodes = all(node.children, result, currentSchema)\n  patch(node, result)\n\n  if (node.tagName === 'template' && node.content) {\n    // @ts-expect-error: `parse5` types are wrong.\n    result.content = fragment(node.content, currentSchema)\n  }\n\n  return result\n}\n\n/**\n * Handle a property.\n *\n * @param {Schema} schema\n *   Current schema.\n * @param {string} prop\n *   Key.\n * @param {Array<number | string> | boolean | number | string | null | undefined} value\n *   hast property value.\n * @returns {Parse5Attribute | undefined}\n *   Field for runtime, optional.\n */\nfunction createProperty(schema, prop, value) {\n  const info = find(schema, prop)\n\n  // Ignore nullish and `NaN` values.\n  if (\n    value === false ||\n    value === null ||\n    value === undefined ||\n    (typeof value === 'number' && Number.isNaN(value)) ||\n    (!value && info.boolean)\n  ) {\n    return\n  }\n\n  if (Array.isArray(value)) {\n    // Accept `array`.\n    // Most props are space-separated.\n    value = info.commaSeparated ? commas(value) : spaces(value)\n  }\n\n  /** @type {Parse5Attribute} */\n  const attribute = {\n    name: info.attribute,\n    value: value === true ? '' : String(value)\n  }\n\n  if (info.space && info.space !== 'html' && info.space !== 'svg') {\n    const index = attribute.name.indexOf(':')\n\n    if (index < 0) {\n      attribute.prefix = ''\n    } else {\n      attribute.name = attribute.name.slice(index + 1)\n      attribute.prefix = info.attribute.slice(0, index)\n    }\n\n    attribute.namespace = webNamespaces[info.space]\n  }\n\n  return attribute\n}\n\n/**\n * Transform all hast nodes.\n *\n * @param {Array<RootContent>} children\n *   List of children.\n * @param {Parse5Parent} parentNode\n *   `parse5` parent node.\n * @param {Schema} schema\n *   Current schema.\n * @returns {Array<Parse5Content>}\n *   Transformed children.\n */\nfunction all(children, parentNode, schema) {\n  let index = -1\n  /** @type {Array<Parse5Content>} */\n  const results = []\n\n  if (children) {\n    while (++index < children.length) {\n      /** @type {Parse5Content} */\n      const child = one(children[index], schema)\n\n      child.parentNode = parentNode\n\n      results.push(child)\n    }\n  }\n\n  return results\n}\n\n/**\n * Add position info from `from` to `to`.\n *\n * @param {Nodes} from\n *   hast node.\n * @param {Parse5Nodes} to\n *   `parse5` node.\n * @returns {undefined}\n *   Nothing.\n */\nfunction patch(from, to) {\n  const position = from.position\n\n  if (position && position.start && position.end) {\n    assert(typeof position.start.offset === 'number')\n    assert(typeof position.end.offset === 'number')\n\n    to.sourceCodeLocation = {\n      startLine: position.start.line,\n      startCol: position.start.column,\n      startOffset: position.start.offset,\n      endLine: position.end.line,\n      endCol: position.end.column,\n      endOffset: position.end.offset\n    }\n  }\n}\n","/**\n * @typedef Options\n *   Configuration for `stringify`.\n * @property {boolean} [padLeft=true]\n *   Whether to pad a space before a token.\n * @property {boolean} [padRight=false]\n *   Whether to pad a space after a token.\n */\n\n/**\n * @typedef {Options} StringifyOptions\n *   Please use `StringifyOptions` instead.\n */\n\n/**\n * Parse comma-separated tokens to an array.\n *\n * @param {string} value\n *   Comma-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  /** @type {Array<string>} */\n  const tokens = []\n  const input = String(value || '')\n  let index = input.indexOf(',')\n  let start = 0\n  /** @type {boolean} */\n  let end = false\n\n  while (!end) {\n    if (index === -1) {\n      index = input.length\n      end = true\n    }\n\n    const token = input.slice(start, index).trim()\n\n    if (token || !end) {\n      tokens.push(token)\n    }\n\n    start = index + 1\n    index = input.indexOf(',', start)\n  }\n\n  return tokens\n}\n\n/**\n * Serialize an array of strings or numbers to comma-separated tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @param {Options} [options]\n *   Configuration for `stringify` (optional).\n * @returns {string}\n *   Comma-separated tokens.\n */\nexport function stringify(values, options) {\n  const settings = options || {}\n\n  // Ensure the last empty entry is seen.\n  const input = values[values.length - 1] === '' ? [...values, ''] : values\n\n  return input\n    .join(\n      (settings.padRight ? ' ' : '') +\n        ',' +\n        (settings.padLeft === false ? '' : ' ')\n    )\n    .trim()\n}\n","/**\n * Parse space-separated tokens to an array of strings.\n *\n * @param {string} value\n *   Space-separated tokens.\n * @returns {Array<string>}\n *   List of tokens.\n */\nexport function parse(value) {\n  const input = String(value || '').trim()\n  return input ? input.split(/[ \\t\\n\\r\\f]+/g) : []\n}\n\n/**\n * Serialize an array of strings as space separated-tokens.\n *\n * @param {Array<string|number>} values\n *   List of tokens.\n * @returns {string}\n *   Space-separated tokens.\n */\nexport function stringify(values) {\n  return values.join(' ').trim()\n}\n","/**\n * List of HTML void tag names.\n *\n * @type {Array<string>}\n */\nexport const htmlVoidElements = [\n  'area',\n  'base',\n  'basefont',\n  'bgsound',\n  'br',\n  'col',\n  'command',\n  'embed',\n  'frame',\n  'hr',\n  'image',\n  'img',\n  'input',\n  'keygen',\n  'link',\n  'meta',\n  'param',\n  'source',\n  'track',\n  'wbr'\n]\n","const UNDEFINED_CODE_POINTS = new Set([\n    65534, 65535, 131070, 131071, 196606, 196607, 262142, 262143, 327678, 327679, 393214,\n    393215, 458750, 458751, 524286, 524287, 589822, 589823, 655358, 655359, 720894,\n    720895, 786430, 786431, 851966, 851967, 917502, 917503, 983038, 983039, 1048574,\n    1048575, 1114110, 1114111,\n]);\nexport const REPLACEMENT_CHARACTER = '\\uFFFD';\nexport var CODE_POINTS;\n(function (CODE_POINTS) {\n    CODE_POINTS[CODE_POINTS[\"EOF\"] = -1] = \"EOF\";\n    CODE_POINTS[CODE_POINTS[\"NULL\"] = 0] = \"NULL\";\n    CODE_POINTS[CODE_POINTS[\"TABULATION\"] = 9] = \"TABULATION\";\n    CODE_POINTS[CODE_POINTS[\"CARRIAGE_RETURN\"] = 13] = \"CARRIAGE_RETURN\";\n    CODE_POINTS[CODE_POINTS[\"LINE_FEED\"] = 10] = \"LINE_FEED\";\n    CODE_POINTS[CODE_POINTS[\"FORM_FEED\"] = 12] = \"FORM_FEED\";\n    CODE_POINTS[CODE_POINTS[\"SPACE\"] = 32] = \"SPACE\";\n    CODE_POINTS[CODE_POINTS[\"EXCLAMATION_MARK\"] = 33] = \"EXCLAMATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"QUOTATION_MARK\"] = 34] = \"QUOTATION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"AMPERSAND\"] = 38] = \"AMPERSAND\";\n    CODE_POINTS[CODE_POINTS[\"APOSTROPHE\"] = 39] = \"APOSTROPHE\";\n    CODE_POINTS[CODE_POINTS[\"HYPHEN_MINUS\"] = 45] = \"HYPHEN_MINUS\";\n    CODE_POINTS[CODE_POINTS[\"SOLIDUS\"] = 47] = \"SOLIDUS\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_0\"] = 48] = \"DIGIT_0\";\n    CODE_POINTS[CODE_POINTS[\"DIGIT_9\"] = 57] = \"DIGIT_9\";\n    CODE_POINTS[CODE_POINTS[\"SEMICOLON\"] = 59] = \"SEMICOLON\";\n    CODE_POINTS[CODE_POINTS[\"LESS_THAN_SIGN\"] = 60] = \"LESS_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"EQUALS_SIGN\"] = 61] = \"EQUALS_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"GREATER_THAN_SIGN\"] = 62] = \"GREATER_THAN_SIGN\";\n    CODE_POINTS[CODE_POINTS[\"QUESTION_MARK\"] = 63] = \"QUESTION_MARK\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_A\"] = 65] = \"LATIN_CAPITAL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_CAPITAL_Z\"] = 90] = \"LATIN_CAPITAL_Z\";\n    CODE_POINTS[CODE_POINTS[\"RIGHT_SQUARE_BRACKET\"] = 93] = \"RIGHT_SQUARE_BRACKET\";\n    CODE_POINTS[CODE_POINTS[\"GRAVE_ACCENT\"] = 96] = \"GRAVE_ACCENT\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_A\"] = 97] = \"LATIN_SMALL_A\";\n    CODE_POINTS[CODE_POINTS[\"LATIN_SMALL_Z\"] = 122] = \"LATIN_SMALL_Z\";\n})(CODE_POINTS || (CODE_POINTS = {}));\nexport const SEQUENCES = {\n    DASH_DASH: '--',\n    CDATA_START: '[CDATA[',\n    DOCTYPE: 'doctype',\n    SCRIPT: 'script',\n    PUBLIC: 'public',\n    SYSTEM: 'system',\n};\n//Surrogates\nexport function isSurrogate(cp) {\n    return cp >= 55296 && cp <= 57343;\n}\nexport function isSurrogatePair(cp) {\n    return cp >= 56320 && cp <= 57343;\n}\nexport function getSurrogatePairCodePoint(cp1, cp2) {\n    return (cp1 - 55296) * 1024 + 9216 + cp2;\n}\n//NOTE: excluding NULL and ASCII whitespace\nexport function isControlCodePoint(cp) {\n    return ((cp !== 0x20 && cp !== 0x0a && cp !== 0x0d && cp !== 0x09 && cp !== 0x0c && cp >= 0x01 && cp <= 0x1f) ||\n        (cp >= 0x7f && cp <= 0x9f));\n}\nexport function isUndefinedCodePoint(cp) {\n    return (cp >= 64976 && cp <= 65007) || UNDEFINED_CODE_POINTS.has(cp);\n}\n","export var ERR;\n(function (ERR) {\n    ERR[\"controlCharacterInInputStream\"] = \"control-character-in-input-stream\";\n    ERR[\"noncharacterInInputStream\"] = \"noncharacter-in-input-stream\";\n    ERR[\"surrogateInInputStream\"] = \"surrogate-in-input-stream\";\n    ERR[\"nonVoidHtmlElementStartTagWithTrailingSolidus\"] = \"non-void-html-element-start-tag-with-trailing-solidus\";\n    ERR[\"endTagWithAttributes\"] = \"end-tag-with-attributes\";\n    ERR[\"endTagWithTrailingSolidus\"] = \"end-tag-with-trailing-solidus\";\n    ERR[\"unexpectedSolidusInTag\"] = \"unexpected-solidus-in-tag\";\n    ERR[\"unexpectedNullCharacter\"] = \"unexpected-null-character\";\n    ERR[\"unexpectedQuestionMarkInsteadOfTagName\"] = \"unexpected-question-mark-instead-of-tag-name\";\n    ERR[\"invalidFirstCharacterOfTagName\"] = \"invalid-first-character-of-tag-name\";\n    ERR[\"unexpectedEqualsSignBeforeAttributeName\"] = \"unexpected-equals-sign-before-attribute-name\";\n    ERR[\"missingEndTagName\"] = \"missing-end-tag-name\";\n    ERR[\"unexpectedCharacterInAttributeName\"] = \"unexpected-character-in-attribute-name\";\n    ERR[\"unknownNamedCharacterReference\"] = \"unknown-named-character-reference\";\n    ERR[\"missingSemicolonAfterCharacterReference\"] = \"missing-semicolon-after-character-reference\";\n    ERR[\"unexpectedCharacterAfterDoctypeSystemIdentifier\"] = \"unexpected-character-after-doctype-system-identifier\";\n    ERR[\"unexpectedCharacterInUnquotedAttributeValue\"] = \"unexpected-character-in-unquoted-attribute-value\";\n    ERR[\"eofBeforeTagName\"] = \"eof-before-tag-name\";\n    ERR[\"eofInTag\"] = \"eof-in-tag\";\n    ERR[\"missingAttributeValue\"] = \"missing-attribute-value\";\n    ERR[\"missingWhitespaceBetweenAttributes\"] = \"missing-whitespace-between-attributes\";\n    ERR[\"missingWhitespaceAfterDoctypePublicKeyword\"] = \"missing-whitespace-after-doctype-public-keyword\";\n    ERR[\"missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers\"] = \"missing-whitespace-between-doctype-public-and-system-identifiers\";\n    ERR[\"missingWhitespaceAfterDoctypeSystemKeyword\"] = \"missing-whitespace-after-doctype-system-keyword\";\n    ERR[\"missingQuoteBeforeDoctypePublicIdentifier\"] = \"missing-quote-before-doctype-public-identifier\";\n    ERR[\"missingQuoteBeforeDoctypeSystemIdentifier\"] = \"missing-quote-before-doctype-system-identifier\";\n    ERR[\"missingDoctypePublicIdentifier\"] = \"missing-doctype-public-identifier\";\n    ERR[\"missingDoctypeSystemIdentifier\"] = \"missing-doctype-system-identifier\";\n    ERR[\"abruptDoctypePublicIdentifier\"] = \"abrupt-doctype-public-identifier\";\n    ERR[\"abruptDoctypeSystemIdentifier\"] = \"abrupt-doctype-system-identifier\";\n    ERR[\"cdataInHtmlContent\"] = \"cdata-in-html-content\";\n    ERR[\"incorrectlyOpenedComment\"] = \"incorrectly-opened-comment\";\n    ERR[\"eofInScriptHtmlCommentLikeText\"] = \"eof-in-script-html-comment-like-text\";\n    ERR[\"eofInDoctype\"] = \"eof-in-doctype\";\n    ERR[\"nestedComment\"] = \"nested-comment\";\n    ERR[\"abruptClosingOfEmptyComment\"] = \"abrupt-closing-of-empty-comment\";\n    ERR[\"eofInComment\"] = \"eof-in-comment\";\n    ERR[\"incorrectlyClosedComment\"] = \"incorrectly-closed-comment\";\n    ERR[\"eofInCdata\"] = \"eof-in-cdata\";\n    ERR[\"absenceOfDigitsInNumericCharacterReference\"] = \"absence-of-digits-in-numeric-character-reference\";\n    ERR[\"nullCharacterReference\"] = \"null-character-reference\";\n    ERR[\"surrogateCharacterReference\"] = \"surrogate-character-reference\";\n    ERR[\"characterReferenceOutsideUnicodeRange\"] = \"character-reference-outside-unicode-range\";\n    ERR[\"controlCharacterReference\"] = \"control-character-reference\";\n    ERR[\"noncharacterCharacterReference\"] = \"noncharacter-character-reference\";\n    ERR[\"missingWhitespaceBeforeDoctypeName\"] = \"missing-whitespace-before-doctype-name\";\n    ERR[\"missingDoctypeName\"] = \"missing-doctype-name\";\n    ERR[\"invalidCharacterSequenceAfterDoctypeName\"] = \"invalid-character-sequence-after-doctype-name\";\n    ERR[\"duplicateAttribute\"] = \"duplicate-attribute\";\n    ERR[\"nonConformingDoctype\"] = \"non-conforming-doctype\";\n    ERR[\"missingDoctype\"] = \"missing-doctype\";\n    ERR[\"misplacedDoctype\"] = \"misplaced-doctype\";\n    ERR[\"endTagWithoutMatchingOpenElement\"] = \"end-tag-without-matching-open-element\";\n    ERR[\"closingOfElementWithOpenChildElements\"] = \"closing-of-element-with-open-child-elements\";\n    ERR[\"disallowedContentInNoscriptInHead\"] = \"disallowed-content-in-noscript-in-head\";\n    ERR[\"openElementsLeftAfterEof\"] = \"open-elements-left-after-eof\";\n    ERR[\"abandonedHeadElementChild\"] = \"abandoned-head-element-child\";\n    ERR[\"misplacedStartTagForHeadElement\"] = \"misplaced-start-tag-for-head-element\";\n    ERR[\"nestedNoscriptInHead\"] = \"nested-noscript-in-head\";\n    ERR[\"eofInElementThatCanContainOnlyText\"] = \"eof-in-element-that-can-contain-only-text\";\n})(ERR || (ERR = {}));\n","import { CODE_POINTS as $, getSurrogatePairCodePoint, isControlCodePoint, isSurrogate, isSurrogatePair, isUndefinedCodePoint, } from '../common/unicode.js';\nimport { ERR } from '../common/error-codes.js';\n//Const\nconst DEFAULT_BUFFER_WATERLINE = 1 << 16;\n//Preprocessor\n//NOTE: HTML input preprocessing\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/parsing.html#preprocessing-the-input-stream)\nexport class Preprocessor {\n    constructor(handler) {\n        this.handler = handler;\n        this.html = '';\n        this.pos = -1;\n        // NOTE: Initial `lastGapPos` is -2, to ensure `col` on initialisation is 0\n        this.lastGapPos = -2;\n        this.gapStack = [];\n        this.skipNextNewLine = false;\n        this.lastChunkWritten = false;\n        this.endOfChunkHit = false;\n        this.bufferWaterline = DEFAULT_BUFFER_WATERLINE;\n        this.isEol = false;\n        this.lineStartPos = 0;\n        this.droppedBufferSize = 0;\n        this.line = 1;\n        //NOTE: avoid reporting errors twice on advance/retreat\n        this.lastErrOffset = -1;\n    }\n    /** The column on the current line. If we just saw a gap (eg. a surrogate pair), return the index before. */\n    get col() {\n        return this.pos - this.lineStartPos + Number(this.lastGapPos !== this.pos);\n    }\n    get offset() {\n        return this.droppedBufferSize + this.pos;\n    }\n    getError(code, cpOffset) {\n        const { line, col, offset } = this;\n        const startCol = col + cpOffset;\n        const startOffset = offset + cpOffset;\n        return {\n            code,\n            startLine: line,\n            endLine: line,\n            startCol,\n            endCol: startCol,\n            startOffset,\n            endOffset: startOffset,\n        };\n    }\n    _err(code) {\n        if (this.handler.onParseError && this.lastErrOffset !== this.offset) {\n            this.lastErrOffset = this.offset;\n            this.handler.onParseError(this.getError(code, 0));\n        }\n    }\n    _addGap() {\n        this.gapStack.push(this.lastGapPos);\n        this.lastGapPos = this.pos;\n    }\n    _processSurrogate(cp) {\n        //NOTE: try to peek a surrogate pair\n        if (this.pos !== this.html.length - 1) {\n            const nextCp = this.html.charCodeAt(this.pos + 1);\n            if (isSurrogatePair(nextCp)) {\n                //NOTE: we have a surrogate pair. Peek pair character and recalculate code point.\n                this.pos++;\n                //NOTE: add a gap that should be avoided during retreat\n                this._addGap();\n                return getSurrogatePairCodePoint(cp, nextCp);\n            }\n        }\n        //NOTE: we are at the end of a chunk, therefore we can't infer the surrogate pair yet.\n        else if (!this.lastChunkWritten) {\n            this.endOfChunkHit = true;\n            return $.EOF;\n        }\n        //NOTE: isolated surrogate\n        this._err(ERR.surrogateInInputStream);\n        return cp;\n    }\n    willDropParsedChunk() {\n        return this.pos > this.bufferWaterline;\n    }\n    dropParsedChunk() {\n        if (this.willDropParsedChunk()) {\n            this.html = this.html.substring(this.pos);\n            this.lineStartPos -= this.pos;\n            this.droppedBufferSize += this.pos;\n            this.pos = 0;\n            this.lastGapPos = -2;\n            this.gapStack.length = 0;\n        }\n    }\n    write(chunk, isLastChunk) {\n        if (this.html.length > 0) {\n            this.html += chunk;\n        }\n        else {\n            this.html = chunk;\n        }\n        this.endOfChunkHit = false;\n        this.lastChunkWritten = isLastChunk;\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.html = this.html.substring(0, this.pos + 1) + chunk + this.html.substring(this.pos + 1);\n        this.endOfChunkHit = false;\n    }\n    startsWith(pattern, caseSensitive) {\n        // Check if our buffer has enough characters\n        if (this.pos + pattern.length > this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return false;\n        }\n        if (caseSensitive) {\n            return this.html.startsWith(pattern, this.pos);\n        }\n        for (let i = 0; i < pattern.length; i++) {\n            const cp = this.html.charCodeAt(this.pos + i) | 0x20;\n            if (cp !== pattern.charCodeAt(i)) {\n                return false;\n            }\n        }\n        return true;\n    }\n    peek(offset) {\n        const pos = this.pos + offset;\n        if (pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        const code = this.html.charCodeAt(pos);\n        return code === $.CARRIAGE_RETURN ? $.LINE_FEED : code;\n    }\n    advance() {\n        this.pos++;\n        //NOTE: LF should be in the last column of the line\n        if (this.isEol) {\n            this.isEol = false;\n            this.line++;\n            this.lineStartPos = this.pos;\n        }\n        if (this.pos >= this.html.length) {\n            this.endOfChunkHit = !this.lastChunkWritten;\n            return $.EOF;\n        }\n        let cp = this.html.charCodeAt(this.pos);\n        //NOTE: all U+000D CARRIAGE RETURN (CR) characters must be converted to U+000A LINE FEED (LF) characters\n        if (cp === $.CARRIAGE_RETURN) {\n            this.isEol = true;\n            this.skipNextNewLine = true;\n            return $.LINE_FEED;\n        }\n        //NOTE: any U+000A LINE FEED (LF) characters that immediately follow a U+000D CARRIAGE RETURN (CR) character\n        //must be ignored.\n        if (cp === $.LINE_FEED) {\n            this.isEol = true;\n            if (this.skipNextNewLine) {\n                // `line` will be bumped again in the recursive call.\n                this.line--;\n                this.skipNextNewLine = false;\n                this._addGap();\n                return this.advance();\n            }\n        }\n        this.skipNextNewLine = false;\n        if (isSurrogate(cp)) {\n            cp = this._processSurrogate(cp);\n        }\n        //OPTIMIZATION: first check if code point is in the common allowed\n        //range (ASCII alphanumeric, whitespaces, big chunk of BMP)\n        //before going into detailed performance cost validation.\n        const isCommonValidRange = this.handler.onParseError === null ||\n            (cp > 0x1f && cp < 0x7f) ||\n            cp === $.LINE_FEED ||\n            cp === $.CARRIAGE_RETURN ||\n            (cp > 0x9f && cp < 64976);\n        if (!isCommonValidRange) {\n            this._checkForProblematicCharacters(cp);\n        }\n        return cp;\n    }\n    _checkForProblematicCharacters(cp) {\n        if (isControlCodePoint(cp)) {\n            this._err(ERR.controlCharacterInInputStream);\n        }\n        else if (isUndefinedCodePoint(cp)) {\n            this._err(ERR.noncharacterInInputStream);\n        }\n    }\n    retreat(count) {\n        this.pos -= count;\n        while (this.pos < this.lastGapPos) {\n            this.lastGapPos = this.gapStack.pop();\n            this.pos--;\n        }\n        this.isEol = false;\n    }\n}\n","export var TokenType;\n(function (TokenType) {\n    TokenType[TokenType[\"CHARACTER\"] = 0] = \"CHARACTER\";\n    TokenType[TokenType[\"NULL_CHARACTER\"] = 1] = \"NULL_CHARACTER\";\n    TokenType[TokenType[\"WHITESPACE_CHARACTER\"] = 2] = \"WHITESPACE_CHARACTER\";\n    TokenType[TokenType[\"START_TAG\"] = 3] = \"START_TAG\";\n    TokenType[TokenType[\"END_TAG\"] = 4] = \"END_TAG\";\n    TokenType[TokenType[\"COMMENT\"] = 5] = \"COMMENT\";\n    TokenType[TokenType[\"DOCTYPE\"] = 6] = \"DOCTYPE\";\n    TokenType[TokenType[\"EOF\"] = 7] = \"EOF\";\n    TokenType[TokenType[\"HIBERNATION\"] = 8] = \"HIBERNATION\";\n})(TokenType || (TokenType = {}));\nexport function getTokenAttr(token, attrName) {\n    for (let i = token.attrs.length - 1; i >= 0; i--) {\n        if (token.attrs[i].name === attrName) {\n            return token.attrs[i].value;\n        }\n    }\n    return null;\n}\n","// Generated using scripts/write-decode-map.ts\nexport const htmlDecodeTree = /* #__PURE__ */ new Uint16Array(\n// prettier-ignore\n/* #__PURE__ */ \"\\u1d41<\\xd5\\u0131\\u028a\\u049d\\u057b\\u05d0\\u0675\\u06de\\u07a2\\u07d6\\u080f\\u0a4a\\u0a91\\u0da1\\u0e6d\\u0f09\\u0f26\\u10ca\\u1228\\u12e1\\u1415\\u149d\\u14c3\\u14df\\u1525\\0\\0\\0\\0\\0\\0\\u156b\\u16cd\\u198d\\u1c12\\u1ddd\\u1f7e\\u2060\\u21b0\\u228d\\u23c0\\u23fb\\u2442\\u2824\\u2912\\u2d08\\u2e48\\u2fce\\u3016\\u32ba\\u3639\\u37ac\\u38fe\\u3a28\\u3a71\\u3ae0\\u3b2e\\u0800EMabcfglmnoprstu\\\\bfms\\x7f\\x84\\x8b\\x90\\x95\\x98\\xa6\\xb3\\xb9\\xc8\\xcflig\\u803b\\xc6\\u40c6P\\u803b&\\u4026cute\\u803b\\xc1\\u40c1reve;\\u4102\\u0100iyx}rc\\u803b\\xc2\\u40c2;\\u4410r;\\uc000\\ud835\\udd04rave\\u803b\\xc0\\u40c0pha;\\u4391acr;\\u4100d;\\u6a53\\u0100gp\\x9d\\xa1on;\\u4104f;\\uc000\\ud835\\udd38plyFunction;\\u6061ing\\u803b\\xc5\\u40c5\\u0100cs\\xbe\\xc3r;\\uc000\\ud835\\udc9cign;\\u6254ilde\\u803b\\xc3\\u40c3ml\\u803b\\xc4\\u40c4\\u0400aceforsu\\xe5\\xfb\\xfe\\u0117\\u011c\\u0122\\u0127\\u012a\\u0100cr\\xea\\xf2kslash;\\u6216\\u0176\\xf6\\xf8;\\u6ae7ed;\\u6306y;\\u4411\\u0180crt\\u0105\\u010b\\u0114ause;\\u6235noullis;\\u612ca;\\u4392r;\\uc000\\ud835\\udd05pf;\\uc000\\ud835\\udd39eve;\\u42d8c\\xf2\\u0113mpeq;\\u624e\\u0700HOacdefhilorsu\\u014d\\u0151\\u0156\\u0180\\u019e\\u01a2\\u01b5\\u01b7\\u01ba\\u01dc\\u0215\\u0273\\u0278\\u027ecy;\\u4427PY\\u803b\\xa9\\u40a9\\u0180cpy\\u015d\\u0162\\u017aute;\\u4106\\u0100;i\\u0167\\u0168\\u62d2talDifferentialD;\\u6145leys;\\u612d\\u0200aeio\\u0189\\u018e\\u0194\\u0198ron;\\u410cdil\\u803b\\xc7\\u40c7rc;\\u4108nint;\\u6230ot;\\u410a\\u0100dn\\u01a7\\u01adilla;\\u40b8terDot;\\u40b7\\xf2\\u017fi;\\u43a7rcle\\u0200DMPT\\u01c7\\u01cb\\u01d1\\u01d6ot;\\u6299inus;\\u6296lus;\\u6295imes;\\u6297o\\u0100cs\\u01e2\\u01f8kwiseContourIntegral;\\u6232eCurly\\u0100DQ\\u0203\\u020foubleQuote;\\u601duote;\\u6019\\u0200lnpu\\u021e\\u0228\\u0247\\u0255on\\u0100;e\\u0225\\u0226\\u6237;\\u6a74\\u0180git\\u022f\\u0236\\u023aruent;\\u6261nt;\\u622fourIntegral;\\u622e\\u0100fr\\u024c\\u024e;\\u6102oduct;\\u6210nterClockwiseContourIntegral;\\u6233oss;\\u6a2fcr;\\uc000\\ud835\\udc9ep\\u0100;C\\u0284\\u0285\\u62d3ap;\\u624d\\u0580DJSZacefios\\u02a0\\u02ac\\u02b0\\u02b4\\u02b8\\u02cb\\u02d7\\u02e1\\u02e6\\u0333\\u048d\\u0100;o\\u0179\\u02a5trahd;\\u6911cy;\\u4402cy;\\u4405cy;\\u440f\\u0180grs\\u02bf\\u02c4\\u02c7ger;\\u6021r;\\u61a1hv;\\u6ae4\\u0100ay\\u02d0\\u02d5ron;\\u410e;\\u4414l\\u0100;t\\u02dd\\u02de\\u6207a;\\u4394r;\\uc000\\ud835\\udd07\\u0100af\\u02eb\\u0327\\u0100cm\\u02f0\\u0322ritical\\u0200ADGT\\u0300\\u0306\\u0316\\u031ccute;\\u40b4o\\u0174\\u030b\\u030d;\\u42d9bleAcute;\\u42ddrave;\\u4060ilde;\\u42dcond;\\u62c4ferentialD;\\u6146\\u0470\\u033d\\0\\0\\0\\u0342\\u0354\\0\\u0405f;\\uc000\\ud835\\udd3b\\u0180;DE\\u0348\\u0349\\u034d\\u40a8ot;\\u60dcqual;\\u6250ble\\u0300CDLRUV\\u0363\\u0372\\u0382\\u03cf\\u03e2\\u03f8ontourIntegra\\xec\\u0239o\\u0274\\u0379\\0\\0\\u037b\\xbb\\u0349nArrow;\\u61d3\\u0100eo\\u0387\\u03a4ft\\u0180ART\\u0390\\u0396\\u03a1rrow;\\u61d0ightArrow;\\u61d4e\\xe5\\u02cang\\u0100LR\\u03ab\\u03c4eft\\u0100AR\\u03b3\\u03b9rrow;\\u67f8ightArrow;\\u67faightArrow;\\u67f9ight\\u0100AT\\u03d8\\u03derrow;\\u61d2ee;\\u62a8p\\u0241\\u03e9\\0\\0\\u03efrrow;\\u61d1ownArrow;\\u61d5erticalBar;\\u6225n\\u0300ABLRTa\\u0412\\u042a\\u0430\\u045e\\u047f\\u037crrow\\u0180;BU\\u041d\\u041e\\u0422\\u6193ar;\\u6913pArrow;\\u61f5reve;\\u4311eft\\u02d2\\u043a\\0\\u0446\\0\\u0450ightVector;\\u6950eeVector;\\u695eector\\u0100;B\\u0459\\u045a\\u61bdar;\\u6956ight\\u01d4\\u0467\\0\\u0471eeVector;\\u695fector\\u0100;B\\u047a\\u047b\\u61c1ar;\\u6957ee\\u0100;A\\u0486\\u0487\\u62a4rrow;\\u61a7\\u0100ct\\u0492\\u0497r;\\uc000\\ud835\\udc9frok;\\u4110\\u0800NTacdfglmopqstux\\u04bd\\u04c0\\u04c4\\u04cb\\u04de\\u04e2\\u04e7\\u04ee\\u04f5\\u0521\\u052f\\u0536\\u0552\\u055d\\u0560\\u0565G;\\u414aH\\u803b\\xd0\\u40d0cute\\u803b\\xc9\\u40c9\\u0180aiy\\u04d2\\u04d7\\u04dcron;\\u411arc\\u803b\\xca\\u40ca;\\u442dot;\\u4116r;\\uc000\\ud835\\udd08rave\\u803b\\xc8\\u40c8ement;\\u6208\\u0100ap\\u04fa\\u04fecr;\\u4112ty\\u0253\\u0506\\0\\0\\u0512mallSquare;\\u65fberySmallSquare;\\u65ab\\u0100gp\\u0526\\u052aon;\\u4118f;\\uc000\\ud835\\udd3csilon;\\u4395u\\u0100ai\\u053c\\u0549l\\u0100;T\\u0542\\u0543\\u6a75ilde;\\u6242librium;\\u61cc\\u0100ci\\u0557\\u055ar;\\u6130m;\\u6a73a;\\u4397ml\\u803b\\xcb\\u40cb\\u0100ip\\u056a\\u056fsts;\\u6203onentialE;\\u6147\\u0280cfios\\u0585\\u0588\\u058d\\u05b2\\u05ccy;\\u4424r;\\uc000\\ud835\\udd09lled\\u0253\\u0597\\0\\0\\u05a3mallSquare;\\u65fcerySmallSquare;\\u65aa\\u0370\\u05ba\\0\\u05bf\\0\\0\\u05c4f;\\uc000\\ud835\\udd3dAll;\\u6200riertrf;\\u6131c\\xf2\\u05cb\\u0600JTabcdfgorst\\u05e8\\u05ec\\u05ef\\u05fa\\u0600\\u0612\\u0616\\u061b\\u061d\\u0623\\u066c\\u0672cy;\\u4403\\u803b>\\u403emma\\u0100;d\\u05f7\\u05f8\\u4393;\\u43dcreve;\\u411e\\u0180eiy\\u0607\\u060c\\u0610dil;\\u4122rc;\\u411c;\\u4413ot;\\u4120r;\\uc000\\ud835\\udd0a;\\u62d9pf;\\uc000\\ud835\\udd3eeater\\u0300EFGLST\\u0635\\u0644\\u064e\\u0656\\u065b\\u0666qual\\u0100;L\\u063e\\u063f\\u6265ess;\\u62dbullEqual;\\u6267reater;\\u6aa2ess;\\u6277lantEqual;\\u6a7eilde;\\u6273cr;\\uc000\\ud835\\udca2;\\u626b\\u0400Aacfiosu\\u0685\\u068b\\u0696\\u069b\\u069e\\u06aa\\u06be\\u06caRDcy;\\u442a\\u0100ct\\u0690\\u0694ek;\\u42c7;\\u405eirc;\\u4124r;\\u610clbertSpace;\\u610b\\u01f0\\u06af\\0\\u06b2f;\\u610dizontalLine;\\u6500\\u0100ct\\u06c3\\u06c5\\xf2\\u06a9rok;\\u4126mp\\u0144\\u06d0\\u06d8ownHum\\xf0\\u012fqual;\\u624f\\u0700EJOacdfgmnostu\\u06fa\\u06fe\\u0703\\u0707\\u070e\\u071a\\u071e\\u0721\\u0728\\u0744\\u0778\\u078b\\u078f\\u0795cy;\\u4415lig;\\u4132cy;\\u4401cute\\u803b\\xcd\\u40cd\\u0100iy\\u0713\\u0718rc\\u803b\\xce\\u40ce;\\u4418ot;\\u4130r;\\u6111rave\\u803b\\xcc\\u40cc\\u0180;ap\\u0720\\u072f\\u073f\\u0100cg\\u0734\\u0737r;\\u412ainaryI;\\u6148lie\\xf3\\u03dd\\u01f4\\u0749\\0\\u0762\\u0100;e\\u074d\\u074e\\u622c\\u0100gr\\u0753\\u0758ral;\\u622bsection;\\u62c2isible\\u0100CT\\u076c\\u0772omma;\\u6063imes;\\u6062\\u0180gpt\\u077f\\u0783\\u0788on;\\u412ef;\\uc000\\ud835\\udd40a;\\u4399cr;\\u6110ilde;\\u4128\\u01eb\\u079a\\0\\u079ecy;\\u4406l\\u803b\\xcf\\u40cf\\u0280cfosu\\u07ac\\u07b7\\u07bc\\u07c2\\u07d0\\u0100iy\\u07b1\\u07b5rc;\\u4134;\\u4419r;\\uc000\\ud835\\udd0dpf;\\uc000\\ud835\\udd41\\u01e3\\u07c7\\0\\u07ccr;\\uc000\\ud835\\udca5rcy;\\u4408kcy;\\u4404\\u0380HJacfos\\u07e4\\u07e8\\u07ec\\u07f1\\u07fd\\u0802\\u0808cy;\\u4425cy;\\u440cppa;\\u439a\\u0100ey\\u07f6\\u07fbdil;\\u4136;\\u441ar;\\uc000\\ud835\\udd0epf;\\uc000\\ud835\\udd42cr;\\uc000\\ud835\\udca6\\u0580JTaceflmost\\u0825\\u0829\\u082c\\u0850\\u0863\\u09b3\\u09b8\\u09c7\\u09cd\\u0a37\\u0a47cy;\\u4409\\u803b<\\u403c\\u0280cmnpr\\u0837\\u083c\\u0841\\u0844\\u084dute;\\u4139bda;\\u439bg;\\u67ealacetrf;\\u6112r;\\u619e\\u0180aey\\u0857\\u085c\\u0861ron;\\u413ddil;\\u413b;\\u441b\\u0100fs\\u0868\\u0970t\\u0500ACDFRTUVar\\u087e\\u08a9\\u08b1\\u08e0\\u08e6\\u08fc\\u092f\\u095b\\u0390\\u096a\\u0100nr\\u0883\\u088fgleBracket;\\u67e8row\\u0180;BR\\u0899\\u089a\\u089e\\u6190ar;\\u61e4ightArrow;\\u61c6eiling;\\u6308o\\u01f5\\u08b7\\0\\u08c3bleBracket;\\u67e6n\\u01d4\\u08c8\\0\\u08d2eeVector;\\u6961ector\\u0100;B\\u08db\\u08dc\\u61c3ar;\\u6959loor;\\u630aight\\u0100AV\\u08ef\\u08f5rrow;\\u6194ector;\\u694e\\u0100er\\u0901\\u0917e\\u0180;AV\\u0909\\u090a\\u0910\\u62a3rrow;\\u61a4ector;\\u695aiangle\\u0180;BE\\u0924\\u0925\\u0929\\u62b2ar;\\u69cfqual;\\u62b4p\\u0180DTV\\u0937\\u0942\\u094cownVector;\\u6951eeVector;\\u6960ector\\u0100;B\\u0956\\u0957\\u61bfar;\\u6958ector\\u0100;B\\u0965\\u0966\\u61bcar;\\u6952ight\\xe1\\u039cs\\u0300EFGLST\\u097e\\u098b\\u0995\\u099d\\u09a2\\u09adqualGreater;\\u62daullEqual;\\u6266reater;\\u6276ess;\\u6aa1lantEqual;\\u6a7dilde;\\u6272r;\\uc000\\ud835\\udd0f\\u0100;e\\u09bd\\u09be\\u62d8ftarrow;\\u61daidot;\\u413f\\u0180npw\\u09d4\\u0a16\\u0a1bg\\u0200LRlr\\u09de\\u09f7\\u0a02\\u0a10eft\\u0100AR\\u09e6\\u09ecrrow;\\u67f5ightArrow;\\u67f7ightArrow;\\u67f6eft\\u0100ar\\u03b3\\u0a0aight\\xe1\\u03bfight\\xe1\\u03caf;\\uc000\\ud835\\udd43er\\u0100LR\\u0a22\\u0a2ceftArrow;\\u6199ightArrow;\\u6198\\u0180cht\\u0a3e\\u0a40\\u0a42\\xf2\\u084c;\\u61b0rok;\\u4141;\\u626a\\u0400acefiosu\\u0a5a\\u0a5d\\u0a60\\u0a77\\u0a7c\\u0a85\\u0a8b\\u0a8ep;\\u6905y;\\u441c\\u0100dl\\u0a65\\u0a6fiumSpace;\\u605flintrf;\\u6133r;\\uc000\\ud835\\udd10nusPlus;\\u6213pf;\\uc000\\ud835\\udd44c\\xf2\\u0a76;\\u439c\\u0480Jacefostu\\u0aa3\\u0aa7\\u0aad\\u0ac0\\u0b14\\u0b19\\u0d91\\u0d97\\u0d9ecy;\\u440acute;\\u4143\\u0180aey\\u0ab4\\u0ab9\\u0aberon;\\u4147dil;\\u4145;\\u441d\\u0180gsw\\u0ac7\\u0af0\\u0b0eative\\u0180MTV\\u0ad3\\u0adf\\u0ae8ediumSpace;\\u600bhi\\u0100cn\\u0ae6\\u0ad8\\xeb\\u0ad9eryThi\\xee\\u0ad9ted\\u0100GL\\u0af8\\u0b06reaterGreate\\xf2\\u0673essLes\\xf3\\u0a48Line;\\u400ar;\\uc000\\ud835\\udd11\\u0200Bnpt\\u0b22\\u0b28\\u0b37\\u0b3areak;\\u6060BreakingSpace;\\u40a0f;\\u6115\\u0680;CDEGHLNPRSTV\\u0b55\\u0b56\\u0b6a\\u0b7c\\u0ba1\\u0beb\\u0c04\\u0c5e\\u0c84\\u0ca6\\u0cd8\\u0d61\\u0d85\\u6aec\\u0100ou\\u0b5b\\u0b64ngruent;\\u6262pCap;\\u626doubleVerticalBar;\\u6226\\u0180lqx\\u0b83\\u0b8a\\u0b9bement;\\u6209ual\\u0100;T\\u0b92\\u0b93\\u6260ilde;\\uc000\\u2242\\u0338ists;\\u6204reater\\u0380;EFGLST\\u0bb6\\u0bb7\\u0bbd\\u0bc9\\u0bd3\\u0bd8\\u0be5\\u626fqual;\\u6271ullEqual;\\uc000\\u2267\\u0338reater;\\uc000\\u226b\\u0338ess;\\u6279lantEqual;\\uc000\\u2a7e\\u0338ilde;\\u6275ump\\u0144\\u0bf2\\u0bfdownHump;\\uc000\\u224e\\u0338qual;\\uc000\\u224f\\u0338e\\u0100fs\\u0c0a\\u0c27tTriangle\\u0180;BE\\u0c1a\\u0c1b\\u0c21\\u62eaar;\\uc000\\u29cf\\u0338qual;\\u62ecs\\u0300;EGLST\\u0c35\\u0c36\\u0c3c\\u0c44\\u0c4b\\u0c58\\u626equal;\\u6270reater;\\u6278ess;\\uc000\\u226a\\u0338lantEqual;\\uc000\\u2a7d\\u0338ilde;\\u6274ested\\u0100GL\\u0c68\\u0c79reaterGreater;\\uc000\\u2aa2\\u0338essLess;\\uc000\\u2aa1\\u0338recedes\\u0180;ES\\u0c92\\u0c93\\u0c9b\\u6280qual;\\uc000\\u2aaf\\u0338lantEqual;\\u62e0\\u0100ei\\u0cab\\u0cb9verseElement;\\u620cghtTriangle\\u0180;BE\\u0ccb\\u0ccc\\u0cd2\\u62ebar;\\uc000\\u29d0\\u0338qual;\\u62ed\\u0100qu\\u0cdd\\u0d0cuareSu\\u0100bp\\u0ce8\\u0cf9set\\u0100;E\\u0cf0\\u0cf3\\uc000\\u228f\\u0338qual;\\u62e2erset\\u0100;E\\u0d03\\u0d06\\uc000\\u2290\\u0338qual;\\u62e3\\u0180bcp\\u0d13\\u0d24\\u0d4eset\\u0100;E\\u0d1b\\u0d1e\\uc000\\u2282\\u20d2qual;\\u6288ceeds\\u0200;EST\\u0d32\\u0d33\\u0d3b\\u0d46\\u6281qual;\\uc000\\u2ab0\\u0338lantEqual;\\u62e1ilde;\\uc000\\u227f\\u0338erset\\u0100;E\\u0d58\\u0d5b\\uc000\\u2283\\u20d2qual;\\u6289ilde\\u0200;EFT\\u0d6e\\u0d6f\\u0d75\\u0d7f\\u6241qual;\\u6244ullEqual;\\u6247ilde;\\u6249erticalBar;\\u6224cr;\\uc000\\ud835\\udca9ilde\\u803b\\xd1\\u40d1;\\u439d\\u0700Eacdfgmoprstuv\\u0dbd\\u0dc2\\u0dc9\\u0dd5\\u0ddb\\u0de0\\u0de7\\u0dfc\\u0e02\\u0e20\\u0e22\\u0e32\\u0e3f\\u0e44lig;\\u4152cute\\u803b\\xd3\\u40d3\\u0100iy\\u0dce\\u0dd3rc\\u803b\\xd4\\u40d4;\\u441eblac;\\u4150r;\\uc000\\ud835\\udd12rave\\u803b\\xd2\\u40d2\\u0180aei\\u0dee\\u0df2\\u0df6cr;\\u414cga;\\u43a9cron;\\u439fpf;\\uc000\\ud835\\udd46enCurly\\u0100DQ\\u0e0e\\u0e1aoubleQuote;\\u601cuote;\\u6018;\\u6a54\\u0100cl\\u0e27\\u0e2cr;\\uc000\\ud835\\udcaaash\\u803b\\xd8\\u40d8i\\u016c\\u0e37\\u0e3cde\\u803b\\xd5\\u40d5es;\\u6a37ml\\u803b\\xd6\\u40d6er\\u0100BP\\u0e4b\\u0e60\\u0100ar\\u0e50\\u0e53r;\\u603eac\\u0100ek\\u0e5a\\u0e5c;\\u63deet;\\u63b4arenthesis;\\u63dc\\u0480acfhilors\\u0e7f\\u0e87\\u0e8a\\u0e8f\\u0e92\\u0e94\\u0e9d\\u0eb0\\u0efcrtialD;\\u6202y;\\u441fr;\\uc000\\ud835\\udd13i;\\u43a6;\\u43a0usMinus;\\u40b1\\u0100ip\\u0ea2\\u0eadncareplan\\xe5\\u069df;\\u6119\\u0200;eio\\u0eb9\\u0eba\\u0ee0\\u0ee4\\u6abbcedes\\u0200;EST\\u0ec8\\u0ec9\\u0ecf\\u0eda\\u627aqual;\\u6aaflantEqual;\\u627cilde;\\u627eme;\\u6033\\u0100dp\\u0ee9\\u0eeeuct;\\u620fortion\\u0100;a\\u0225\\u0ef9l;\\u621d\\u0100ci\\u0f01\\u0f06r;\\uc000\\ud835\\udcab;\\u43a8\\u0200Ufos\\u0f11\\u0f16\\u0f1b\\u0f1fOT\\u803b\\\"\\u4022r;\\uc000\\ud835\\udd14pf;\\u611acr;\\uc000\\ud835\\udcac\\u0600BEacefhiorsu\\u0f3e\\u0f43\\u0f47\\u0f60\\u0f73\\u0fa7\\u0faa\\u0fad\\u1096\\u10a9\\u10b4\\u10bearr;\\u6910G\\u803b\\xae\\u40ae\\u0180cnr\\u0f4e\\u0f53\\u0f56ute;\\u4154g;\\u67ebr\\u0100;t\\u0f5c\\u0f5d\\u61a0l;\\u6916\\u0180aey\\u0f67\\u0f6c\\u0f71ron;\\u4158dil;\\u4156;\\u4420\\u0100;v\\u0f78\\u0f79\\u611cerse\\u0100EU\\u0f82\\u0f99\\u0100lq\\u0f87\\u0f8eement;\\u620builibrium;\\u61cbpEquilibrium;\\u696fr\\xbb\\u0f79o;\\u43a1ght\\u0400ACDFTUVa\\u0fc1\\u0feb\\u0ff3\\u1022\\u1028\\u105b\\u1087\\u03d8\\u0100nr\\u0fc6\\u0fd2gleBracket;\\u67e9row\\u0180;BL\\u0fdc\\u0fdd\\u0fe1\\u6192ar;\\u61e5eftArrow;\\u61c4eiling;\\u6309o\\u01f5\\u0ff9\\0\\u1005bleBracket;\\u67e7n\\u01d4\\u100a\\0\\u1014eeVector;\\u695dector\\u0100;B\\u101d\\u101e\\u61c2ar;\\u6955loor;\\u630b\\u0100er\\u102d\\u1043e\\u0180;AV\\u1035\\u1036\\u103c\\u62a2rrow;\\u61a6ector;\\u695biangle\\u0180;BE\\u1050\\u1051\\u1055\\u62b3ar;\\u69d0qual;\\u62b5p\\u0180DTV\\u1063\\u106e\\u1078ownVector;\\u694feeVector;\\u695cector\\u0100;B\\u1082\\u1083\\u61bear;\\u6954ector\\u0100;B\\u1091\\u1092\\u61c0ar;\\u6953\\u0100pu\\u109b\\u109ef;\\u611dndImplies;\\u6970ightarrow;\\u61db\\u0100ch\\u10b9\\u10bcr;\\u611b;\\u61b1leDelayed;\\u69f4\\u0680HOacfhimoqstu\\u10e4\\u10f1\\u10f7\\u10fd\\u1119\\u111e\\u1151\\u1156\\u1161\\u1167\\u11b5\\u11bb\\u11bf\\u0100Cc\\u10e9\\u10eeHcy;\\u4429y;\\u4428FTcy;\\u442ccute;\\u415a\\u0280;aeiy\\u1108\\u1109\\u110e\\u1113\\u1117\\u6abcron;\\u4160dil;\\u415erc;\\u415c;\\u4421r;\\uc000\\ud835\\udd16ort\\u0200DLRU\\u112a\\u1134\\u113e\\u1149ownArrow\\xbb\\u041eeftArrow\\xbb\\u089aightArrow\\xbb\\u0fddpArrow;\\u6191gma;\\u43a3allCircle;\\u6218pf;\\uc000\\ud835\\udd4a\\u0272\\u116d\\0\\0\\u1170t;\\u621aare\\u0200;ISU\\u117b\\u117c\\u1189\\u11af\\u65a1ntersection;\\u6293u\\u0100bp\\u118f\\u119eset\\u0100;E\\u1197\\u1198\\u628fqual;\\u6291erset\\u0100;E\\u11a8\\u11a9\\u6290qual;\\u6292nion;\\u6294cr;\\uc000\\ud835\\udcaear;\\u62c6\\u0200bcmp\\u11c8\\u11db\\u1209\\u120b\\u0100;s\\u11cd\\u11ce\\u62d0et\\u0100;E\\u11cd\\u11d5qual;\\u6286\\u0100ch\\u11e0\\u1205eeds\\u0200;EST\\u11ed\\u11ee\\u11f4\\u11ff\\u627bqual;\\u6ab0lantEqual;\\u627dilde;\\u627fTh\\xe1\\u0f8c;\\u6211\\u0180;es\\u1212\\u1213\\u1223\\u62d1rset\\u0100;E\\u121c\\u121d\\u6283qual;\\u6287et\\xbb\\u1213\\u0580HRSacfhiors\\u123e\\u1244\\u1249\\u1255\\u125e\\u1271\\u1276\\u129f\\u12c2\\u12c8\\u12d1ORN\\u803b\\xde\\u40deADE;\\u6122\\u0100Hc\\u124e\\u1252cy;\\u440by;\\u4426\\u0100bu\\u125a\\u125c;\\u4009;\\u43a4\\u0180aey\\u1265\\u126a\\u126fron;\\u4164dil;\\u4162;\\u4422r;\\uc000\\ud835\\udd17\\u0100ei\\u127b\\u1289\\u01f2\\u1280\\0\\u1287efore;\\u6234a;\\u4398\\u0100cn\\u128e\\u1298kSpace;\\uc000\\u205f\\u200aSpace;\\u6009lde\\u0200;EFT\\u12ab\\u12ac\\u12b2\\u12bc\\u623cqual;\\u6243ullEqual;\\u6245ilde;\\u6248pf;\\uc000\\ud835\\udd4bipleDot;\\u60db\\u0100ct\\u12d6\\u12dbr;\\uc000\\ud835\\udcafrok;\\u4166\\u0ae1\\u12f7\\u130e\\u131a\\u1326\\0\\u132c\\u1331\\0\\0\\0\\0\\0\\u1338\\u133d\\u1377\\u1385\\0\\u13ff\\u1404\\u140a\\u1410\\u0100cr\\u12fb\\u1301ute\\u803b\\xda\\u40dar\\u0100;o\\u1307\\u1308\\u619fcir;\\u6949r\\u01e3\\u1313\\0\\u1316y;\\u440eve;\\u416c\\u0100iy\\u131e\\u1323rc\\u803b\\xdb\\u40db;\\u4423blac;\\u4170r;\\uc000\\ud835\\udd18rave\\u803b\\xd9\\u40d9acr;\\u416a\\u0100di\\u1341\\u1369er\\u0100BP\\u1348\\u135d\\u0100ar\\u134d\\u1350r;\\u405fac\\u0100ek\\u1357\\u1359;\\u63dfet;\\u63b5arenthesis;\\u63ddon\\u0100;P\\u1370\\u1371\\u62c3lus;\\u628e\\u0100gp\\u137b\\u137fon;\\u4172f;\\uc000\\ud835\\udd4c\\u0400ADETadps\\u1395\\u13ae\\u13b8\\u13c4\\u03e8\\u13d2\\u13d7\\u13f3rrow\\u0180;BD\\u1150\\u13a0\\u13a4ar;\\u6912ownArrow;\\u61c5ownArrow;\\u6195quilibrium;\\u696eee\\u0100;A\\u13cb\\u13cc\\u62a5rrow;\\u61a5own\\xe1\\u03f3er\\u0100LR\\u13de\\u13e8eftArrow;\\u6196ightArrow;\\u6197i\\u0100;l\\u13f9\\u13fa\\u43d2on;\\u43a5ing;\\u416ecr;\\uc000\\ud835\\udcb0ilde;\\u4168ml\\u803b\\xdc\\u40dc\\u0480Dbcdefosv\\u1427\\u142c\\u1430\\u1433\\u143e\\u1485\\u148a\\u1490\\u1496ash;\\u62abar;\\u6aeby;\\u4412ash\\u0100;l\\u143b\\u143c\\u62a9;\\u6ae6\\u0100er\\u1443\\u1445;\\u62c1\\u0180bty\\u144c\\u1450\\u147aar;\\u6016\\u0100;i\\u144f\\u1455cal\\u0200BLST\\u1461\\u1465\\u146a\\u1474ar;\\u6223ine;\\u407ceparator;\\u6758ilde;\\u6240ThinSpace;\\u600ar;\\uc000\\ud835\\udd19pf;\\uc000\\ud835\\udd4dcr;\\uc000\\ud835\\udcb1dash;\\u62aa\\u0280cefos\\u14a7\\u14ac\\u14b1\\u14b6\\u14bcirc;\\u4174dge;\\u62c0r;\\uc000\\ud835\\udd1apf;\\uc000\\ud835\\udd4ecr;\\uc000\\ud835\\udcb2\\u0200fios\\u14cb\\u14d0\\u14d2\\u14d8r;\\uc000\\ud835\\udd1b;\\u439epf;\\uc000\\ud835\\udd4fcr;\\uc000\\ud835\\udcb3\\u0480AIUacfosu\\u14f1\\u14f5\\u14f9\\u14fd\\u1504\\u150f\\u1514\\u151a\\u1520cy;\\u442fcy;\\u4407cy;\\u442ecute\\u803b\\xdd\\u40dd\\u0100iy\\u1509\\u150drc;\\u4176;\\u442br;\\uc000\\ud835\\udd1cpf;\\uc000\\ud835\\udd50cr;\\uc000\\ud835\\udcb4ml;\\u4178\\u0400Hacdefos\\u1535\\u1539\\u153f\\u154b\\u154f\\u155d\\u1560\\u1564cy;\\u4416cute;\\u4179\\u0100ay\\u1544\\u1549ron;\\u417d;\\u4417ot;\\u417b\\u01f2\\u1554\\0\\u155boWidt\\xe8\\u0ad9a;\\u4396r;\\u6128pf;\\u6124cr;\\uc000\\ud835\\udcb5\\u0be1\\u1583\\u158a\\u1590\\0\\u15b0\\u15b6\\u15bf\\0\\0\\0\\0\\u15c6\\u15db\\u15eb\\u165f\\u166d\\0\\u1695\\u169b\\u16b2\\u16b9\\0\\u16becute\\u803b\\xe1\\u40e1reve;\\u4103\\u0300;Ediuy\\u159c\\u159d\\u15a1\\u15a3\\u15a8\\u15ad\\u623e;\\uc000\\u223e\\u0333;\\u623frc\\u803b\\xe2\\u40e2te\\u80bb\\xb4\\u0306;\\u4430lig\\u803b\\xe6\\u40e6\\u0100;r\\xb2\\u15ba;\\uc000\\ud835\\udd1erave\\u803b\\xe0\\u40e0\\u0100ep\\u15ca\\u15d6\\u0100fp\\u15cf\\u15d4sym;\\u6135\\xe8\\u15d3ha;\\u43b1\\u0100ap\\u15dfc\\u0100cl\\u15e4\\u15e7r;\\u4101g;\\u6a3f\\u0264\\u15f0\\0\\0\\u160a\\u0280;adsv\\u15fa\\u15fb\\u15ff\\u1601\\u1607\\u6227nd;\\u6a55;\\u6a5clope;\\u6a58;\\u6a5a\\u0380;elmrsz\\u1618\\u1619\\u161b\\u161e\\u163f\\u164f\\u1659\\u6220;\\u69a4e\\xbb\\u1619sd\\u0100;a\\u1625\\u1626\\u6221\\u0461\\u1630\\u1632\\u1634\\u1636\\u1638\\u163a\\u163c\\u163e;\\u69a8;\\u69a9;\\u69aa;\\u69ab;\\u69ac;\\u69ad;\\u69ae;\\u69aft\\u0100;v\\u1645\\u1646\\u621fb\\u0100;d\\u164c\\u164d\\u62be;\\u699d\\u0100pt\\u1654\\u1657h;\\u6222\\xbb\\xb9arr;\\u637c\\u0100gp\\u1663\\u1667on;\\u4105f;\\uc000\\ud835\\udd52\\u0380;Eaeiop\\u12c1\\u167b\\u167d\\u1682\\u1684\\u1687\\u168a;\\u6a70cir;\\u6a6f;\\u624ad;\\u624bs;\\u4027rox\\u0100;e\\u12c1\\u1692\\xf1\\u1683ing\\u803b\\xe5\\u40e5\\u0180cty\\u16a1\\u16a6\\u16a8r;\\uc000\\ud835\\udcb6;\\u402amp\\u0100;e\\u12c1\\u16af\\xf1\\u0288ilde\\u803b\\xe3\\u40e3ml\\u803b\\xe4\\u40e4\\u0100ci\\u16c2\\u16c8onin\\xf4\\u0272nt;\\u6a11\\u0800Nabcdefiklnoprsu\\u16ed\\u16f1\\u1730\\u173c\\u1743\\u1748\\u1778\\u177d\\u17e0\\u17e6\\u1839\\u1850\\u170d\\u193d\\u1948\\u1970ot;\\u6aed\\u0100cr\\u16f6\\u171ek\\u0200ceps\\u1700\\u1705\\u170d\\u1713ong;\\u624cpsilon;\\u43f6rime;\\u6035im\\u0100;e\\u171a\\u171b\\u623dq;\\u62cd\\u0176\\u1722\\u1726ee;\\u62bded\\u0100;g\\u172c\\u172d\\u6305e\\xbb\\u172drk\\u0100;t\\u135c\\u1737brk;\\u63b6\\u0100oy\\u1701\\u1741;\\u4431quo;\\u601e\\u0280cmprt\\u1753\\u175b\\u1761\\u1764\\u1768aus\\u0100;e\\u010a\\u0109ptyv;\\u69b0s\\xe9\\u170cno\\xf5\\u0113\\u0180ahw\\u176f\\u1771\\u1773;\\u43b2;\\u6136een;\\u626cr;\\uc000\\ud835\\udd1fg\\u0380costuvw\\u178d\\u179d\\u17b3\\u17c1\\u17d5\\u17db\\u17de\\u0180aiu\\u1794\\u1796\\u179a\\xf0\\u0760rc;\\u65efp\\xbb\\u1371\\u0180dpt\\u17a4\\u17a8\\u17adot;\\u6a00lus;\\u6a01imes;\\u6a02\\u0271\\u17b9\\0\\0\\u17becup;\\u6a06ar;\\u6605riangle\\u0100du\\u17cd\\u17d2own;\\u65bdp;\\u65b3plus;\\u6a04e\\xe5\\u1444\\xe5\\u14adarow;\\u690d\\u0180ako\\u17ed\\u1826\\u1835\\u0100cn\\u17f2\\u1823k\\u0180lst\\u17fa\\u05ab\\u1802ozenge;\\u69ebriangle\\u0200;dlr\\u1812\\u1813\\u1818\\u181d\\u65b4own;\\u65beeft;\\u65c2ight;\\u65b8k;\\u6423\\u01b1\\u182b\\0\\u1833\\u01b2\\u182f\\0\\u1831;\\u6592;\\u65914;\\u6593ck;\\u6588\\u0100eo\\u183e\\u184d\\u0100;q\\u1843\\u1846\\uc000=\\u20e5uiv;\\uc000\\u2261\\u20e5t;\\u6310\\u0200ptwx\\u1859\\u185e\\u1867\\u186cf;\\uc000\\ud835\\udd53\\u0100;t\\u13cb\\u1863om\\xbb\\u13cctie;\\u62c8\\u0600DHUVbdhmptuv\\u1885\\u1896\\u18aa\\u18bb\\u18d7\\u18db\\u18ec\\u18ff\\u1905\\u190a\\u1910\\u1921\\u0200LRlr\\u188e\\u1890\\u1892\\u1894;\\u6557;\\u6554;\\u6556;\\u6553\\u0280;DUdu\\u18a1\\u18a2\\u18a4\\u18a6\\u18a8\\u6550;\\u6566;\\u6569;\\u6564;\\u6567\\u0200LRlr\\u18b3\\u18b5\\u18b7\\u18b9;\\u655d;\\u655a;\\u655c;\\u6559\\u0380;HLRhlr\\u18ca\\u18cb\\u18cd\\u18cf\\u18d1\\u18d3\\u18d5\\u6551;\\u656c;\\u6563;\\u6560;\\u656b;\\u6562;\\u655fox;\\u69c9\\u0200LRlr\\u18e4\\u18e6\\u18e8\\u18ea;\\u6555;\\u6552;\\u6510;\\u650c\\u0280;DUdu\\u06bd\\u18f7\\u18f9\\u18fb\\u18fd;\\u6565;\\u6568;\\u652c;\\u6534inus;\\u629flus;\\u629eimes;\\u62a0\\u0200LRlr\\u1919\\u191b\\u191d\\u191f;\\u655b;\\u6558;\\u6518;\\u6514\\u0380;HLRhlr\\u1930\\u1931\\u1933\\u1935\\u1937\\u1939\\u193b\\u6502;\\u656a;\\u6561;\\u655e;\\u653c;\\u6524;\\u651c\\u0100ev\\u0123\\u1942bar\\u803b\\xa6\\u40a6\\u0200ceio\\u1951\\u1956\\u195a\\u1960r;\\uc000\\ud835\\udcb7mi;\\u604fm\\u0100;e\\u171a\\u171cl\\u0180;bh\\u1968\\u1969\\u196b\\u405c;\\u69c5sub;\\u67c8\\u016c\\u1974\\u197el\\u0100;e\\u1979\\u197a\\u6022t\\xbb\\u197ap\\u0180;Ee\\u012f\\u1985\\u1987;\\u6aae\\u0100;q\\u06dc\\u06db\\u0ce1\\u19a7\\0\\u19e8\\u1a11\\u1a15\\u1a32\\0\\u1a37\\u1a50\\0\\0\\u1ab4\\0\\0\\u1ac1\\0\\0\\u1b21\\u1b2e\\u1b4d\\u1b52\\0\\u1bfd\\0\\u1c0c\\u0180cpr\\u19ad\\u19b2\\u19ddute;\\u4107\\u0300;abcds\\u19bf\\u19c0\\u19c4\\u19ca\\u19d5\\u19d9\\u6229nd;\\u6a44rcup;\\u6a49\\u0100au\\u19cf\\u19d2p;\\u6a4bp;\\u6a47ot;\\u6a40;\\uc000\\u2229\\ufe00\\u0100eo\\u19e2\\u19e5t;\\u6041\\xee\\u0693\\u0200aeiu\\u19f0\\u19fb\\u1a01\\u1a05\\u01f0\\u19f5\\0\\u19f8s;\\u6a4don;\\u410ddil\\u803b\\xe7\\u40e7rc;\\u4109ps\\u0100;s\\u1a0c\\u1a0d\\u6a4cm;\\u6a50ot;\\u410b\\u0180dmn\\u1a1b\\u1a20\\u1a26il\\u80bb\\xb8\\u01adptyv;\\u69b2t\\u8100\\xa2;e\\u1a2d\\u1a2e\\u40a2r\\xe4\\u01b2r;\\uc000\\ud835\\udd20\\u0180cei\\u1a3d\\u1a40\\u1a4dy;\\u4447ck\\u0100;m\\u1a47\\u1a48\\u6713ark\\xbb\\u1a48;\\u43c7r\\u0380;Ecefms\\u1a5f\\u1a60\\u1a62\\u1a6b\\u1aa4\\u1aaa\\u1aae\\u65cb;\\u69c3\\u0180;el\\u1a69\\u1a6a\\u1a6d\\u42c6q;\\u6257e\\u0261\\u1a74\\0\\0\\u1a88rrow\\u0100lr\\u1a7c\\u1a81eft;\\u61baight;\\u61bb\\u0280RSacd\\u1a92\\u1a94\\u1a96\\u1a9a\\u1a9f\\xbb\\u0f47;\\u64c8st;\\u629birc;\\u629aash;\\u629dnint;\\u6a10id;\\u6aefcir;\\u69c2ubs\\u0100;u\\u1abb\\u1abc\\u6663it\\xbb\\u1abc\\u02ec\\u1ac7\\u1ad4\\u1afa\\0\\u1b0aon\\u0100;e\\u1acd\\u1ace\\u403a\\u0100;q\\xc7\\xc6\\u026d\\u1ad9\\0\\0\\u1ae2a\\u0100;t\\u1ade\\u1adf\\u402c;\\u4040\\u0180;fl\\u1ae8\\u1ae9\\u1aeb\\u6201\\xee\\u1160e\\u0100mx\\u1af1\\u1af6ent\\xbb\\u1ae9e\\xf3\\u024d\\u01e7\\u1afe\\0\\u1b07\\u0100;d\\u12bb\\u1b02ot;\\u6a6dn\\xf4\\u0246\\u0180fry\\u1b10\\u1b14\\u1b17;\\uc000\\ud835\\udd54o\\xe4\\u0254\\u8100\\xa9;s\\u0155\\u1b1dr;\\u6117\\u0100ao\\u1b25\\u1b29rr;\\u61b5ss;\\u6717\\u0100cu\\u1b32\\u1b37r;\\uc000\\ud835\\udcb8\\u0100bp\\u1b3c\\u1b44\\u0100;e\\u1b41\\u1b42\\u6acf;\\u6ad1\\u0100;e\\u1b49\\u1b4a\\u6ad0;\\u6ad2dot;\\u62ef\\u0380delprvw\\u1b60\\u1b6c\\u1b77\\u1b82\\u1bac\\u1bd4\\u1bf9arr\\u0100lr\\u1b68\\u1b6a;\\u6938;\\u6935\\u0270\\u1b72\\0\\0\\u1b75r;\\u62dec;\\u62dfarr\\u0100;p\\u1b7f\\u1b80\\u61b6;\\u693d\\u0300;bcdos\\u1b8f\\u1b90\\u1b96\\u1ba1\\u1ba5\\u1ba8\\u622arcap;\\u6a48\\u0100au\\u1b9b\\u1b9ep;\\u6a46p;\\u6a4aot;\\u628dr;\\u6a45;\\uc000\\u222a\\ufe00\\u0200alrv\\u1bb5\\u1bbf\\u1bde\\u1be3rr\\u0100;m\\u1bbc\\u1bbd\\u61b7;\\u693cy\\u0180evw\\u1bc7\\u1bd4\\u1bd8q\\u0270\\u1bce\\0\\0\\u1bd2re\\xe3\\u1b73u\\xe3\\u1b75ee;\\u62ceedge;\\u62cfen\\u803b\\xa4\\u40a4earrow\\u0100lr\\u1bee\\u1bf3eft\\xbb\\u1b80ight\\xbb\\u1bbde\\xe4\\u1bdd\\u0100ci\\u1c01\\u1c07onin\\xf4\\u01f7nt;\\u6231lcty;\\u632d\\u0980AHabcdefhijlorstuwz\\u1c38\\u1c3b\\u1c3f\\u1c5d\\u1c69\\u1c75\\u1c8a\\u1c9e\\u1cac\\u1cb7\\u1cfb\\u1cff\\u1d0d\\u1d7b\\u1d91\\u1dab\\u1dbb\\u1dc6\\u1dcdr\\xf2\\u0381ar;\\u6965\\u0200glrs\\u1c48\\u1c4d\\u1c52\\u1c54ger;\\u6020eth;\\u6138\\xf2\\u1133h\\u0100;v\\u1c5a\\u1c5b\\u6010\\xbb\\u090a\\u016b\\u1c61\\u1c67arow;\\u690fa\\xe3\\u0315\\u0100ay\\u1c6e\\u1c73ron;\\u410f;\\u4434\\u0180;ao\\u0332\\u1c7c\\u1c84\\u0100gr\\u02bf\\u1c81r;\\u61catseq;\\u6a77\\u0180glm\\u1c91\\u1c94\\u1c98\\u803b\\xb0\\u40b0ta;\\u43b4ptyv;\\u69b1\\u0100ir\\u1ca3\\u1ca8sht;\\u697f;\\uc000\\ud835\\udd21ar\\u0100lr\\u1cb3\\u1cb5\\xbb\\u08dc\\xbb\\u101e\\u0280aegsv\\u1cc2\\u0378\\u1cd6\\u1cdc\\u1ce0m\\u0180;os\\u0326\\u1cca\\u1cd4nd\\u0100;s\\u0326\\u1cd1uit;\\u6666amma;\\u43ddin;\\u62f2\\u0180;io\\u1ce7\\u1ce8\\u1cf8\\u40f7de\\u8100\\xf7;o\\u1ce7\\u1cf0ntimes;\\u62c7n\\xf8\\u1cf7cy;\\u4452c\\u026f\\u1d06\\0\\0\\u1d0arn;\\u631eop;\\u630d\\u0280lptuw\\u1d18\\u1d1d\\u1d22\\u1d49\\u1d55lar;\\u4024f;\\uc000\\ud835\\udd55\\u0280;emps\\u030b\\u1d2d\\u1d37\\u1d3d\\u1d42q\\u0100;d\\u0352\\u1d33ot;\\u6251inus;\\u6238lus;\\u6214quare;\\u62a1blebarwedg\\xe5\\xfan\\u0180adh\\u112e\\u1d5d\\u1d67ownarrow\\xf3\\u1c83arpoon\\u0100lr\\u1d72\\u1d76ef\\xf4\\u1cb4igh\\xf4\\u1cb6\\u0162\\u1d7f\\u1d85karo\\xf7\\u0f42\\u026f\\u1d8a\\0\\0\\u1d8ern;\\u631fop;\\u630c\\u0180cot\\u1d98\\u1da3\\u1da6\\u0100ry\\u1d9d\\u1da1;\\uc000\\ud835\\udcb9;\\u4455l;\\u69f6rok;\\u4111\\u0100dr\\u1db0\\u1db4ot;\\u62f1i\\u0100;f\\u1dba\\u1816\\u65bf\\u0100ah\\u1dc0\\u1dc3r\\xf2\\u0429a\\xf2\\u0fa6angle;\\u69a6\\u0100ci\\u1dd2\\u1dd5y;\\u445fgrarr;\\u67ff\\u0900Dacdefglmnopqrstux\\u1e01\\u1e09\\u1e19\\u1e38\\u0578\\u1e3c\\u1e49\\u1e61\\u1e7e\\u1ea5\\u1eaf\\u1ebd\\u1ee1\\u1f2a\\u1f37\\u1f44\\u1f4e\\u1f5a\\u0100Do\\u1e06\\u1d34o\\xf4\\u1c89\\u0100cs\\u1e0e\\u1e14ute\\u803b\\xe9\\u40e9ter;\\u6a6e\\u0200aioy\\u1e22\\u1e27\\u1e31\\u1e36ron;\\u411br\\u0100;c\\u1e2d\\u1e2e\\u6256\\u803b\\xea\\u40ealon;\\u6255;\\u444dot;\\u4117\\u0100Dr\\u1e41\\u1e45ot;\\u6252;\\uc000\\ud835\\udd22\\u0180;rs\\u1e50\\u1e51\\u1e57\\u6a9aave\\u803b\\xe8\\u40e8\\u0100;d\\u1e5c\\u1e5d\\u6a96ot;\\u6a98\\u0200;ils\\u1e6a\\u1e6b\\u1e72\\u1e74\\u6a99nters;\\u63e7;\\u6113\\u0100;d\\u1e79\\u1e7a\\u6a95ot;\\u6a97\\u0180aps\\u1e85\\u1e89\\u1e97cr;\\u4113ty\\u0180;sv\\u1e92\\u1e93\\u1e95\\u6205et\\xbb\\u1e93p\\u01001;\\u1e9d\\u1ea4\\u0133\\u1ea1\\u1ea3;\\u6004;\\u6005\\u6003\\u0100gs\\u1eaa\\u1eac;\\u414bp;\\u6002\\u0100gp\\u1eb4\\u1eb8on;\\u4119f;\\uc000\\ud835\\udd56\\u0180als\\u1ec4\\u1ece\\u1ed2r\\u0100;s\\u1eca\\u1ecb\\u62d5l;\\u69e3us;\\u6a71i\\u0180;lv\\u1eda\\u1edb\\u1edf\\u43b5on\\xbb\\u1edb;\\u43f5\\u0200csuv\\u1eea\\u1ef3\\u1f0b\\u1f23\\u0100io\\u1eef\\u1e31rc\\xbb\\u1e2e\\u0269\\u1ef9\\0\\0\\u1efb\\xed\\u0548ant\\u0100gl\\u1f02\\u1f06tr\\xbb\\u1e5dess\\xbb\\u1e7a\\u0180aei\\u1f12\\u1f16\\u1f1als;\\u403dst;\\u625fv\\u0100;D\\u0235\\u1f20D;\\u6a78parsl;\\u69e5\\u0100Da\\u1f2f\\u1f33ot;\\u6253rr;\\u6971\\u0180cdi\\u1f3e\\u1f41\\u1ef8r;\\u612fo\\xf4\\u0352\\u0100ah\\u1f49\\u1f4b;\\u43b7\\u803b\\xf0\\u40f0\\u0100mr\\u1f53\\u1f57l\\u803b\\xeb\\u40ebo;\\u60ac\\u0180cip\\u1f61\\u1f64\\u1f67l;\\u4021s\\xf4\\u056e\\u0100eo\\u1f6c\\u1f74ctatio\\xee\\u0559nential\\xe5\\u0579\\u09e1\\u1f92\\0\\u1f9e\\0\\u1fa1\\u1fa7\\0\\0\\u1fc6\\u1fcc\\0\\u1fd3\\0\\u1fe6\\u1fea\\u2000\\0\\u2008\\u205allingdotse\\xf1\\u1e44y;\\u4444male;\\u6640\\u0180ilr\\u1fad\\u1fb3\\u1fc1lig;\\u8000\\ufb03\\u0269\\u1fb9\\0\\0\\u1fbdg;\\u8000\\ufb00ig;\\u8000\\ufb04;\\uc000\\ud835\\udd23lig;\\u8000\\ufb01lig;\\uc000fj\\u0180alt\\u1fd9\\u1fdc\\u1fe1t;\\u666dig;\\u8000\\ufb02ns;\\u65b1of;\\u4192\\u01f0\\u1fee\\0\\u1ff3f;\\uc000\\ud835\\udd57\\u0100ak\\u05bf\\u1ff7\\u0100;v\\u1ffc\\u1ffd\\u62d4;\\u6ad9artint;\\u6a0d\\u0100ao\\u200c\\u2055\\u0100cs\\u2011\\u2052\\u03b1\\u201a\\u2030\\u2038\\u2045\\u2048\\0\\u2050\\u03b2\\u2022\\u2025\\u2027\\u202a\\u202c\\0\\u202e\\u803b\\xbd\\u40bd;\\u6153\\u803b\\xbc\\u40bc;\\u6155;\\u6159;\\u615b\\u01b3\\u2034\\0\\u2036;\\u6154;\\u6156\\u02b4\\u203e\\u2041\\0\\0\\u2043\\u803b\\xbe\\u40be;\\u6157;\\u615c5;\\u6158\\u01b6\\u204c\\0\\u204e;\\u615a;\\u615d8;\\u615el;\\u6044wn;\\u6322cr;\\uc000\\ud835\\udcbb\\u0880Eabcdefgijlnorstv\\u2082\\u2089\\u209f\\u20a5\\u20b0\\u20b4\\u20f0\\u20f5\\u20fa\\u20ff\\u2103\\u2112\\u2138\\u0317\\u213e\\u2152\\u219e\\u0100;l\\u064d\\u2087;\\u6a8c\\u0180cmp\\u2090\\u2095\\u209dute;\\u41f5ma\\u0100;d\\u209c\\u1cda\\u43b3;\\u6a86reve;\\u411f\\u0100iy\\u20aa\\u20aerc;\\u411d;\\u4433ot;\\u4121\\u0200;lqs\\u063e\\u0642\\u20bd\\u20c9\\u0180;qs\\u063e\\u064c\\u20c4lan\\xf4\\u0665\\u0200;cdl\\u0665\\u20d2\\u20d5\\u20e5c;\\u6aa9ot\\u0100;o\\u20dc\\u20dd\\u6a80\\u0100;l\\u20e2\\u20e3\\u6a82;\\u6a84\\u0100;e\\u20ea\\u20ed\\uc000\\u22db\\ufe00s;\\u6a94r;\\uc000\\ud835\\udd24\\u0100;g\\u0673\\u061bmel;\\u6137cy;\\u4453\\u0200;Eaj\\u065a\\u210c\\u210e\\u2110;\\u6a92;\\u6aa5;\\u6aa4\\u0200Eaes\\u211b\\u211d\\u2129\\u2134;\\u6269p\\u0100;p\\u2123\\u2124\\u6a8arox\\xbb\\u2124\\u0100;q\\u212e\\u212f\\u6a88\\u0100;q\\u212e\\u211bim;\\u62e7pf;\\uc000\\ud835\\udd58\\u0100ci\\u2143\\u2146r;\\u610am\\u0180;el\\u066b\\u214e\\u2150;\\u6a8e;\\u6a90\\u8300>;cdlqr\\u05ee\\u2160\\u216a\\u216e\\u2173\\u2179\\u0100ci\\u2165\\u2167;\\u6aa7r;\\u6a7aot;\\u62d7Par;\\u6995uest;\\u6a7c\\u0280adels\\u2184\\u216a\\u2190\\u0656\\u219b\\u01f0\\u2189\\0\\u218epro\\xf8\\u209er;\\u6978q\\u0100lq\\u063f\\u2196les\\xf3\\u2088i\\xed\\u066b\\u0100en\\u21a3\\u21adrtneqq;\\uc000\\u2269\\ufe00\\xc5\\u21aa\\u0500Aabcefkosy\\u21c4\\u21c7\\u21f1\\u21f5\\u21fa\\u2218\\u221d\\u222f\\u2268\\u227dr\\xf2\\u03a0\\u0200ilmr\\u21d0\\u21d4\\u21d7\\u21dbrs\\xf0\\u1484f\\xbb\\u2024il\\xf4\\u06a9\\u0100dr\\u21e0\\u21e4cy;\\u444a\\u0180;cw\\u08f4\\u21eb\\u21efir;\\u6948;\\u61adar;\\u610firc;\\u4125\\u0180alr\\u2201\\u220e\\u2213rts\\u0100;u\\u2209\\u220a\\u6665it\\xbb\\u220alip;\\u6026con;\\u62b9r;\\uc000\\ud835\\udd25s\\u0100ew\\u2223\\u2229arow;\\u6925arow;\\u6926\\u0280amopr\\u223a\\u223e\\u2243\\u225e\\u2263rr;\\u61fftht;\\u623bk\\u0100lr\\u2249\\u2253eftarrow;\\u61a9ightarrow;\\u61aaf;\\uc000\\ud835\\udd59bar;\\u6015\\u0180clt\\u226f\\u2274\\u2278r;\\uc000\\ud835\\udcbdas\\xe8\\u21f4rok;\\u4127\\u0100bp\\u2282\\u2287ull;\\u6043hen\\xbb\\u1c5b\\u0ae1\\u22a3\\0\\u22aa\\0\\u22b8\\u22c5\\u22ce\\0\\u22d5\\u22f3\\0\\0\\u22f8\\u2322\\u2367\\u2362\\u237f\\0\\u2386\\u23aa\\u23b4cute\\u803b\\xed\\u40ed\\u0180;iy\\u0771\\u22b0\\u22b5rc\\u803b\\xee\\u40ee;\\u4438\\u0100cx\\u22bc\\u22bfy;\\u4435cl\\u803b\\xa1\\u40a1\\u0100fr\\u039f\\u22c9;\\uc000\\ud835\\udd26rave\\u803b\\xec\\u40ec\\u0200;ino\\u073e\\u22dd\\u22e9\\u22ee\\u0100in\\u22e2\\u22e6nt;\\u6a0ct;\\u622dfin;\\u69dcta;\\u6129lig;\\u4133\\u0180aop\\u22fe\\u231a\\u231d\\u0180cgt\\u2305\\u2308\\u2317r;\\u412b\\u0180elp\\u071f\\u230f\\u2313in\\xe5\\u078ear\\xf4\\u0720h;\\u4131f;\\u62b7ed;\\u41b5\\u0280;cfot\\u04f4\\u232c\\u2331\\u233d\\u2341are;\\u6105in\\u0100;t\\u2338\\u2339\\u621eie;\\u69dddo\\xf4\\u2319\\u0280;celp\\u0757\\u234c\\u2350\\u235b\\u2361al;\\u62ba\\u0100gr\\u2355\\u2359er\\xf3\\u1563\\xe3\\u234darhk;\\u6a17rod;\\u6a3c\\u0200cgpt\\u236f\\u2372\\u2376\\u237by;\\u4451on;\\u412ff;\\uc000\\ud835\\udd5aa;\\u43b9uest\\u803b\\xbf\\u40bf\\u0100ci\\u238a\\u238fr;\\uc000\\ud835\\udcben\\u0280;Edsv\\u04f4\\u239b\\u239d\\u23a1\\u04f3;\\u62f9ot;\\u62f5\\u0100;v\\u23a6\\u23a7\\u62f4;\\u62f3\\u0100;i\\u0777\\u23aelde;\\u4129\\u01eb\\u23b8\\0\\u23bccy;\\u4456l\\u803b\\xef\\u40ef\\u0300cfmosu\\u23cc\\u23d7\\u23dc\\u23e1\\u23e7\\u23f5\\u0100iy\\u23d1\\u23d5rc;\\u4135;\\u4439r;\\uc000\\ud835\\udd27ath;\\u4237pf;\\uc000\\ud835\\udd5b\\u01e3\\u23ec\\0\\u23f1r;\\uc000\\ud835\\udcbfrcy;\\u4458kcy;\\u4454\\u0400acfghjos\\u240b\\u2416\\u2422\\u2427\\u242d\\u2431\\u2435\\u243bppa\\u0100;v\\u2413\\u2414\\u43ba;\\u43f0\\u0100ey\\u241b\\u2420dil;\\u4137;\\u443ar;\\uc000\\ud835\\udd28reen;\\u4138cy;\\u4445cy;\\u445cpf;\\uc000\\ud835\\udd5ccr;\\uc000\\ud835\\udcc0\\u0b80ABEHabcdefghjlmnoprstuv\\u2470\\u2481\\u2486\\u248d\\u2491\\u250e\\u253d\\u255a\\u2580\\u264e\\u265e\\u2665\\u2679\\u267d\\u269a\\u26b2\\u26d8\\u275d\\u2768\\u278b\\u27c0\\u2801\\u2812\\u0180art\\u2477\\u247a\\u247cr\\xf2\\u09c6\\xf2\\u0395ail;\\u691barr;\\u690e\\u0100;g\\u0994\\u248b;\\u6a8bar;\\u6962\\u0963\\u24a5\\0\\u24aa\\0\\u24b1\\0\\0\\0\\0\\0\\u24b5\\u24ba\\0\\u24c6\\u24c8\\u24cd\\0\\u24f9ute;\\u413amptyv;\\u69b4ra\\xee\\u084cbda;\\u43bbg\\u0180;dl\\u088e\\u24c1\\u24c3;\\u6991\\xe5\\u088e;\\u6a85uo\\u803b\\xab\\u40abr\\u0400;bfhlpst\\u0899\\u24de\\u24e6\\u24e9\\u24eb\\u24ee\\u24f1\\u24f5\\u0100;f\\u089d\\u24e3s;\\u691fs;\\u691d\\xeb\\u2252p;\\u61abl;\\u6939im;\\u6973l;\\u61a2\\u0180;ae\\u24ff\\u2500\\u2504\\u6aabil;\\u6919\\u0100;s\\u2509\\u250a\\u6aad;\\uc000\\u2aad\\ufe00\\u0180abr\\u2515\\u2519\\u251drr;\\u690crk;\\u6772\\u0100ak\\u2522\\u252cc\\u0100ek\\u2528\\u252a;\\u407b;\\u405b\\u0100es\\u2531\\u2533;\\u698bl\\u0100du\\u2539\\u253b;\\u698f;\\u698d\\u0200aeuy\\u2546\\u254b\\u2556\\u2558ron;\\u413e\\u0100di\\u2550\\u2554il;\\u413c\\xec\\u08b0\\xe2\\u2529;\\u443b\\u0200cqrs\\u2563\\u2566\\u256d\\u257da;\\u6936uo\\u0100;r\\u0e19\\u1746\\u0100du\\u2572\\u2577har;\\u6967shar;\\u694bh;\\u61b2\\u0280;fgqs\\u258b\\u258c\\u0989\\u25f3\\u25ff\\u6264t\\u0280ahlrt\\u2598\\u25a4\\u25b7\\u25c2\\u25e8rrow\\u0100;t\\u0899\\u25a1a\\xe9\\u24f6arpoon\\u0100du\\u25af\\u25b4own\\xbb\\u045ap\\xbb\\u0966eftarrows;\\u61c7ight\\u0180ahs\\u25cd\\u25d6\\u25derrow\\u0100;s\\u08f4\\u08a7arpoon\\xf3\\u0f98quigarro\\xf7\\u21f0hreetimes;\\u62cb\\u0180;qs\\u258b\\u0993\\u25falan\\xf4\\u09ac\\u0280;cdgs\\u09ac\\u260a\\u260d\\u261d\\u2628c;\\u6aa8ot\\u0100;o\\u2614\\u2615\\u6a7f\\u0100;r\\u261a\\u261b\\u6a81;\\u6a83\\u0100;e\\u2622\\u2625\\uc000\\u22da\\ufe00s;\\u6a93\\u0280adegs\\u2633\\u2639\\u263d\\u2649\\u264bppro\\xf8\\u24c6ot;\\u62d6q\\u0100gq\\u2643\\u2645\\xf4\\u0989gt\\xf2\\u248c\\xf4\\u099bi\\xed\\u09b2\\u0180ilr\\u2655\\u08e1\\u265asht;\\u697c;\\uc000\\ud835\\udd29\\u0100;E\\u099c\\u2663;\\u6a91\\u0161\\u2669\\u2676r\\u0100du\\u25b2\\u266e\\u0100;l\\u0965\\u2673;\\u696alk;\\u6584cy;\\u4459\\u0280;acht\\u0a48\\u2688\\u268b\\u2691\\u2696r\\xf2\\u25c1orne\\xf2\\u1d08ard;\\u696bri;\\u65fa\\u0100io\\u269f\\u26a4dot;\\u4140ust\\u0100;a\\u26ac\\u26ad\\u63b0che\\xbb\\u26ad\\u0200Eaes\\u26bb\\u26bd\\u26c9\\u26d4;\\u6268p\\u0100;p\\u26c3\\u26c4\\u6a89rox\\xbb\\u26c4\\u0100;q\\u26ce\\u26cf\\u6a87\\u0100;q\\u26ce\\u26bbim;\\u62e6\\u0400abnoptwz\\u26e9\\u26f4\\u26f7\\u271a\\u272f\\u2741\\u2747\\u2750\\u0100nr\\u26ee\\u26f1g;\\u67ecr;\\u61fdr\\xeb\\u08c1g\\u0180lmr\\u26ff\\u270d\\u2714eft\\u0100ar\\u09e6\\u2707ight\\xe1\\u09f2apsto;\\u67fcight\\xe1\\u09fdparrow\\u0100lr\\u2725\\u2729ef\\xf4\\u24edight;\\u61ac\\u0180afl\\u2736\\u2739\\u273dr;\\u6985;\\uc000\\ud835\\udd5dus;\\u6a2dimes;\\u6a34\\u0161\\u274b\\u274fst;\\u6217\\xe1\\u134e\\u0180;ef\\u2757\\u2758\\u1800\\u65cange\\xbb\\u2758ar\\u0100;l\\u2764\\u2765\\u4028t;\\u6993\\u0280achmt\\u2773\\u2776\\u277c\\u2785\\u2787r\\xf2\\u08a8orne\\xf2\\u1d8car\\u0100;d\\u0f98\\u2783;\\u696d;\\u600eri;\\u62bf\\u0300achiqt\\u2798\\u279d\\u0a40\\u27a2\\u27ae\\u27bbquo;\\u6039r;\\uc000\\ud835\\udcc1m\\u0180;eg\\u09b2\\u27aa\\u27ac;\\u6a8d;\\u6a8f\\u0100bu\\u252a\\u27b3o\\u0100;r\\u0e1f\\u27b9;\\u601arok;\\u4142\\u8400<;cdhilqr\\u082b\\u27d2\\u2639\\u27dc\\u27e0\\u27e5\\u27ea\\u27f0\\u0100ci\\u27d7\\u27d9;\\u6aa6r;\\u6a79re\\xe5\\u25f2mes;\\u62c9arr;\\u6976uest;\\u6a7b\\u0100Pi\\u27f5\\u27f9ar;\\u6996\\u0180;ef\\u2800\\u092d\\u181b\\u65c3r\\u0100du\\u2807\\u280dshar;\\u694ahar;\\u6966\\u0100en\\u2817\\u2821rtneqq;\\uc000\\u2268\\ufe00\\xc5\\u281e\\u0700Dacdefhilnopsu\\u2840\\u2845\\u2882\\u288e\\u2893\\u28a0\\u28a5\\u28a8\\u28da\\u28e2\\u28e4\\u0a83\\u28f3\\u2902Dot;\\u623a\\u0200clpr\\u284e\\u2852\\u2863\\u287dr\\u803b\\xaf\\u40af\\u0100et\\u2857\\u2859;\\u6642\\u0100;e\\u285e\\u285f\\u6720se\\xbb\\u285f\\u0100;s\\u103b\\u2868to\\u0200;dlu\\u103b\\u2873\\u2877\\u287bow\\xee\\u048cef\\xf4\\u090f\\xf0\\u13d1ker;\\u65ae\\u0100oy\\u2887\\u288cmma;\\u6a29;\\u443cash;\\u6014asuredangle\\xbb\\u1626r;\\uc000\\ud835\\udd2ao;\\u6127\\u0180cdn\\u28af\\u28b4\\u28c9ro\\u803b\\xb5\\u40b5\\u0200;acd\\u1464\\u28bd\\u28c0\\u28c4s\\xf4\\u16a7ir;\\u6af0ot\\u80bb\\xb7\\u01b5us\\u0180;bd\\u28d2\\u1903\\u28d3\\u6212\\u0100;u\\u1d3c\\u28d8;\\u6a2a\\u0163\\u28de\\u28e1p;\\u6adb\\xf2\\u2212\\xf0\\u0a81\\u0100dp\\u28e9\\u28eeels;\\u62a7f;\\uc000\\ud835\\udd5e\\u0100ct\\u28f8\\u28fdr;\\uc000\\ud835\\udcc2pos\\xbb\\u159d\\u0180;lm\\u2909\\u290a\\u290d\\u43bctimap;\\u62b8\\u0c00GLRVabcdefghijlmoprstuvw\\u2942\\u2953\\u297e\\u2989\\u2998\\u29da\\u29e9\\u2a15\\u2a1a\\u2a58\\u2a5d\\u2a83\\u2a95\\u2aa4\\u2aa8\\u2b04\\u2b07\\u2b44\\u2b7f\\u2bae\\u2c34\\u2c67\\u2c7c\\u2ce9\\u0100gt\\u2947\\u294b;\\uc000\\u22d9\\u0338\\u0100;v\\u2950\\u0bcf\\uc000\\u226b\\u20d2\\u0180elt\\u295a\\u2972\\u2976ft\\u0100ar\\u2961\\u2967rrow;\\u61cdightarrow;\\u61ce;\\uc000\\u22d8\\u0338\\u0100;v\\u297b\\u0c47\\uc000\\u226a\\u20d2ightarrow;\\u61cf\\u0100Dd\\u298e\\u2993ash;\\u62afash;\\u62ae\\u0280bcnpt\\u29a3\\u29a7\\u29ac\\u29b1\\u29ccla\\xbb\\u02deute;\\u4144g;\\uc000\\u2220\\u20d2\\u0280;Eiop\\u0d84\\u29bc\\u29c0\\u29c5\\u29c8;\\uc000\\u2a70\\u0338d;\\uc000\\u224b\\u0338s;\\u4149ro\\xf8\\u0d84ur\\u0100;a\\u29d3\\u29d4\\u666el\\u0100;s\\u29d3\\u0b38\\u01f3\\u29df\\0\\u29e3p\\u80bb\\xa0\\u0b37mp\\u0100;e\\u0bf9\\u0c00\\u0280aeouy\\u29f4\\u29fe\\u2a03\\u2a10\\u2a13\\u01f0\\u29f9\\0\\u29fb;\\u6a43on;\\u4148dil;\\u4146ng\\u0100;d\\u0d7e\\u2a0aot;\\uc000\\u2a6d\\u0338p;\\u6a42;\\u443dash;\\u6013\\u0380;Aadqsx\\u0b92\\u2a29\\u2a2d\\u2a3b\\u2a41\\u2a45\\u2a50rr;\\u61d7r\\u0100hr\\u2a33\\u2a36k;\\u6924\\u0100;o\\u13f2\\u13f0ot;\\uc000\\u2250\\u0338ui\\xf6\\u0b63\\u0100ei\\u2a4a\\u2a4ear;\\u6928\\xed\\u0b98ist\\u0100;s\\u0ba0\\u0b9fr;\\uc000\\ud835\\udd2b\\u0200Eest\\u0bc5\\u2a66\\u2a79\\u2a7c\\u0180;qs\\u0bbc\\u2a6d\\u0be1\\u0180;qs\\u0bbc\\u0bc5\\u2a74lan\\xf4\\u0be2i\\xed\\u0bea\\u0100;r\\u0bb6\\u2a81\\xbb\\u0bb7\\u0180Aap\\u2a8a\\u2a8d\\u2a91r\\xf2\\u2971rr;\\u61aear;\\u6af2\\u0180;sv\\u0f8d\\u2a9c\\u0f8c\\u0100;d\\u2aa1\\u2aa2\\u62fc;\\u62facy;\\u445a\\u0380AEadest\\u2ab7\\u2aba\\u2abe\\u2ac2\\u2ac5\\u2af6\\u2af9r\\xf2\\u2966;\\uc000\\u2266\\u0338rr;\\u619ar;\\u6025\\u0200;fqs\\u0c3b\\u2ace\\u2ae3\\u2aeft\\u0100ar\\u2ad4\\u2ad9rro\\xf7\\u2ac1ightarro\\xf7\\u2a90\\u0180;qs\\u0c3b\\u2aba\\u2aealan\\xf4\\u0c55\\u0100;s\\u0c55\\u2af4\\xbb\\u0c36i\\xed\\u0c5d\\u0100;r\\u0c35\\u2afei\\u0100;e\\u0c1a\\u0c25i\\xe4\\u0d90\\u0100pt\\u2b0c\\u2b11f;\\uc000\\ud835\\udd5f\\u8180\\xac;in\\u2b19\\u2b1a\\u2b36\\u40acn\\u0200;Edv\\u0b89\\u2b24\\u2b28\\u2b2e;\\uc000\\u22f9\\u0338ot;\\uc000\\u22f5\\u0338\\u01e1\\u0b89\\u2b33\\u2b35;\\u62f7;\\u62f6i\\u0100;v\\u0cb8\\u2b3c\\u01e1\\u0cb8\\u2b41\\u2b43;\\u62fe;\\u62fd\\u0180aor\\u2b4b\\u2b63\\u2b69r\\u0200;ast\\u0b7b\\u2b55\\u2b5a\\u2b5flle\\xec\\u0b7bl;\\uc000\\u2afd\\u20e5;\\uc000\\u2202\\u0338lint;\\u6a14\\u0180;ce\\u0c92\\u2b70\\u2b73u\\xe5\\u0ca5\\u0100;c\\u0c98\\u2b78\\u0100;e\\u0c92\\u2b7d\\xf1\\u0c98\\u0200Aait\\u2b88\\u2b8b\\u2b9d\\u2ba7r\\xf2\\u2988rr\\u0180;cw\\u2b94\\u2b95\\u2b99\\u619b;\\uc000\\u2933\\u0338;\\uc000\\u219d\\u0338ghtarrow\\xbb\\u2b95ri\\u0100;e\\u0ccb\\u0cd6\\u0380chimpqu\\u2bbd\\u2bcd\\u2bd9\\u2b04\\u0b78\\u2be4\\u2bef\\u0200;cer\\u0d32\\u2bc6\\u0d37\\u2bc9u\\xe5\\u0d45;\\uc000\\ud835\\udcc3ort\\u026d\\u2b05\\0\\0\\u2bd6ar\\xe1\\u2b56m\\u0100;e\\u0d6e\\u2bdf\\u0100;q\\u0d74\\u0d73su\\u0100bp\\u2beb\\u2bed\\xe5\\u0cf8\\xe5\\u0d0b\\u0180bcp\\u2bf6\\u2c11\\u2c19\\u0200;Ees\\u2bff\\u2c00\\u0d22\\u2c04\\u6284;\\uc000\\u2ac5\\u0338et\\u0100;e\\u0d1b\\u2c0bq\\u0100;q\\u0d23\\u2c00c\\u0100;e\\u0d32\\u2c17\\xf1\\u0d38\\u0200;Ees\\u2c22\\u2c23\\u0d5f\\u2c27\\u6285;\\uc000\\u2ac6\\u0338et\\u0100;e\\u0d58\\u2c2eq\\u0100;q\\u0d60\\u2c23\\u0200gilr\\u2c3d\\u2c3f\\u2c45\\u2c47\\xec\\u0bd7lde\\u803b\\xf1\\u40f1\\xe7\\u0c43iangle\\u0100lr\\u2c52\\u2c5ceft\\u0100;e\\u0c1a\\u2c5a\\xf1\\u0c26ight\\u0100;e\\u0ccb\\u2c65\\xf1\\u0cd7\\u0100;m\\u2c6c\\u2c6d\\u43bd\\u0180;es\\u2c74\\u2c75\\u2c79\\u4023ro;\\u6116p;\\u6007\\u0480DHadgilrs\\u2c8f\\u2c94\\u2c99\\u2c9e\\u2ca3\\u2cb0\\u2cb6\\u2cd3\\u2ce3ash;\\u62adarr;\\u6904p;\\uc000\\u224d\\u20d2ash;\\u62ac\\u0100et\\u2ca8\\u2cac;\\uc000\\u2265\\u20d2;\\uc000>\\u20d2nfin;\\u69de\\u0180Aet\\u2cbd\\u2cc1\\u2cc5rr;\\u6902;\\uc000\\u2264\\u20d2\\u0100;r\\u2cca\\u2ccd\\uc000<\\u20d2ie;\\uc000\\u22b4\\u20d2\\u0100At\\u2cd8\\u2cdcrr;\\u6903rie;\\uc000\\u22b5\\u20d2im;\\uc000\\u223c\\u20d2\\u0180Aan\\u2cf0\\u2cf4\\u2d02rr;\\u61d6r\\u0100hr\\u2cfa\\u2cfdk;\\u6923\\u0100;o\\u13e7\\u13e5ear;\\u6927\\u1253\\u1a95\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\0\\u2d2d\\0\\u2d38\\u2d48\\u2d60\\u2d65\\u2d72\\u2d84\\u1b07\\0\\0\\u2d8d\\u2dab\\0\\u2dc8\\u2dce\\0\\u2ddc\\u2e19\\u2e2b\\u2e3e\\u2e43\\u0100cs\\u2d31\\u1a97ute\\u803b\\xf3\\u40f3\\u0100iy\\u2d3c\\u2d45r\\u0100;c\\u1a9e\\u2d42\\u803b\\xf4\\u40f4;\\u443e\\u0280abios\\u1aa0\\u2d52\\u2d57\\u01c8\\u2d5alac;\\u4151v;\\u6a38old;\\u69bclig;\\u4153\\u0100cr\\u2d69\\u2d6dir;\\u69bf;\\uc000\\ud835\\udd2c\\u036f\\u2d79\\0\\0\\u2d7c\\0\\u2d82n;\\u42dbave\\u803b\\xf2\\u40f2;\\u69c1\\u0100bm\\u2d88\\u0df4ar;\\u69b5\\u0200acit\\u2d95\\u2d98\\u2da5\\u2da8r\\xf2\\u1a80\\u0100ir\\u2d9d\\u2da0r;\\u69beoss;\\u69bbn\\xe5\\u0e52;\\u69c0\\u0180aei\\u2db1\\u2db5\\u2db9cr;\\u414dga;\\u43c9\\u0180cdn\\u2dc0\\u2dc5\\u01cdron;\\u43bf;\\u69b6pf;\\uc000\\ud835\\udd60\\u0180ael\\u2dd4\\u2dd7\\u01d2r;\\u69b7rp;\\u69b9\\u0380;adiosv\\u2dea\\u2deb\\u2dee\\u2e08\\u2e0d\\u2e10\\u2e16\\u6228r\\xf2\\u1a86\\u0200;efm\\u2df7\\u2df8\\u2e02\\u2e05\\u6a5dr\\u0100;o\\u2dfe\\u2dff\\u6134f\\xbb\\u2dff\\u803b\\xaa\\u40aa\\u803b\\xba\\u40bagof;\\u62b6r;\\u6a56lope;\\u6a57;\\u6a5b\\u0180clo\\u2e1f\\u2e21\\u2e27\\xf2\\u2e01ash\\u803b\\xf8\\u40f8l;\\u6298i\\u016c\\u2e2f\\u2e34de\\u803b\\xf5\\u40f5es\\u0100;a\\u01db\\u2e3as;\\u6a36ml\\u803b\\xf6\\u40f6bar;\\u633d\\u0ae1\\u2e5e\\0\\u2e7d\\0\\u2e80\\u2e9d\\0\\u2ea2\\u2eb9\\0\\0\\u2ecb\\u0e9c\\0\\u2f13\\0\\0\\u2f2b\\u2fbc\\0\\u2fc8r\\u0200;ast\\u0403\\u2e67\\u2e72\\u0e85\\u8100\\xb6;l\\u2e6d\\u2e6e\\u40b6le\\xec\\u0403\\u0269\\u2e78\\0\\0\\u2e7bm;\\u6af3;\\u6afdy;\\u443fr\\u0280cimpt\\u2e8b\\u2e8f\\u2e93\\u1865\\u2e97nt;\\u4025od;\\u402eil;\\u6030enk;\\u6031r;\\uc000\\ud835\\udd2d\\u0180imo\\u2ea8\\u2eb0\\u2eb4\\u0100;v\\u2ead\\u2eae\\u43c6;\\u43d5ma\\xf4\\u0a76ne;\\u660e\\u0180;tv\\u2ebf\\u2ec0\\u2ec8\\u43c0chfork\\xbb\\u1ffd;\\u43d6\\u0100au\\u2ecf\\u2edfn\\u0100ck\\u2ed5\\u2eddk\\u0100;h\\u21f4\\u2edb;\\u610e\\xf6\\u21f4s\\u0480;abcdemst\\u2ef3\\u2ef4\\u1908\\u2ef9\\u2efd\\u2f04\\u2f06\\u2f0a\\u2f0e\\u402bcir;\\u6a23ir;\\u6a22\\u0100ou\\u1d40\\u2f02;\\u6a25;\\u6a72n\\u80bb\\xb1\\u0e9dim;\\u6a26wo;\\u6a27\\u0180ipu\\u2f19\\u2f20\\u2f25ntint;\\u6a15f;\\uc000\\ud835\\udd61nd\\u803b\\xa3\\u40a3\\u0500;Eaceinosu\\u0ec8\\u2f3f\\u2f41\\u2f44\\u2f47\\u2f81\\u2f89\\u2f92\\u2f7e\\u2fb6;\\u6ab3p;\\u6ab7u\\xe5\\u0ed9\\u0100;c\\u0ece\\u2f4c\\u0300;acens\\u0ec8\\u2f59\\u2f5f\\u2f66\\u2f68\\u2f7eppro\\xf8\\u2f43urlye\\xf1\\u0ed9\\xf1\\u0ece\\u0180aes\\u2f6f\\u2f76\\u2f7approx;\\u6ab9qq;\\u6ab5im;\\u62e8i\\xed\\u0edfme\\u0100;s\\u2f88\\u0eae\\u6032\\u0180Eas\\u2f78\\u2f90\\u2f7a\\xf0\\u2f75\\u0180dfp\\u0eec\\u2f99\\u2faf\\u0180als\\u2fa0\\u2fa5\\u2faalar;\\u632eine;\\u6312urf;\\u6313\\u0100;t\\u0efb\\u2fb4\\xef\\u0efbrel;\\u62b0\\u0100ci\\u2fc0\\u2fc5r;\\uc000\\ud835\\udcc5;\\u43c8ncsp;\\u6008\\u0300fiopsu\\u2fda\\u22e2\\u2fdf\\u2fe5\\u2feb\\u2ff1r;\\uc000\\ud835\\udd2epf;\\uc000\\ud835\\udd62rime;\\u6057cr;\\uc000\\ud835\\udcc6\\u0180aeo\\u2ff8\\u3009\\u3013t\\u0100ei\\u2ffe\\u3005rnion\\xf3\\u06b0nt;\\u6a16st\\u0100;e\\u3010\\u3011\\u403f\\xf1\\u1f19\\xf4\\u0f14\\u0a80ABHabcdefhilmnoprstux\\u3040\\u3051\\u3055\\u3059\\u30e0\\u310e\\u312b\\u3147\\u3162\\u3172\\u318e\\u3206\\u3215\\u3224\\u3229\\u3258\\u326e\\u3272\\u3290\\u32b0\\u32b7\\u0180art\\u3047\\u304a\\u304cr\\xf2\\u10b3\\xf2\\u03ddail;\\u691car\\xf2\\u1c65ar;\\u6964\\u0380cdenqrt\\u3068\\u3075\\u3078\\u307f\\u308f\\u3094\\u30cc\\u0100eu\\u306d\\u3071;\\uc000\\u223d\\u0331te;\\u4155i\\xe3\\u116emptyv;\\u69b3g\\u0200;del\\u0fd1\\u3089\\u308b\\u308d;\\u6992;\\u69a5\\xe5\\u0fd1uo\\u803b\\xbb\\u40bbr\\u0580;abcfhlpstw\\u0fdc\\u30ac\\u30af\\u30b7\\u30b9\\u30bc\\u30be\\u30c0\\u30c3\\u30c7\\u30cap;\\u6975\\u0100;f\\u0fe0\\u30b4s;\\u6920;\\u6933s;\\u691e\\xeb\\u225d\\xf0\\u272el;\\u6945im;\\u6974l;\\u61a3;\\u619d\\u0100ai\\u30d1\\u30d5il;\\u691ao\\u0100;n\\u30db\\u30dc\\u6236al\\xf3\\u0f1e\\u0180abr\\u30e7\\u30ea\\u30eer\\xf2\\u17e5rk;\\u6773\\u0100ak\\u30f3\\u30fdc\\u0100ek\\u30f9\\u30fb;\\u407d;\\u405d\\u0100es\\u3102\\u3104;\\u698cl\\u0100du\\u310a\\u310c;\\u698e;\\u6990\\u0200aeuy\\u3117\\u311c\\u3127\\u3129ron;\\u4159\\u0100di\\u3121\\u3125il;\\u4157\\xec\\u0ff2\\xe2\\u30fa;\\u4440\\u0200clqs\\u3134\\u3137\\u313d\\u3144a;\\u6937dhar;\\u6969uo\\u0100;r\\u020e\\u020dh;\\u61b3\\u0180acg\\u314e\\u315f\\u0f44l\\u0200;ips\\u0f78\\u3158\\u315b\\u109cn\\xe5\\u10bbar\\xf4\\u0fa9t;\\u65ad\\u0180ilr\\u3169\\u1023\\u316esht;\\u697d;\\uc000\\ud835\\udd2f\\u0100ao\\u3177\\u3186r\\u0100du\\u317d\\u317f\\xbb\\u047b\\u0100;l\\u1091\\u3184;\\u696c\\u0100;v\\u318b\\u318c\\u43c1;\\u43f1\\u0180gns\\u3195\\u31f9\\u31fcht\\u0300ahlrst\\u31a4\\u31b0\\u31c2\\u31d8\\u31e4\\u31eerrow\\u0100;t\\u0fdc\\u31ada\\xe9\\u30c8arpoon\\u0100du\\u31bb\\u31bfow\\xee\\u317ep\\xbb\\u1092eft\\u0100ah\\u31ca\\u31d0rrow\\xf3\\u0feaarpoon\\xf3\\u0551ightarrows;\\u61c9quigarro\\xf7\\u30cbhreetimes;\\u62ccg;\\u42daingdotse\\xf1\\u1f32\\u0180ahm\\u320d\\u3210\\u3213r\\xf2\\u0feaa\\xf2\\u0551;\\u600foust\\u0100;a\\u321e\\u321f\\u63b1che\\xbb\\u321fmid;\\u6aee\\u0200abpt\\u3232\\u323d\\u3240\\u3252\\u0100nr\\u3237\\u323ag;\\u67edr;\\u61fer\\xeb\\u1003\\u0180afl\\u3247\\u324a\\u324er;\\u6986;\\uc000\\ud835\\udd63us;\\u6a2eimes;\\u6a35\\u0100ap\\u325d\\u3267r\\u0100;g\\u3263\\u3264\\u4029t;\\u6994olint;\\u6a12ar\\xf2\\u31e3\\u0200achq\\u327b\\u3280\\u10bc\\u3285quo;\\u603ar;\\uc000\\ud835\\udcc7\\u0100bu\\u30fb\\u328ao\\u0100;r\\u0214\\u0213\\u0180hir\\u3297\\u329b\\u32a0re\\xe5\\u31f8mes;\\u62cai\\u0200;efl\\u32aa\\u1059\\u1821\\u32ab\\u65b9tri;\\u69celuhar;\\u6968;\\u611e\\u0d61\\u32d5\\u32db\\u32df\\u332c\\u3338\\u3371\\0\\u337a\\u33a4\\0\\0\\u33ec\\u33f0\\0\\u3428\\u3448\\u345a\\u34ad\\u34b1\\u34ca\\u34f1\\0\\u3616\\0\\0\\u3633cute;\\u415bqu\\xef\\u27ba\\u0500;Eaceinpsy\\u11ed\\u32f3\\u32f5\\u32ff\\u3302\\u330b\\u330f\\u331f\\u3326\\u3329;\\u6ab4\\u01f0\\u32fa\\0\\u32fc;\\u6ab8on;\\u4161u\\xe5\\u11fe\\u0100;d\\u11f3\\u3307il;\\u415frc;\\u415d\\u0180Eas\\u3316\\u3318\\u331b;\\u6ab6p;\\u6abaim;\\u62e9olint;\\u6a13i\\xed\\u1204;\\u4441ot\\u0180;be\\u3334\\u1d47\\u3335\\u62c5;\\u6a66\\u0380Aacmstx\\u3346\\u334a\\u3357\\u335b\\u335e\\u3363\\u336drr;\\u61d8r\\u0100hr\\u3350\\u3352\\xeb\\u2228\\u0100;o\\u0a36\\u0a34t\\u803b\\xa7\\u40a7i;\\u403bwar;\\u6929m\\u0100in\\u3369\\xf0nu\\xf3\\xf1t;\\u6736r\\u0100;o\\u3376\\u2055\\uc000\\ud835\\udd30\\u0200acoy\\u3382\\u3386\\u3391\\u33a0rp;\\u666f\\u0100hy\\u338b\\u338fcy;\\u4449;\\u4448rt\\u026d\\u3399\\0\\0\\u339ci\\xe4\\u1464ara\\xec\\u2e6f\\u803b\\xad\\u40ad\\u0100gm\\u33a8\\u33b4ma\\u0180;fv\\u33b1\\u33b2\\u33b2\\u43c3;\\u43c2\\u0400;deglnpr\\u12ab\\u33c5\\u33c9\\u33ce\\u33d6\\u33de\\u33e1\\u33e6ot;\\u6a6a\\u0100;q\\u12b1\\u12b0\\u0100;E\\u33d3\\u33d4\\u6a9e;\\u6aa0\\u0100;E\\u33db\\u33dc\\u6a9d;\\u6a9fe;\\u6246lus;\\u6a24arr;\\u6972ar\\xf2\\u113d\\u0200aeit\\u33f8\\u3408\\u340f\\u3417\\u0100ls\\u33fd\\u3404lsetm\\xe9\\u336ahp;\\u6a33parsl;\\u69e4\\u0100dl\\u1463\\u3414e;\\u6323\\u0100;e\\u341c\\u341d\\u6aaa\\u0100;s\\u3422\\u3423\\u6aac;\\uc000\\u2aac\\ufe00\\u0180flp\\u342e\\u3433\\u3442tcy;\\u444c\\u0100;b\\u3438\\u3439\\u402f\\u0100;a\\u343e\\u343f\\u69c4r;\\u633ff;\\uc000\\ud835\\udd64a\\u0100dr\\u344d\\u0402es\\u0100;u\\u3454\\u3455\\u6660it\\xbb\\u3455\\u0180csu\\u3460\\u3479\\u349f\\u0100au\\u3465\\u346fp\\u0100;s\\u1188\\u346b;\\uc000\\u2293\\ufe00p\\u0100;s\\u11b4\\u3475;\\uc000\\u2294\\ufe00u\\u0100bp\\u347f\\u348f\\u0180;es\\u1197\\u119c\\u3486et\\u0100;e\\u1197\\u348d\\xf1\\u119d\\u0180;es\\u11a8\\u11ad\\u3496et\\u0100;e\\u11a8\\u349d\\xf1\\u11ae\\u0180;af\\u117b\\u34a6\\u05b0r\\u0165\\u34ab\\u05b1\\xbb\\u117car\\xf2\\u1148\\u0200cemt\\u34b9\\u34be\\u34c2\\u34c5r;\\uc000\\ud835\\udcc8tm\\xee\\xf1i\\xec\\u3415ar\\xe6\\u11be\\u0100ar\\u34ce\\u34d5r\\u0100;f\\u34d4\\u17bf\\u6606\\u0100an\\u34da\\u34edight\\u0100ep\\u34e3\\u34eapsilo\\xee\\u1ee0h\\xe9\\u2eafs\\xbb\\u2852\\u0280bcmnp\\u34fb\\u355e\\u1209\\u358b\\u358e\\u0480;Edemnprs\\u350e\\u350f\\u3511\\u3515\\u351e\\u3523\\u352c\\u3531\\u3536\\u6282;\\u6ac5ot;\\u6abd\\u0100;d\\u11da\\u351aot;\\u6ac3ult;\\u6ac1\\u0100Ee\\u3528\\u352a;\\u6acb;\\u628alus;\\u6abfarr;\\u6979\\u0180eiu\\u353d\\u3552\\u3555t\\u0180;en\\u350e\\u3545\\u354bq\\u0100;q\\u11da\\u350feq\\u0100;q\\u352b\\u3528m;\\u6ac7\\u0100bp\\u355a\\u355c;\\u6ad5;\\u6ad3c\\u0300;acens\\u11ed\\u356c\\u3572\\u3579\\u357b\\u3326ppro\\xf8\\u32faurlye\\xf1\\u11fe\\xf1\\u11f3\\u0180aes\\u3582\\u3588\\u331bppro\\xf8\\u331aq\\xf1\\u3317g;\\u666a\\u0680123;Edehlmnps\\u35a9\\u35ac\\u35af\\u121c\\u35b2\\u35b4\\u35c0\\u35c9\\u35d5\\u35da\\u35df\\u35e8\\u35ed\\u803b\\xb9\\u40b9\\u803b\\xb2\\u40b2\\u803b\\xb3\\u40b3;\\u6ac6\\u0100os\\u35b9\\u35bct;\\u6abeub;\\u6ad8\\u0100;d\\u1222\\u35c5ot;\\u6ac4s\\u0100ou\\u35cf\\u35d2l;\\u67c9b;\\u6ad7arr;\\u697bult;\\u6ac2\\u0100Ee\\u35e4\\u35e6;\\u6acc;\\u628blus;\\u6ac0\\u0180eiu\\u35f4\\u3609\\u360ct\\u0180;en\\u121c\\u35fc\\u3602q\\u0100;q\\u1222\\u35b2eq\\u0100;q\\u35e7\\u35e4m;\\u6ac8\\u0100bp\\u3611\\u3613;\\u6ad4;\\u6ad6\\u0180Aan\\u361c\\u3620\\u362drr;\\u61d9r\\u0100hr\\u3626\\u3628\\xeb\\u222e\\u0100;o\\u0a2b\\u0a29war;\\u692alig\\u803b\\xdf\\u40df\\u0be1\\u3651\\u365d\\u3660\\u12ce\\u3673\\u3679\\0\\u367e\\u36c2\\0\\0\\0\\0\\0\\u36db\\u3703\\0\\u3709\\u376c\\0\\0\\0\\u3787\\u0272\\u3656\\0\\0\\u365bget;\\u6316;\\u43c4r\\xeb\\u0e5f\\u0180aey\\u3666\\u366b\\u3670ron;\\u4165dil;\\u4163;\\u4442lrec;\\u6315r;\\uc000\\ud835\\udd31\\u0200eiko\\u3686\\u369d\\u36b5\\u36bc\\u01f2\\u368b\\0\\u3691e\\u01004f\\u1284\\u1281a\\u0180;sv\\u3698\\u3699\\u369b\\u43b8ym;\\u43d1\\u0100cn\\u36a2\\u36b2k\\u0100as\\u36a8\\u36aeppro\\xf8\\u12c1im\\xbb\\u12acs\\xf0\\u129e\\u0100as\\u36ba\\u36ae\\xf0\\u12c1rn\\u803b\\xfe\\u40fe\\u01ec\\u031f\\u36c6\\u22e7es\\u8180\\xd7;bd\\u36cf\\u36d0\\u36d8\\u40d7\\u0100;a\\u190f\\u36d5r;\\u6a31;\\u6a30\\u0180eps\\u36e1\\u36e3\\u3700\\xe1\\u2a4d\\u0200;bcf\\u0486\\u36ec\\u36f0\\u36f4ot;\\u6336ir;\\u6af1\\u0100;o\\u36f9\\u36fc\\uc000\\ud835\\udd65rk;\\u6ada\\xe1\\u3362rime;\\u6034\\u0180aip\\u370f\\u3712\\u3764d\\xe5\\u1248\\u0380adempst\\u3721\\u374d\\u3740\\u3751\\u3757\\u375c\\u375fngle\\u0280;dlqr\\u3730\\u3731\\u3736\\u3740\\u3742\\u65b5own\\xbb\\u1dbbeft\\u0100;e\\u2800\\u373e\\xf1\\u092e;\\u625cight\\u0100;e\\u32aa\\u374b\\xf1\\u105aot;\\u65ecinus;\\u6a3alus;\\u6a39b;\\u69cdime;\\u6a3bezium;\\u63e2\\u0180cht\\u3772\\u377d\\u3781\\u0100ry\\u3777\\u377b;\\uc000\\ud835\\udcc9;\\u4446cy;\\u445brok;\\u4167\\u0100io\\u378b\\u378ex\\xf4\\u1777head\\u0100lr\\u3797\\u37a0eftarro\\xf7\\u084fightarrow\\xbb\\u0f5d\\u0900AHabcdfghlmoprstuw\\u37d0\\u37d3\\u37d7\\u37e4\\u37f0\\u37fc\\u380e\\u381c\\u3823\\u3834\\u3851\\u385d\\u386b\\u38a9\\u38cc\\u38d2\\u38ea\\u38f6r\\xf2\\u03edar;\\u6963\\u0100cr\\u37dc\\u37e2ute\\u803b\\xfa\\u40fa\\xf2\\u1150r\\u01e3\\u37ea\\0\\u37edy;\\u445eve;\\u416d\\u0100iy\\u37f5\\u37farc\\u803b\\xfb\\u40fb;\\u4443\\u0180abh\\u3803\\u3806\\u380br\\xf2\\u13adlac;\\u4171a\\xf2\\u13c3\\u0100ir\\u3813\\u3818sht;\\u697e;\\uc000\\ud835\\udd32rave\\u803b\\xf9\\u40f9\\u0161\\u3827\\u3831r\\u0100lr\\u382c\\u382e\\xbb\\u0957\\xbb\\u1083lk;\\u6580\\u0100ct\\u3839\\u384d\\u026f\\u383f\\0\\0\\u384arn\\u0100;e\\u3845\\u3846\\u631cr\\xbb\\u3846op;\\u630fri;\\u65f8\\u0100al\\u3856\\u385acr;\\u416b\\u80bb\\xa8\\u0349\\u0100gp\\u3862\\u3866on;\\u4173f;\\uc000\\ud835\\udd66\\u0300adhlsu\\u114b\\u3878\\u387d\\u1372\\u3891\\u38a0own\\xe1\\u13b3arpoon\\u0100lr\\u3888\\u388cef\\xf4\\u382digh\\xf4\\u382fi\\u0180;hl\\u3899\\u389a\\u389c\\u43c5\\xbb\\u13faon\\xbb\\u389aparrows;\\u61c8\\u0180cit\\u38b0\\u38c4\\u38c8\\u026f\\u38b6\\0\\0\\u38c1rn\\u0100;e\\u38bc\\u38bd\\u631dr\\xbb\\u38bdop;\\u630eng;\\u416fri;\\u65f9cr;\\uc000\\ud835\\udcca\\u0180dir\\u38d9\\u38dd\\u38e2ot;\\u62f0lde;\\u4169i\\u0100;f\\u3730\\u38e8\\xbb\\u1813\\u0100am\\u38ef\\u38f2r\\xf2\\u38a8l\\u803b\\xfc\\u40fcangle;\\u69a7\\u0780ABDacdeflnoprsz\\u391c\\u391f\\u3929\\u392d\\u39b5\\u39b8\\u39bd\\u39df\\u39e4\\u39e8\\u39f3\\u39f9\\u39fd\\u3a01\\u3a20r\\xf2\\u03f7ar\\u0100;v\\u3926\\u3927\\u6ae8;\\u6ae9as\\xe8\\u03e1\\u0100nr\\u3932\\u3937grt;\\u699c\\u0380eknprst\\u34e3\\u3946\\u394b\\u3952\\u395d\\u3964\\u3996app\\xe1\\u2415othin\\xe7\\u1e96\\u0180hir\\u34eb\\u2ec8\\u3959op\\xf4\\u2fb5\\u0100;h\\u13b7\\u3962\\xef\\u318d\\u0100iu\\u3969\\u396dgm\\xe1\\u33b3\\u0100bp\\u3972\\u3984setneq\\u0100;q\\u397d\\u3980\\uc000\\u228a\\ufe00;\\uc000\\u2acb\\ufe00setneq\\u0100;q\\u398f\\u3992\\uc000\\u228b\\ufe00;\\uc000\\u2acc\\ufe00\\u0100hr\\u399b\\u399fet\\xe1\\u369ciangle\\u0100lr\\u39aa\\u39afeft\\xbb\\u0925ight\\xbb\\u1051y;\\u4432ash\\xbb\\u1036\\u0180elr\\u39c4\\u39d2\\u39d7\\u0180;be\\u2dea\\u39cb\\u39cfar;\\u62bbq;\\u625alip;\\u62ee\\u0100bt\\u39dc\\u1468a\\xf2\\u1469r;\\uc000\\ud835\\udd33tr\\xe9\\u39aesu\\u0100bp\\u39ef\\u39f1\\xbb\\u0d1c\\xbb\\u0d59pf;\\uc000\\ud835\\udd67ro\\xf0\\u0efbtr\\xe9\\u39b4\\u0100cu\\u3a06\\u3a0br;\\uc000\\ud835\\udccb\\u0100bp\\u3a10\\u3a18n\\u0100Ee\\u3980\\u3a16\\xbb\\u397en\\u0100Ee\\u3992\\u3a1e\\xbb\\u3990igzag;\\u699a\\u0380cefoprs\\u3a36\\u3a3b\\u3a56\\u3a5b\\u3a54\\u3a61\\u3a6airc;\\u4175\\u0100di\\u3a40\\u3a51\\u0100bg\\u3a45\\u3a49ar;\\u6a5fe\\u0100;q\\u15fa\\u3a4f;\\u6259erp;\\u6118r;\\uc000\\ud835\\udd34pf;\\uc000\\ud835\\udd68\\u0100;e\\u1479\\u3a66at\\xe8\\u1479cr;\\uc000\\ud835\\udccc\\u0ae3\\u178e\\u3a87\\0\\u3a8b\\0\\u3a90\\u3a9b\\0\\0\\u3a9d\\u3aa8\\u3aab\\u3aaf\\0\\0\\u3ac3\\u3ace\\0\\u3ad8\\u17dc\\u17dftr\\xe9\\u17d1r;\\uc000\\ud835\\udd35\\u0100Aa\\u3a94\\u3a97r\\xf2\\u03c3r\\xf2\\u09f6;\\u43be\\u0100Aa\\u3aa1\\u3aa4r\\xf2\\u03b8r\\xf2\\u09eba\\xf0\\u2713is;\\u62fb\\u0180dpt\\u17a4\\u3ab5\\u3abe\\u0100fl\\u3aba\\u17a9;\\uc000\\ud835\\udd69im\\xe5\\u17b2\\u0100Aa\\u3ac7\\u3acar\\xf2\\u03cer\\xf2\\u0a01\\u0100cq\\u3ad2\\u17b8r;\\uc000\\ud835\\udccd\\u0100pt\\u17d6\\u3adcr\\xe9\\u17d4\\u0400acefiosu\\u3af0\\u3afd\\u3b08\\u3b0c\\u3b11\\u3b15\\u3b1b\\u3b21c\\u0100uy\\u3af6\\u3afbte\\u803b\\xfd\\u40fd;\\u444f\\u0100iy\\u3b02\\u3b06rc;\\u4177;\\u444bn\\u803b\\xa5\\u40a5r;\\uc000\\ud835\\udd36cy;\\u4457pf;\\uc000\\ud835\\udd6acr;\\uc000\\ud835\\udcce\\u0100cm\\u3b26\\u3b29y;\\u444el\\u803b\\xff\\u40ff\\u0500acdefhiosw\\u3b42\\u3b48\\u3b54\\u3b58\\u3b64\\u3b69\\u3b6d\\u3b74\\u3b7a\\u3b80cute;\\u417a\\u0100ay\\u3b4d\\u3b52ron;\\u417e;\\u4437ot;\\u417c\\u0100et\\u3b5d\\u3b61tr\\xe6\\u155fa;\\u43b6r;\\uc000\\ud835\\udd37cy;\\u4436grarr;\\u61ddpf;\\uc000\\ud835\\udd6bcr;\\uc000\\ud835\\udccf\\u0100jn\\u3b85\\u3b87;\\u600dj;\\u600c\"\n    .split(\"\")\n    .map((c) => c.charCodeAt(0)));\n//# sourceMappingURL=decode-data-html.js.map","// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134\nvar _a;\nconst decodeMap = new Map([\n    [0, 65533],\n    // C1 Unicode control character reference replacements\n    [128, 8364],\n    [130, 8218],\n    [131, 402],\n    [132, 8222],\n    [133, 8230],\n    [134, 8224],\n    [135, 8225],\n    [136, 710],\n    [137, 8240],\n    [138, 352],\n    [139, 8249],\n    [140, 338],\n    [142, 381],\n    [145, 8216],\n    [146, 8217],\n    [147, 8220],\n    [148, 8221],\n    [149, 8226],\n    [150, 8211],\n    [151, 8212],\n    [152, 732],\n    [153, 8482],\n    [154, 353],\n    [155, 8250],\n    [156, 339],\n    [158, 382],\n    [159, 376],\n]);\n/**\n * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.\n */\nexport const fromCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, n/no-unsupported-features/es-builtins\n(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {\n    let output = \"\";\n    if (codePoint > 65535) {\n        codePoint -= 65536;\n        output += String.fromCharCode(((codePoint >>> 10) & 1023) | 55296);\n        codePoint = 56320 | (codePoint & 1023);\n    }\n    output += String.fromCharCode(codePoint);\n    return output;\n};\n/**\n * Replace the given code point with a replacement character if it is a\n * surrogate or is outside the valid range. Otherwise return the code\n * point unchanged.\n */\nexport function replaceCodePoint(codePoint) {\n    var _a;\n    if ((codePoint >= 55296 && codePoint <= 57343) ||\n        codePoint > 1114111) {\n        return 65533;\n    }\n    return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;\n}\n/**\n * Replace the code point if relevant, then convert it to a string.\n *\n * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.\n * @param codePoint The code point to decode.\n * @returns The decoded code point.\n */\nexport function decodeCodePoint(codePoint) {\n    return fromCodePoint(replaceCodePoint(codePoint));\n}\n//# sourceMappingURL=decode-codepoint.js.map","import { htmlDecodeTree } from \"./generated/decode-data-html.js\";\nimport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\nimport { replaceCodePoint, fromCodePoint } from \"./decode-codepoint.js\";\nvar CharCodes;\n(function (CharCodes) {\n    CharCodes[CharCodes[\"NUM\"] = 35] = \"NUM\";\n    CharCodes[CharCodes[\"SEMI\"] = 59] = \"SEMI\";\n    CharCodes[CharCodes[\"EQUALS\"] = 61] = \"EQUALS\";\n    CharCodes[CharCodes[\"ZERO\"] = 48] = \"ZERO\";\n    CharCodes[CharCodes[\"NINE\"] = 57] = \"NINE\";\n    CharCodes[CharCodes[\"LOWER_A\"] = 97] = \"LOWER_A\";\n    CharCodes[CharCodes[\"LOWER_F\"] = 102] = \"LOWER_F\";\n    CharCodes[CharCodes[\"LOWER_X\"] = 120] = \"LOWER_X\";\n    CharCodes[CharCodes[\"LOWER_Z\"] = 122] = \"LOWER_Z\";\n    CharCodes[CharCodes[\"UPPER_A\"] = 65] = \"UPPER_A\";\n    CharCodes[CharCodes[\"UPPER_F\"] = 70] = \"UPPER_F\";\n    CharCodes[CharCodes[\"UPPER_Z\"] = 90] = \"UPPER_Z\";\n})(CharCodes || (CharCodes = {}));\n/** Bit that needs to be set to convert an upper case ASCII character to lower case */\nconst TO_LOWER_BIT = 32;\nexport var BinTrieFlags;\n(function (BinTrieFlags) {\n    BinTrieFlags[BinTrieFlags[\"VALUE_LENGTH\"] = 49152] = \"VALUE_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"BRANCH_LENGTH\"] = 16256] = \"BRANCH_LENGTH\";\n    BinTrieFlags[BinTrieFlags[\"JUMP_TABLE\"] = 127] = \"JUMP_TABLE\";\n})(BinTrieFlags || (BinTrieFlags = {}));\nfunction isNumber(code) {\n    return code >= CharCodes.ZERO && code <= CharCodes.NINE;\n}\nfunction isHexadecimalCharacter(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_F) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_F));\n}\nfunction isAsciiAlphaNumeric(code) {\n    return ((code >= CharCodes.UPPER_A && code <= CharCodes.UPPER_Z) ||\n        (code >= CharCodes.LOWER_A && code <= CharCodes.LOWER_Z) ||\n        isNumber(code));\n}\n/**\n * Checks if the given character is a valid end character for an entity in an attribute.\n *\n * Attribute values that aren't terminated properly aren't parsed, and shouldn't lead to a parser error.\n * See the example in https://html.spec.whatwg.org/multipage/parsing.html#named-character-reference-state\n */\nfunction isEntityInAttributeInvalidEnd(code) {\n    return code === CharCodes.EQUALS || isAsciiAlphaNumeric(code);\n}\nvar EntityDecoderState;\n(function (EntityDecoderState) {\n    EntityDecoderState[EntityDecoderState[\"EntityStart\"] = 0] = \"EntityStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericStart\"] = 1] = \"NumericStart\";\n    EntityDecoderState[EntityDecoderState[\"NumericDecimal\"] = 2] = \"NumericDecimal\";\n    EntityDecoderState[EntityDecoderState[\"NumericHex\"] = 3] = \"NumericHex\";\n    EntityDecoderState[EntityDecoderState[\"NamedEntity\"] = 4] = \"NamedEntity\";\n})(EntityDecoderState || (EntityDecoderState = {}));\nexport var DecodingMode;\n(function (DecodingMode) {\n    /** Entities in text nodes that can end with any character. */\n    DecodingMode[DecodingMode[\"Legacy\"] = 0] = \"Legacy\";\n    /** Only allow entities terminated with a semicolon. */\n    DecodingMode[DecodingMode[\"Strict\"] = 1] = \"Strict\";\n    /** Entities in attributes have limitations on ending characters. */\n    DecodingMode[DecodingMode[\"Attribute\"] = 2] = \"Attribute\";\n})(DecodingMode || (DecodingMode = {}));\n/**\n * Token decoder with support of writing partial entities.\n */\nexport class EntityDecoder {\n    constructor(\n    /** The tree used to decode entities. */\n    decodeTree, \n    /**\n     * The function that is called when a codepoint is decoded.\n     *\n     * For multi-byte named entities, this will be called multiple times,\n     * with the second codepoint, and the same `consumed` value.\n     *\n     * @param codepoint The decoded codepoint.\n     * @param consumed The number of bytes consumed by the decoder.\n     */\n    emitCodePoint, \n    /** An object that is used to produce errors. */\n    errors) {\n        this.decodeTree = decodeTree;\n        this.emitCodePoint = emitCodePoint;\n        this.errors = errors;\n        /** The current state of the decoder. */\n        this.state = EntityDecoderState.EntityStart;\n        /** Characters that were consumed while parsing an entity. */\n        this.consumed = 1;\n        /**\n         * The result of the entity.\n         *\n         * Either the result index of a numeric entity, or the codepoint of a\n         * numeric entity.\n         */\n        this.result = 0;\n        /** The current index in the decode tree. */\n        this.treeIndex = 0;\n        /** The number of characters that were consumed in excess. */\n        this.excess = 1;\n        /** The mode in which the decoder is operating. */\n        this.decodeMode = DecodingMode.Strict;\n    }\n    /** Resets the instance to make it reusable. */\n    startEntity(decodeMode) {\n        this.decodeMode = decodeMode;\n        this.state = EntityDecoderState.EntityStart;\n        this.result = 0;\n        this.treeIndex = 0;\n        this.excess = 1;\n        this.consumed = 1;\n    }\n    /**\n     * Write an entity to the decoder. This can be called multiple times with partial entities.\n     * If the entity is incomplete, the decoder will return -1.\n     *\n     * Mirrors the implementation of `getDecoder`, but with the ability to stop decoding if the\n     * entity is incomplete, and resume when the next string is written.\n     *\n     * @param input The string containing the entity (or a continuation of the entity).\n     * @param offset The offset at which the entity begins. Should be 0 if this is not the first call.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    write(input, offset) {\n        switch (this.state) {\n            case EntityDecoderState.EntityStart: {\n                if (input.charCodeAt(offset) === CharCodes.NUM) {\n                    this.state = EntityDecoderState.NumericStart;\n                    this.consumed += 1;\n                    return this.stateNumericStart(input, offset + 1);\n                }\n                this.state = EntityDecoderState.NamedEntity;\n                return this.stateNamedEntity(input, offset);\n            }\n            case EntityDecoderState.NumericStart: {\n                return this.stateNumericStart(input, offset);\n            }\n            case EntityDecoderState.NumericDecimal: {\n                return this.stateNumericDecimal(input, offset);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.stateNumericHex(input, offset);\n            }\n            case EntityDecoderState.NamedEntity: {\n                return this.stateNamedEntity(input, offset);\n            }\n        }\n    }\n    /**\n     * Switches between the numeric decimal and hexadecimal states.\n     *\n     * Equivalent to the `Numeric character reference state` in the HTML spec.\n     *\n     * @param input The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericStart(input, offset) {\n        if (offset >= input.length) {\n            return -1;\n        }\n        if ((input.charCodeAt(offset) | TO_LOWER_BIT) === CharCodes.LOWER_X) {\n            this.state = EntityDecoderState.NumericHex;\n            this.consumed += 1;\n            return this.stateNumericHex(input, offset + 1);\n        }\n        this.state = EntityDecoderState.NumericDecimal;\n        return this.stateNumericDecimal(input, offset);\n    }\n    addToNumericResult(input, start, end, base) {\n        if (start !== end) {\n            const digitCount = end - start;\n            this.result =\n                this.result * Math.pow(base, digitCount) +\n                    Number.parseInt(input.substr(start, digitCount), base);\n            this.consumed += digitCount;\n        }\n    }\n    /**\n     * Parses a hexadecimal numeric entity.\n     *\n     * Equivalent to the `Hexademical character reference state` in the HTML spec.\n     *\n     * @param input The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericHex(input, offset) {\n        const startIndex = offset;\n        while (offset < input.length) {\n            const char = input.charCodeAt(offset);\n            if (isNumber(char) || isHexadecimalCharacter(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(input, startIndex, offset, 16);\n                return this.emitNumericEntity(char, 3);\n            }\n        }\n        this.addToNumericResult(input, startIndex, offset, 16);\n        return -1;\n    }\n    /**\n     * Parses a decimal numeric entity.\n     *\n     * Equivalent to the `Decimal character reference state` in the HTML spec.\n     *\n     * @param input The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNumericDecimal(input, offset) {\n        const startIndex = offset;\n        while (offset < input.length) {\n            const char = input.charCodeAt(offset);\n            if (isNumber(char)) {\n                offset += 1;\n            }\n            else {\n                this.addToNumericResult(input, startIndex, offset, 10);\n                return this.emitNumericEntity(char, 2);\n            }\n        }\n        this.addToNumericResult(input, startIndex, offset, 10);\n        return -1;\n    }\n    /**\n     * Validate and emit a numeric entity.\n     *\n     * Implements the logic from the `Hexademical character reference start\n     * state` and `Numeric character reference end state` in the HTML spec.\n     *\n     * @param lastCp The last code point of the entity. Used to see if the\n     *               entity was terminated with a semicolon.\n     * @param expectedLength The minimum number of characters that should be\n     *                       consumed. Used to validate that at least one digit\n     *                       was consumed.\n     * @returns The number of characters that were consumed.\n     */\n    emitNumericEntity(lastCp, expectedLength) {\n        var _a;\n        // Ensure we consumed at least one digit.\n        if (this.consumed <= expectedLength) {\n            (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n            return 0;\n        }\n        // Figure out if this is a legit end of the entity\n        if (lastCp === CharCodes.SEMI) {\n            this.consumed += 1;\n        }\n        else if (this.decodeMode === DecodingMode.Strict) {\n            return 0;\n        }\n        this.emitCodePoint(replaceCodePoint(this.result), this.consumed);\n        if (this.errors) {\n            if (lastCp !== CharCodes.SEMI) {\n                this.errors.missingSemicolonAfterCharacterReference();\n            }\n            this.errors.validateNumericCharacterReference(this.result);\n        }\n        return this.consumed;\n    }\n    /**\n     * Parses a named entity.\n     *\n     * Equivalent to the `Named character reference state` in the HTML spec.\n     *\n     * @param input The string containing the entity (or a continuation of the entity).\n     * @param offset The current offset.\n     * @returns The number of characters that were consumed, or -1 if the entity is incomplete.\n     */\n    stateNamedEntity(input, offset) {\n        const { decodeTree } = this;\n        let current = decodeTree[this.treeIndex];\n        // The mask is the number of bytes of the value, including the current byte.\n        let valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n        for (; offset < input.length; offset++, this.excess++) {\n            const char = input.charCodeAt(offset);\n            this.treeIndex = determineBranch(decodeTree, current, this.treeIndex + Math.max(1, valueLength), char);\n            if (this.treeIndex < 0) {\n                return this.result === 0 ||\n                    // If we are parsing an attribute\n                    (this.decodeMode === DecodingMode.Attribute &&\n                        // We shouldn't have consumed any characters after the entity,\n                        (valueLength === 0 ||\n                            // And there should be no invalid characters.\n                            isEntityInAttributeInvalidEnd(char)))\n                    ? 0\n                    : this.emitNotTerminatedNamedEntity();\n            }\n            current = decodeTree[this.treeIndex];\n            valueLength = (current & BinTrieFlags.VALUE_LENGTH) >> 14;\n            // If the branch is a value, store it and continue\n            if (valueLength !== 0) {\n                // If the entity is terminated by a semicolon, we are done.\n                if (char === CharCodes.SEMI) {\n                    return this.emitNamedEntityData(this.treeIndex, valueLength, this.consumed + this.excess);\n                }\n                // If we encounter a non-terminated (legacy) entity while parsing strictly, then ignore it.\n                if (this.decodeMode !== DecodingMode.Strict) {\n                    this.result = this.treeIndex;\n                    this.consumed += this.excess;\n                    this.excess = 0;\n                }\n            }\n        }\n        return -1;\n    }\n    /**\n     * Emit a named entity that was not terminated with a semicolon.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNotTerminatedNamedEntity() {\n        var _a;\n        const { result, decodeTree } = this;\n        const valueLength = (decodeTree[result] & BinTrieFlags.VALUE_LENGTH) >> 14;\n        this.emitNamedEntityData(result, valueLength, this.consumed);\n        (_a = this.errors) === null || _a === void 0 ? void 0 : _a.missingSemicolonAfterCharacterReference();\n        return this.consumed;\n    }\n    /**\n     * Emit a named entity.\n     *\n     * @param result The index of the entity in the decode tree.\n     * @param valueLength The number of bytes in the entity.\n     * @param consumed The number of characters consumed.\n     *\n     * @returns The number of characters consumed.\n     */\n    emitNamedEntityData(result, valueLength, consumed) {\n        const { decodeTree } = this;\n        this.emitCodePoint(valueLength === 1\n            ? decodeTree[result] & ~BinTrieFlags.VALUE_LENGTH\n            : decodeTree[result + 1], consumed);\n        if (valueLength === 3) {\n            // For multi-byte values, we need to emit the second byte.\n            this.emitCodePoint(decodeTree[result + 2], consumed);\n        }\n        return consumed;\n    }\n    /**\n     * Signal to the parser that the end of the input was reached.\n     *\n     * Remaining data will be emitted and relevant errors will be produced.\n     *\n     * @returns The number of characters consumed.\n     */\n    end() {\n        var _a;\n        switch (this.state) {\n            case EntityDecoderState.NamedEntity: {\n                // Emit a named entity if we have one.\n                return this.result !== 0 &&\n                    (this.decodeMode !== DecodingMode.Attribute ||\n                        this.result === this.treeIndex)\n                    ? this.emitNotTerminatedNamedEntity()\n                    : 0;\n            }\n            // Otherwise, emit a numeric entity if we have one.\n            case EntityDecoderState.NumericDecimal: {\n                return this.emitNumericEntity(0, 2);\n            }\n            case EntityDecoderState.NumericHex: {\n                return this.emitNumericEntity(0, 3);\n            }\n            case EntityDecoderState.NumericStart: {\n                (_a = this.errors) === null || _a === void 0 ? void 0 : _a.absenceOfDigitsInNumericCharacterReference(this.consumed);\n                return 0;\n            }\n            case EntityDecoderState.EntityStart: {\n                // Return 0 if we have no entity.\n                return 0;\n            }\n        }\n    }\n}\n/**\n * Creates a function that decodes entities in a string.\n *\n * @param decodeTree The decode tree.\n * @returns A function that decodes entities in a string.\n */\nfunction getDecoder(decodeTree) {\n    let returnValue = \"\";\n    const decoder = new EntityDecoder(decodeTree, (data) => (returnValue += fromCodePoint(data)));\n    return function decodeWithTrie(input, decodeMode) {\n        let lastIndex = 0;\n        let offset = 0;\n        while ((offset = input.indexOf(\"&\", offset)) >= 0) {\n            returnValue += input.slice(lastIndex, offset);\n            decoder.startEntity(decodeMode);\n            const length = decoder.write(input, \n            // Skip the \"&\"\n            offset + 1);\n            if (length < 0) {\n                lastIndex = offset + decoder.end();\n                break;\n            }\n            lastIndex = offset + length;\n            // If `length` is 0, skip the current `&` and continue.\n            offset = length === 0 ? lastIndex + 1 : lastIndex;\n        }\n        const result = returnValue + input.slice(lastIndex);\n        // Make sure we don't keep a reference to the final string.\n        returnValue = \"\";\n        return result;\n    };\n}\n/**\n * Determines the branch of the current node that is taken given the current\n * character. This function is used to traverse the trie.\n *\n * @param decodeTree The trie.\n * @param current The current node.\n * @param nodeIdx The index right after the current node and its value.\n * @param char The current character.\n * @returns The index of the next node, or -1 if no branch is taken.\n */\nexport function determineBranch(decodeTree, current, nodeIndex, char) {\n    const branchCount = (current & BinTrieFlags.BRANCH_LENGTH) >> 7;\n    const jumpOffset = current & BinTrieFlags.JUMP_TABLE;\n    // Case 1: Single branch encoded in jump offset\n    if (branchCount === 0) {\n        return jumpOffset !== 0 && char === jumpOffset ? nodeIndex : -1;\n    }\n    // Case 2: Multiple branches encoded in jump table\n    if (jumpOffset) {\n        const value = char - jumpOffset;\n        return value < 0 || value >= branchCount\n            ? -1\n            : decodeTree[nodeIndex + value] - 1;\n    }\n    // Case 3: Multiple branches encoded in dictionary\n    // Binary search for the character.\n    let lo = nodeIndex;\n    let hi = lo + branchCount - 1;\n    while (lo <= hi) {\n        const mid = (lo + hi) >>> 1;\n        const midValue = decodeTree[mid];\n        if (midValue < char) {\n            lo = mid + 1;\n        }\n        else if (midValue > char) {\n            hi = mid - 1;\n        }\n        else {\n            return decodeTree[mid + branchCount];\n        }\n    }\n    return -1;\n}\nconst htmlDecoder = /* #__PURE__ */ getDecoder(htmlDecodeTree);\nconst xmlDecoder = /* #__PURE__ */ getDecoder(xmlDecodeTree);\n/**\n * Decodes an HTML string.\n *\n * @param htmlString The string to decode.\n * @param mode The decoding mode.\n * @returns The decoded string.\n */\nexport function decodeHTML(htmlString, mode = DecodingMode.Legacy) {\n    return htmlDecoder(htmlString, mode);\n}\n/**\n * Decodes an HTML string in an attribute.\n *\n * @param htmlAttribute The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLAttribute(htmlAttribute) {\n    return htmlDecoder(htmlAttribute, DecodingMode.Attribute);\n}\n/**\n * Decodes an HTML string, requiring all entities to be terminated by a semicolon.\n *\n * @param htmlString The string to decode.\n * @returns The decoded string.\n */\nexport function decodeHTMLStrict(htmlString) {\n    return htmlDecoder(htmlString, DecodingMode.Strict);\n}\n/**\n * Decodes an XML string, requiring all entities to be terminated by a semicolon.\n *\n * @param xmlString The string to decode.\n * @returns The decoded string.\n */\nexport function decodeXML(xmlString) {\n    return xmlDecoder(xmlString, DecodingMode.Strict);\n}\n// Re-export for use by eg. htmlparser2\nexport { htmlDecodeTree } from \"./generated/decode-data-html.js\";\nexport { xmlDecodeTree } from \"./generated/decode-data-xml.js\";\nexport { decodeCodePoint, replaceCodePoint, fromCodePoint, } from \"./decode-codepoint.js\";\n//# sourceMappingURL=decode.js.map","/** All valid namespaces in HTML. */\nexport var NS;\n(function (NS) {\n    NS[\"HTML\"] = \"http://www.w3.org/1999/xhtml\";\n    NS[\"MATHML\"] = \"http://www.w3.org/1998/Math/MathML\";\n    NS[\"SVG\"] = \"http://www.w3.org/2000/svg\";\n    NS[\"XLINK\"] = \"http://www.w3.org/1999/xlink\";\n    NS[\"XML\"] = \"http://www.w3.org/XML/1998/namespace\";\n    NS[\"XMLNS\"] = \"http://www.w3.org/2000/xmlns/\";\n})(NS || (NS = {}));\nexport var ATTRS;\n(function (ATTRS) {\n    ATTRS[\"TYPE\"] = \"type\";\n    ATTRS[\"ACTION\"] = \"action\";\n    ATTRS[\"ENCODING\"] = \"encoding\";\n    ATTRS[\"PROMPT\"] = \"prompt\";\n    ATTRS[\"NAME\"] = \"name\";\n    ATTRS[\"COLOR\"] = \"color\";\n    ATTRS[\"FACE\"] = \"face\";\n    ATTRS[\"SIZE\"] = \"size\";\n})(ATTRS || (ATTRS = {}));\n/**\n * The mode of the document.\n *\n * @see {@link https://dom.spec.whatwg.org/#concept-document-limited-quirks}\n */\nexport var DOCUMENT_MODE;\n(function (DOCUMENT_MODE) {\n    DOCUMENT_MODE[\"NO_QUIRKS\"] = \"no-quirks\";\n    DOCUMENT_MODE[\"QUIRKS\"] = \"quirks\";\n    DOCUMENT_MODE[\"LIMITED_QUIRKS\"] = \"limited-quirks\";\n})(DOCUMENT_MODE || (DOCUMENT_MODE = {}));\nexport var TAG_NAMES;\n(function (TAG_NAMES) {\n    TAG_NAMES[\"A\"] = \"a\";\n    TAG_NAMES[\"ADDRESS\"] = \"address\";\n    TAG_NAMES[\"ANNOTATION_XML\"] = \"annotation-xml\";\n    TAG_NAMES[\"APPLET\"] = \"applet\";\n    TAG_NAMES[\"AREA\"] = \"area\";\n    TAG_NAMES[\"ARTICLE\"] = \"article\";\n    TAG_NAMES[\"ASIDE\"] = \"aside\";\n    TAG_NAMES[\"B\"] = \"b\";\n    TAG_NAMES[\"BASE\"] = \"base\";\n    TAG_NAMES[\"BASEFONT\"] = \"basefont\";\n    TAG_NAMES[\"BGSOUND\"] = \"bgsound\";\n    TAG_NAMES[\"BIG\"] = \"big\";\n    TAG_NAMES[\"BLOCKQUOTE\"] = \"blockquote\";\n    TAG_NAMES[\"BODY\"] = \"body\";\n    TAG_NAMES[\"BR\"] = \"br\";\n    TAG_NAMES[\"BUTTON\"] = \"button\";\n    TAG_NAMES[\"CAPTION\"] = \"caption\";\n    TAG_NAMES[\"CENTER\"] = \"center\";\n    TAG_NAMES[\"CODE\"] = \"code\";\n    TAG_NAMES[\"COL\"] = \"col\";\n    TAG_NAMES[\"COLGROUP\"] = \"colgroup\";\n    TAG_NAMES[\"DD\"] = \"dd\";\n    TAG_NAMES[\"DESC\"] = \"desc\";\n    TAG_NAMES[\"DETAILS\"] = \"details\";\n    TAG_NAMES[\"DIALOG\"] = \"dialog\";\n    TAG_NAMES[\"DIR\"] = \"dir\";\n    TAG_NAMES[\"DIV\"] = \"div\";\n    TAG_NAMES[\"DL\"] = \"dl\";\n    TAG_NAMES[\"DT\"] = \"dt\";\n    TAG_NAMES[\"EM\"] = \"em\";\n    TAG_NAMES[\"EMBED\"] = \"embed\";\n    TAG_NAMES[\"FIELDSET\"] = \"fieldset\";\n    TAG_NAMES[\"FIGCAPTION\"] = \"figcaption\";\n    TAG_NAMES[\"FIGURE\"] = \"figure\";\n    TAG_NAMES[\"FONT\"] = \"font\";\n    TAG_NAMES[\"FOOTER\"] = \"footer\";\n    TAG_NAMES[\"FOREIGN_OBJECT\"] = \"foreignObject\";\n    TAG_NAMES[\"FORM\"] = \"form\";\n    TAG_NAMES[\"FRAME\"] = \"frame\";\n    TAG_NAMES[\"FRAMESET\"] = \"frameset\";\n    TAG_NAMES[\"H1\"] = \"h1\";\n    TAG_NAMES[\"H2\"] = \"h2\";\n    TAG_NAMES[\"H3\"] = \"h3\";\n    TAG_NAMES[\"H4\"] = \"h4\";\n    TAG_NAMES[\"H5\"] = \"h5\";\n    TAG_NAMES[\"H6\"] = \"h6\";\n    TAG_NAMES[\"HEAD\"] = \"head\";\n    TAG_NAMES[\"HEADER\"] = \"header\";\n    TAG_NAMES[\"HGROUP\"] = \"hgroup\";\n    TAG_NAMES[\"HR\"] = \"hr\";\n    TAG_NAMES[\"HTML\"] = \"html\";\n    TAG_NAMES[\"I\"] = \"i\";\n    TAG_NAMES[\"IMG\"] = \"img\";\n    TAG_NAMES[\"IMAGE\"] = \"image\";\n    TAG_NAMES[\"INPUT\"] = \"input\";\n    TAG_NAMES[\"IFRAME\"] = \"iframe\";\n    TAG_NAMES[\"KEYGEN\"] = \"keygen\";\n    TAG_NAMES[\"LABEL\"] = \"label\";\n    TAG_NAMES[\"LI\"] = \"li\";\n    TAG_NAMES[\"LINK\"] = \"link\";\n    TAG_NAMES[\"LISTING\"] = \"listing\";\n    TAG_NAMES[\"MAIN\"] = \"main\";\n    TAG_NAMES[\"MALIGNMARK\"] = \"malignmark\";\n    TAG_NAMES[\"MARQUEE\"] = \"marquee\";\n    TAG_NAMES[\"MATH\"] = \"math\";\n    TAG_NAMES[\"MENU\"] = \"menu\";\n    TAG_NAMES[\"META\"] = \"meta\";\n    TAG_NAMES[\"MGLYPH\"] = \"mglyph\";\n    TAG_NAMES[\"MI\"] = \"mi\";\n    TAG_NAMES[\"MO\"] = \"mo\";\n    TAG_NAMES[\"MN\"] = \"mn\";\n    TAG_NAMES[\"MS\"] = \"ms\";\n    TAG_NAMES[\"MTEXT\"] = \"mtext\";\n    TAG_NAMES[\"NAV\"] = \"nav\";\n    TAG_NAMES[\"NOBR\"] = \"nobr\";\n    TAG_NAMES[\"NOFRAMES\"] = \"noframes\";\n    TAG_NAMES[\"NOEMBED\"] = \"noembed\";\n    TAG_NAMES[\"NOSCRIPT\"] = \"noscript\";\n    TAG_NAMES[\"OBJECT\"] = \"object\";\n    TAG_NAMES[\"OL\"] = \"ol\";\n    TAG_NAMES[\"OPTGROUP\"] = \"optgroup\";\n    TAG_NAMES[\"OPTION\"] = \"option\";\n    TAG_NAMES[\"P\"] = \"p\";\n    TAG_NAMES[\"PARAM\"] = \"param\";\n    TAG_NAMES[\"PLAINTEXT\"] = \"plaintext\";\n    TAG_NAMES[\"PRE\"] = \"pre\";\n    TAG_NAMES[\"RB\"] = \"rb\";\n    TAG_NAMES[\"RP\"] = \"rp\";\n    TAG_NAMES[\"RT\"] = \"rt\";\n    TAG_NAMES[\"RTC\"] = \"rtc\";\n    TAG_NAMES[\"RUBY\"] = \"ruby\";\n    TAG_NAMES[\"S\"] = \"s\";\n    TAG_NAMES[\"SCRIPT\"] = \"script\";\n    TAG_NAMES[\"SEARCH\"] = \"search\";\n    TAG_NAMES[\"SECTION\"] = \"section\";\n    TAG_NAMES[\"SELECT\"] = \"select\";\n    TAG_NAMES[\"SOURCE\"] = \"source\";\n    TAG_NAMES[\"SMALL\"] = \"small\";\n    TAG_NAMES[\"SPAN\"] = \"span\";\n    TAG_NAMES[\"STRIKE\"] = \"strike\";\n    TAG_NAMES[\"STRONG\"] = \"strong\";\n    TAG_NAMES[\"STYLE\"] = \"style\";\n    TAG_NAMES[\"SUB\"] = \"sub\";\n    TAG_NAMES[\"SUMMARY\"] = \"summary\";\n    TAG_NAMES[\"SUP\"] = \"sup\";\n    TAG_NAMES[\"TABLE\"] = \"table\";\n    TAG_NAMES[\"TBODY\"] = \"tbody\";\n    TAG_NAMES[\"TEMPLATE\"] = \"template\";\n    TAG_NAMES[\"TEXTAREA\"] = \"textarea\";\n    TAG_NAMES[\"TFOOT\"] = \"tfoot\";\n    TAG_NAMES[\"TD\"] = \"td\";\n    TAG_NAMES[\"TH\"] = \"th\";\n    TAG_NAMES[\"THEAD\"] = \"thead\";\n    TAG_NAMES[\"TITLE\"] = \"title\";\n    TAG_NAMES[\"TR\"] = \"tr\";\n    TAG_NAMES[\"TRACK\"] = \"track\";\n    TAG_NAMES[\"TT\"] = \"tt\";\n    TAG_NAMES[\"U\"] = \"u\";\n    TAG_NAMES[\"UL\"] = \"ul\";\n    TAG_NAMES[\"SVG\"] = \"svg\";\n    TAG_NAMES[\"VAR\"] = \"var\";\n    TAG_NAMES[\"WBR\"] = \"wbr\";\n    TAG_NAMES[\"XMP\"] = \"xmp\";\n})(TAG_NAMES || (TAG_NAMES = {}));\n/**\n * Tag IDs are numeric IDs for known tag names.\n *\n * We use tag IDs to improve the performance of tag name comparisons.\n */\nexport var TAG_ID;\n(function (TAG_ID) {\n    TAG_ID[TAG_ID[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n    TAG_ID[TAG_ID[\"A\"] = 1] = \"A\";\n    TAG_ID[TAG_ID[\"ADDRESS\"] = 2] = \"ADDRESS\";\n    TAG_ID[TAG_ID[\"ANNOTATION_XML\"] = 3] = \"ANNOTATION_XML\";\n    TAG_ID[TAG_ID[\"APPLET\"] = 4] = \"APPLET\";\n    TAG_ID[TAG_ID[\"AREA\"] = 5] = \"AREA\";\n    TAG_ID[TAG_ID[\"ARTICLE\"] = 6] = \"ARTICLE\";\n    TAG_ID[TAG_ID[\"ASIDE\"] = 7] = \"ASIDE\";\n    TAG_ID[TAG_ID[\"B\"] = 8] = \"B\";\n    TAG_ID[TAG_ID[\"BASE\"] = 9] = \"BASE\";\n    TAG_ID[TAG_ID[\"BASEFONT\"] = 10] = \"BASEFONT\";\n    TAG_ID[TAG_ID[\"BGSOUND\"] = 11] = \"BGSOUND\";\n    TAG_ID[TAG_ID[\"BIG\"] = 12] = \"BIG\";\n    TAG_ID[TAG_ID[\"BLOCKQUOTE\"] = 13] = \"BLOCKQUOTE\";\n    TAG_ID[TAG_ID[\"BODY\"] = 14] = \"BODY\";\n    TAG_ID[TAG_ID[\"BR\"] = 15] = \"BR\";\n    TAG_ID[TAG_ID[\"BUTTON\"] = 16] = \"BUTTON\";\n    TAG_ID[TAG_ID[\"CAPTION\"] = 17] = \"CAPTION\";\n    TAG_ID[TAG_ID[\"CENTER\"] = 18] = \"CENTER\";\n    TAG_ID[TAG_ID[\"CODE\"] = 19] = \"CODE\";\n    TAG_ID[TAG_ID[\"COL\"] = 20] = \"COL\";\n    TAG_ID[TAG_ID[\"COLGROUP\"] = 21] = \"COLGROUP\";\n    TAG_ID[TAG_ID[\"DD\"] = 22] = \"DD\";\n    TAG_ID[TAG_ID[\"DESC\"] = 23] = \"DESC\";\n    TAG_ID[TAG_ID[\"DETAILS\"] = 24] = \"DETAILS\";\n    TAG_ID[TAG_ID[\"DIALOG\"] = 25] = \"DIALOG\";\n    TAG_ID[TAG_ID[\"DIR\"] = 26] = \"DIR\";\n    TAG_ID[TAG_ID[\"DIV\"] = 27] = \"DIV\";\n    TAG_ID[TAG_ID[\"DL\"] = 28] = \"DL\";\n    TAG_ID[TAG_ID[\"DT\"] = 29] = \"DT\";\n    TAG_ID[TAG_ID[\"EM\"] = 30] = \"EM\";\n    TAG_ID[TAG_ID[\"EMBED\"] = 31] = \"EMBED\";\n    TAG_ID[TAG_ID[\"FIELDSET\"] = 32] = \"FIELDSET\";\n    TAG_ID[TAG_ID[\"FIGCAPTION\"] = 33] = \"FIGCAPTION\";\n    TAG_ID[TAG_ID[\"FIGURE\"] = 34] = \"FIGURE\";\n    TAG_ID[TAG_ID[\"FONT\"] = 35] = \"FONT\";\n    TAG_ID[TAG_ID[\"FOOTER\"] = 36] = \"FOOTER\";\n    TAG_ID[TAG_ID[\"FOREIGN_OBJECT\"] = 37] = \"FOREIGN_OBJECT\";\n    TAG_ID[TAG_ID[\"FORM\"] = 38] = \"FORM\";\n    TAG_ID[TAG_ID[\"FRAME\"] = 39] = \"FRAME\";\n    TAG_ID[TAG_ID[\"FRAMESET\"] = 40] = \"FRAMESET\";\n    TAG_ID[TAG_ID[\"H1\"] = 41] = \"H1\";\n    TAG_ID[TAG_ID[\"H2\"] = 42] = \"H2\";\n    TAG_ID[TAG_ID[\"H3\"] = 43] = \"H3\";\n    TAG_ID[TAG_ID[\"H4\"] = 44] = \"H4\";\n    TAG_ID[TAG_ID[\"H5\"] = 45] = \"H5\";\n    TAG_ID[TAG_ID[\"H6\"] = 46] = \"H6\";\n    TAG_ID[TAG_ID[\"HEAD\"] = 47] = \"HEAD\";\n    TAG_ID[TAG_ID[\"HEADER\"] = 48] = \"HEADER\";\n    TAG_ID[TAG_ID[\"HGROUP\"] = 49] = \"HGROUP\";\n    TAG_ID[TAG_ID[\"HR\"] = 50] = \"HR\";\n    TAG_ID[TAG_ID[\"HTML\"] = 51] = \"HTML\";\n    TAG_ID[TAG_ID[\"I\"] = 52] = \"I\";\n    TAG_ID[TAG_ID[\"IMG\"] = 53] = \"IMG\";\n    TAG_ID[TAG_ID[\"IMAGE\"] = 54] = \"IMAGE\";\n    TAG_ID[TAG_ID[\"INPUT\"] = 55] = \"INPUT\";\n    TAG_ID[TAG_ID[\"IFRAME\"] = 56] = \"IFRAME\";\n    TAG_ID[TAG_ID[\"KEYGEN\"] = 57] = \"KEYGEN\";\n    TAG_ID[TAG_ID[\"LABEL\"] = 58] = \"LABEL\";\n    TAG_ID[TAG_ID[\"LI\"] = 59] = \"LI\";\n    TAG_ID[TAG_ID[\"LINK\"] = 60] = \"LINK\";\n    TAG_ID[TAG_ID[\"LISTING\"] = 61] = \"LISTING\";\n    TAG_ID[TAG_ID[\"MAIN\"] = 62] = \"MAIN\";\n    TAG_ID[TAG_ID[\"MALIGNMARK\"] = 63] = \"MALIGNMARK\";\n    TAG_ID[TAG_ID[\"MARQUEE\"] = 64] = \"MARQUEE\";\n    TAG_ID[TAG_ID[\"MATH\"] = 65] = \"MATH\";\n    TAG_ID[TAG_ID[\"MENU\"] = 66] = \"MENU\";\n    TAG_ID[TAG_ID[\"META\"] = 67] = \"META\";\n    TAG_ID[TAG_ID[\"MGLYPH\"] = 68] = \"MGLYPH\";\n    TAG_ID[TAG_ID[\"MI\"] = 69] = \"MI\";\n    TAG_ID[TAG_ID[\"MO\"] = 70] = \"MO\";\n    TAG_ID[TAG_ID[\"MN\"] = 71] = \"MN\";\n    TAG_ID[TAG_ID[\"MS\"] = 72] = \"MS\";\n    TAG_ID[TAG_ID[\"MTEXT\"] = 73] = \"MTEXT\";\n    TAG_ID[TAG_ID[\"NAV\"] = 74] = \"NAV\";\n    TAG_ID[TAG_ID[\"NOBR\"] = 75] = \"NOBR\";\n    TAG_ID[TAG_ID[\"NOFRAMES\"] = 76] = \"NOFRAMES\";\n    TAG_ID[TAG_ID[\"NOEMBED\"] = 77] = \"NOEMBED\";\n    TAG_ID[TAG_ID[\"NOSCRIPT\"] = 78] = \"NOSCRIPT\";\n    TAG_ID[TAG_ID[\"OBJECT\"] = 79] = \"OBJECT\";\n    TAG_ID[TAG_ID[\"OL\"] = 80] = \"OL\";\n    TAG_ID[TAG_ID[\"OPTGROUP\"] = 81] = \"OPTGROUP\";\n    TAG_ID[TAG_ID[\"OPTION\"] = 82] = \"OPTION\";\n    TAG_ID[TAG_ID[\"P\"] = 83] = \"P\";\n    TAG_ID[TAG_ID[\"PARAM\"] = 84] = \"PARAM\";\n    TAG_ID[TAG_ID[\"PLAINTEXT\"] = 85] = \"PLAINTEXT\";\n    TAG_ID[TAG_ID[\"PRE\"] = 86] = \"PRE\";\n    TAG_ID[TAG_ID[\"RB\"] = 87] = \"RB\";\n    TAG_ID[TAG_ID[\"RP\"] = 88] = \"RP\";\n    TAG_ID[TAG_ID[\"RT\"] = 89] = \"RT\";\n    TAG_ID[TAG_ID[\"RTC\"] = 90] = \"RTC\";\n    TAG_ID[TAG_ID[\"RUBY\"] = 91] = \"RUBY\";\n    TAG_ID[TAG_ID[\"S\"] = 92] = \"S\";\n    TAG_ID[TAG_ID[\"SCRIPT\"] = 93] = \"SCRIPT\";\n    TAG_ID[TAG_ID[\"SEARCH\"] = 94] = \"SEARCH\";\n    TAG_ID[TAG_ID[\"SECTION\"] = 95] = \"SECTION\";\n    TAG_ID[TAG_ID[\"SELECT\"] = 96] = \"SELECT\";\n    TAG_ID[TAG_ID[\"SOURCE\"] = 97] = \"SOURCE\";\n    TAG_ID[TAG_ID[\"SMALL\"] = 98] = \"SMALL\";\n    TAG_ID[TAG_ID[\"SPAN\"] = 99] = \"SPAN\";\n    TAG_ID[TAG_ID[\"STRIKE\"] = 100] = \"STRIKE\";\n    TAG_ID[TAG_ID[\"STRONG\"] = 101] = \"STRONG\";\n    TAG_ID[TAG_ID[\"STYLE\"] = 102] = \"STYLE\";\n    TAG_ID[TAG_ID[\"SUB\"] = 103] = \"SUB\";\n    TAG_ID[TAG_ID[\"SUMMARY\"] = 104] = \"SUMMARY\";\n    TAG_ID[TAG_ID[\"SUP\"] = 105] = \"SUP\";\n    TAG_ID[TAG_ID[\"TABLE\"] = 106] = \"TABLE\";\n    TAG_ID[TAG_ID[\"TBODY\"] = 107] = \"TBODY\";\n    TAG_ID[TAG_ID[\"TEMPLATE\"] = 108] = \"TEMPLATE\";\n    TAG_ID[TAG_ID[\"TEXTAREA\"] = 109] = \"TEXTAREA\";\n    TAG_ID[TAG_ID[\"TFOOT\"] = 110] = \"TFOOT\";\n    TAG_ID[TAG_ID[\"TD\"] = 111] = \"TD\";\n    TAG_ID[TAG_ID[\"TH\"] = 112] = \"TH\";\n    TAG_ID[TAG_ID[\"THEAD\"] = 113] = \"THEAD\";\n    TAG_ID[TAG_ID[\"TITLE\"] = 114] = \"TITLE\";\n    TAG_ID[TAG_ID[\"TR\"] = 115] = \"TR\";\n    TAG_ID[TAG_ID[\"TRACK\"] = 116] = \"TRACK\";\n    TAG_ID[TAG_ID[\"TT\"] = 117] = \"TT\";\n    TAG_ID[TAG_ID[\"U\"] = 118] = \"U\";\n    TAG_ID[TAG_ID[\"UL\"] = 119] = \"UL\";\n    TAG_ID[TAG_ID[\"SVG\"] = 120] = \"SVG\";\n    TAG_ID[TAG_ID[\"VAR\"] = 121] = \"VAR\";\n    TAG_ID[TAG_ID[\"WBR\"] = 122] = \"WBR\";\n    TAG_ID[TAG_ID[\"XMP\"] = 123] = \"XMP\";\n})(TAG_ID || (TAG_ID = {}));\nconst TAG_NAME_TO_ID = new Map([\n    [TAG_NAMES.A, TAG_ID.A],\n    [TAG_NAMES.ADDRESS, TAG_ID.ADDRESS],\n    [TAG_NAMES.ANNOTATION_XML, TAG_ID.ANNOTATION_XML],\n    [TAG_NAMES.APPLET, TAG_ID.APPLET],\n    [TAG_NAMES.AREA, TAG_ID.AREA],\n    [TAG_NAMES.ARTICLE, TAG_ID.ARTICLE],\n    [TAG_NAMES.ASIDE, TAG_ID.ASIDE],\n    [TAG_NAMES.B, TAG_ID.B],\n    [TAG_NAMES.BASE, TAG_ID.BASE],\n    [TAG_NAMES.BASEFONT, TAG_ID.BASEFONT],\n    [TAG_NAMES.BGSOUND, TAG_ID.BGSOUND],\n    [TAG_NAMES.BIG, TAG_ID.BIG],\n    [TAG_NAMES.BLOCKQUOTE, TAG_ID.BLOCKQUOTE],\n    [TAG_NAMES.BODY, TAG_ID.BODY],\n    [TAG_NAMES.BR, TAG_ID.BR],\n    [TAG_NAMES.BUTTON, TAG_ID.BUTTON],\n    [TAG_NAMES.CAPTION, TAG_ID.CAPTION],\n    [TAG_NAMES.CENTER, TAG_ID.CENTER],\n    [TAG_NAMES.CODE, TAG_ID.CODE],\n    [TAG_NAMES.COL, TAG_ID.COL],\n    [TAG_NAMES.COLGROUP, TAG_ID.COLGROUP],\n    [TAG_NAMES.DD, TAG_ID.DD],\n    [TAG_NAMES.DESC, TAG_ID.DESC],\n    [TAG_NAMES.DETAILS, TAG_ID.DETAILS],\n    [TAG_NAMES.DIALOG, TAG_ID.DIALOG],\n    [TAG_NAMES.DIR, TAG_ID.DIR],\n    [TAG_NAMES.DIV, TAG_ID.DIV],\n    [TAG_NAMES.DL, TAG_ID.DL],\n    [TAG_NAMES.DT, TAG_ID.DT],\n    [TAG_NAMES.EM, TAG_ID.EM],\n    [TAG_NAMES.EMBED, TAG_ID.EMBED],\n    [TAG_NAMES.FIELDSET, TAG_ID.FIELDSET],\n    [TAG_NAMES.FIGCAPTION, TAG_ID.FIGCAPTION],\n    [TAG_NAMES.FIGURE, TAG_ID.FIGURE],\n    [TAG_NAMES.FONT, TAG_ID.FONT],\n    [TAG_NAMES.FOOTER, TAG_ID.FOOTER],\n    [TAG_NAMES.FOREIGN_OBJECT, TAG_ID.FOREIGN_OBJECT],\n    [TAG_NAMES.FORM, TAG_ID.FORM],\n    [TAG_NAMES.FRAME, TAG_ID.FRAME],\n    [TAG_NAMES.FRAMESET, TAG_ID.FRAMESET],\n    [TAG_NAMES.H1, TAG_ID.H1],\n    [TAG_NAMES.H2, TAG_ID.H2],\n    [TAG_NAMES.H3, TAG_ID.H3],\n    [TAG_NAMES.H4, TAG_ID.H4],\n    [TAG_NAMES.H5, TAG_ID.H5],\n    [TAG_NAMES.H6, TAG_ID.H6],\n    [TAG_NAMES.HEAD, TAG_ID.HEAD],\n    [TAG_NAMES.HEADER, TAG_ID.HEADER],\n    [TAG_NAMES.HGROUP, TAG_ID.HGROUP],\n    [TAG_NAMES.HR, TAG_ID.HR],\n    [TAG_NAMES.HTML, TAG_ID.HTML],\n    [TAG_NAMES.I, TAG_ID.I],\n    [TAG_NAMES.IMG, TAG_ID.IMG],\n    [TAG_NAMES.IMAGE, TAG_ID.IMAGE],\n    [TAG_NAMES.INPUT, TAG_ID.INPUT],\n    [TAG_NAMES.IFRAME, TAG_ID.IFRAME],\n    [TAG_NAMES.KEYGEN, TAG_ID.KEYGEN],\n    [TAG_NAMES.LABEL, TAG_ID.LABEL],\n    [TAG_NAMES.LI, TAG_ID.LI],\n    [TAG_NAMES.LINK, TAG_ID.LINK],\n    [TAG_NAMES.LISTING, TAG_ID.LISTING],\n    [TAG_NAMES.MAIN, TAG_ID.MAIN],\n    [TAG_NAMES.MALIGNMARK, TAG_ID.MALIGNMARK],\n    [TAG_NAMES.MARQUEE, TAG_ID.MARQUEE],\n    [TAG_NAMES.MATH, TAG_ID.MATH],\n    [TAG_NAMES.MENU, TAG_ID.MENU],\n    [TAG_NAMES.META, TAG_ID.META],\n    [TAG_NAMES.MGLYPH, TAG_ID.MGLYPH],\n    [TAG_NAMES.MI, TAG_ID.MI],\n    [TAG_NAMES.MO, TAG_ID.MO],\n    [TAG_NAMES.MN, TAG_ID.MN],\n    [TAG_NAMES.MS, TAG_ID.MS],\n    [TAG_NAMES.MTEXT, TAG_ID.MTEXT],\n    [TAG_NAMES.NAV, TAG_ID.NAV],\n    [TAG_NAMES.NOBR, TAG_ID.NOBR],\n    [TAG_NAMES.NOFRAMES, TAG_ID.NOFRAMES],\n    [TAG_NAMES.NOEMBED, TAG_ID.NOEMBED],\n    [TAG_NAMES.NOSCRIPT, TAG_ID.NOSCRIPT],\n    [TAG_NAMES.OBJECT, TAG_ID.OBJECT],\n    [TAG_NAMES.OL, TAG_ID.OL],\n    [TAG_NAMES.OPTGROUP, TAG_ID.OPTGROUP],\n    [TAG_NAMES.OPTION, TAG_ID.OPTION],\n    [TAG_NAMES.P, TAG_ID.P],\n    [TAG_NAMES.PARAM, TAG_ID.PARAM],\n    [TAG_NAMES.PLAINTEXT, TAG_ID.PLAINTEXT],\n    [TAG_NAMES.PRE, TAG_ID.PRE],\n    [TAG_NAMES.RB, TAG_ID.RB],\n    [TAG_NAMES.RP, TAG_ID.RP],\n    [TAG_NAMES.RT, TAG_ID.RT],\n    [TAG_NAMES.RTC, TAG_ID.RTC],\n    [TAG_NAMES.RUBY, TAG_ID.RUBY],\n    [TAG_NAMES.S, TAG_ID.S],\n    [TAG_NAMES.SCRIPT, TAG_ID.SCRIPT],\n    [TAG_NAMES.SEARCH, TAG_ID.SEARCH],\n    [TAG_NAMES.SECTION, TAG_ID.SECTION],\n    [TAG_NAMES.SELECT, TAG_ID.SELECT],\n    [TAG_NAMES.SOURCE, TAG_ID.SOURCE],\n    [TAG_NAMES.SMALL, TAG_ID.SMALL],\n    [TAG_NAMES.SPAN, TAG_ID.SPAN],\n    [TAG_NAMES.STRIKE, TAG_ID.STRIKE],\n    [TAG_NAMES.STRONG, TAG_ID.STRONG],\n    [TAG_NAMES.STYLE, TAG_ID.STYLE],\n    [TAG_NAMES.SUB, TAG_ID.SUB],\n    [TAG_NAMES.SUMMARY, TAG_ID.SUMMARY],\n    [TAG_NAMES.SUP, TAG_ID.SUP],\n    [TAG_NAMES.TABLE, TAG_ID.TABLE],\n    [TAG_NAMES.TBODY, TAG_ID.TBODY],\n    [TAG_NAMES.TEMPLATE, TAG_ID.TEMPLATE],\n    [TAG_NAMES.TEXTAREA, TAG_ID.TEXTAREA],\n    [TAG_NAMES.TFOOT, TAG_ID.TFOOT],\n    [TAG_NAMES.TD, TAG_ID.TD],\n    [TAG_NAMES.TH, TAG_ID.TH],\n    [TAG_NAMES.THEAD, TAG_ID.THEAD],\n    [TAG_NAMES.TITLE, TAG_ID.TITLE],\n    [TAG_NAMES.TR, TAG_ID.TR],\n    [TAG_NAMES.TRACK, TAG_ID.TRACK],\n    [TAG_NAMES.TT, TAG_ID.TT],\n    [TAG_NAMES.U, TAG_ID.U],\n    [TAG_NAMES.UL, TAG_ID.UL],\n    [TAG_NAMES.SVG, TAG_ID.SVG],\n    [TAG_NAMES.VAR, TAG_ID.VAR],\n    [TAG_NAMES.WBR, TAG_ID.WBR],\n    [TAG_NAMES.XMP, TAG_ID.XMP],\n]);\nexport function getTagID(tagName) {\n    var _a;\n    return (_a = TAG_NAME_TO_ID.get(tagName)) !== null && _a !== void 0 ? _a : TAG_ID.UNKNOWN;\n}\nconst $ = TAG_ID;\nexport const SPECIAL_ELEMENTS = {\n    [NS.HTML]: new Set([\n        $.ADDRESS,\n        $.APPLET,\n        $.AREA,\n        $.ARTICLE,\n        $.ASIDE,\n        $.BASE,\n        $.BASEFONT,\n        $.BGSOUND,\n        $.BLOCKQUOTE,\n        $.BODY,\n        $.BR,\n        $.BUTTON,\n        $.CAPTION,\n        $.CENTER,\n        $.COL,\n        $.COLGROUP,\n        $.DD,\n        $.DETAILS,\n        $.DIR,\n        $.DIV,\n        $.DL,\n        $.DT,\n        $.EMBED,\n        $.FIELDSET,\n        $.FIGCAPTION,\n        $.FIGURE,\n        $.FOOTER,\n        $.FORM,\n        $.FRAME,\n        $.FRAMESET,\n        $.H1,\n        $.H2,\n        $.H3,\n        $.H4,\n        $.H5,\n        $.H6,\n        $.HEAD,\n        $.HEADER,\n        $.HGROUP,\n        $.HR,\n        $.HTML,\n        $.IFRAME,\n        $.IMG,\n        $.INPUT,\n        $.LI,\n        $.LINK,\n        $.LISTING,\n        $.MAIN,\n        $.MARQUEE,\n        $.MENU,\n        $.META,\n        $.NAV,\n        $.NOEMBED,\n        $.NOFRAMES,\n        $.NOSCRIPT,\n        $.OBJECT,\n        $.OL,\n        $.P,\n        $.PARAM,\n        $.PLAINTEXT,\n        $.PRE,\n        $.SCRIPT,\n        $.SECTION,\n        $.SELECT,\n        $.SOURCE,\n        $.STYLE,\n        $.SUMMARY,\n        $.TABLE,\n        $.TBODY,\n        $.TD,\n        $.TEMPLATE,\n        $.TEXTAREA,\n        $.TFOOT,\n        $.TH,\n        $.THEAD,\n        $.TITLE,\n        $.TR,\n        $.TRACK,\n        $.UL,\n        $.WBR,\n        $.XMP,\n    ]),\n    [NS.MATHML]: new Set([$.MI, $.MO, $.MN, $.MS, $.MTEXT, $.ANNOTATION_XML]),\n    [NS.SVG]: new Set([$.TITLE, $.FOREIGN_OBJECT, $.DESC]),\n    [NS.XLINK]: new Set(),\n    [NS.XML]: new Set(),\n    [NS.XMLNS]: new Set(),\n};\nexport const NUMBERED_HEADERS = new Set([$.H1, $.H2, $.H3, $.H4, $.H5, $.H6]);\nconst UNESCAPED_TEXT = new Set([\n    TAG_NAMES.STYLE,\n    TAG_NAMES.SCRIPT,\n    TAG_NAMES.XMP,\n    TAG_NAMES.IFRAME,\n    TAG_NAMES.NOEMBED,\n    TAG_NAMES.NOFRAMES,\n    TAG_NAMES.PLAINTEXT,\n]);\nexport function hasUnescapedText(tn, scriptingEnabled) {\n    return UNESCAPED_TEXT.has(tn) || (scriptingEnabled && tn === TAG_NAMES.NOSCRIPT);\n}\n","import { Preprocessor } from './preprocessor.js';\nimport { CODE_POINTS as $, SEQUENCES as $$, REPLACEMENT_CHARACTER, isSurrogate, isUndefinedCodePoint, isControlCodePoint, } from '../common/unicode.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\nimport { htmlDecodeTree, EntityDecoder, DecodingMode } from 'entities/decode';\nimport { ERR } from '../common/error-codes.js';\nimport { TAG_ID, getTagID } from '../common/html.js';\n//States\nvar State;\n(function (State) {\n    State[State[\"DATA\"] = 0] = \"DATA\";\n    State[State[\"RCDATA\"] = 1] = \"RCDATA\";\n    State[State[\"RAWTEXT\"] = 2] = \"RAWTEXT\";\n    State[State[\"SCRIPT_DATA\"] = 3] = \"SCRIPT_DATA\";\n    State[State[\"PLAINTEXT\"] = 4] = \"PLAINTEXT\";\n    State[State[\"TAG_OPEN\"] = 5] = \"TAG_OPEN\";\n    State[State[\"END_TAG_OPEN\"] = 6] = \"END_TAG_OPEN\";\n    State[State[\"TAG_NAME\"] = 7] = \"TAG_NAME\";\n    State[State[\"RCDATA_LESS_THAN_SIGN\"] = 8] = \"RCDATA_LESS_THAN_SIGN\";\n    State[State[\"RCDATA_END_TAG_OPEN\"] = 9] = \"RCDATA_END_TAG_OPEN\";\n    State[State[\"RCDATA_END_TAG_NAME\"] = 10] = \"RCDATA_END_TAG_NAME\";\n    State[State[\"RAWTEXT_LESS_THAN_SIGN\"] = 11] = \"RAWTEXT_LESS_THAN_SIGN\";\n    State[State[\"RAWTEXT_END_TAG_OPEN\"] = 12] = \"RAWTEXT_END_TAG_OPEN\";\n    State[State[\"RAWTEXT_END_TAG_NAME\"] = 13] = \"RAWTEXT_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_LESS_THAN_SIGN\"] = 14] = \"SCRIPT_DATA_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_END_TAG_OPEN\"] = 15] = \"SCRIPT_DATA_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_END_TAG_NAME\"] = 16] = \"SCRIPT_DATA_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START\"] = 17] = \"SCRIPT_DATA_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_ESCAPE_START_DASH\"] = 18] = \"SCRIPT_DATA_ESCAPE_START_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED\"] = 19] = \"SCRIPT_DATA_ESCAPED\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH\"] = 20] = \"SCRIPT_DATA_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_DASH_DASH\"] = 21] = \"SCRIPT_DATA_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\"] = 22] = \"SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\"] = 23] = \"SCRIPT_DATA_ESCAPED_END_TAG_OPEN\";\n    State[State[\"SCRIPT_DATA_ESCAPED_END_TAG_NAME\"] = 24] = \"SCRIPT_DATA_ESCAPED_END_TAG_NAME\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_START\"] = 25] = \"SCRIPT_DATA_DOUBLE_ESCAPE_START\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED\"] = 26] = \"SCRIPT_DATA_DOUBLE_ESCAPED\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\"] = 27] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\"] = 28] = \"SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\"] = 29] = \"SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN\";\n    State[State[\"SCRIPT_DATA_DOUBLE_ESCAPE_END\"] = 30] = \"SCRIPT_DATA_DOUBLE_ESCAPE_END\";\n    State[State[\"BEFORE_ATTRIBUTE_NAME\"] = 31] = \"BEFORE_ATTRIBUTE_NAME\";\n    State[State[\"ATTRIBUTE_NAME\"] = 32] = \"ATTRIBUTE_NAME\";\n    State[State[\"AFTER_ATTRIBUTE_NAME\"] = 33] = \"AFTER_ATTRIBUTE_NAME\";\n    State[State[\"BEFORE_ATTRIBUTE_VALUE\"] = 34] = \"BEFORE_ATTRIBUTE_VALUE\";\n    State[State[\"ATTRIBUTE_VALUE_DOUBLE_QUOTED\"] = 35] = \"ATTRIBUTE_VALUE_DOUBLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_SINGLE_QUOTED\"] = 36] = \"ATTRIBUTE_VALUE_SINGLE_QUOTED\";\n    State[State[\"ATTRIBUTE_VALUE_UNQUOTED\"] = 37] = \"ATTRIBUTE_VALUE_UNQUOTED\";\n    State[State[\"AFTER_ATTRIBUTE_VALUE_QUOTED\"] = 38] = \"AFTER_ATTRIBUTE_VALUE_QUOTED\";\n    State[State[\"SELF_CLOSING_START_TAG\"] = 39] = \"SELF_CLOSING_START_TAG\";\n    State[State[\"BOGUS_COMMENT\"] = 40] = \"BOGUS_COMMENT\";\n    State[State[\"MARKUP_DECLARATION_OPEN\"] = 41] = \"MARKUP_DECLARATION_OPEN\";\n    State[State[\"COMMENT_START\"] = 42] = \"COMMENT_START\";\n    State[State[\"COMMENT_START_DASH\"] = 43] = \"COMMENT_START_DASH\";\n    State[State[\"COMMENT\"] = 44] = \"COMMENT\";\n    State[State[\"COMMENT_LESS_THAN_SIGN\"] = 45] = \"COMMENT_LESS_THAN_SIGN\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG\"] = 46] = \"COMMENT_LESS_THAN_SIGN_BANG\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH\"] = 47] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH\";\n    State[State[\"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\"] = 48] = \"COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH\";\n    State[State[\"COMMENT_END_DASH\"] = 49] = \"COMMENT_END_DASH\";\n    State[State[\"COMMENT_END\"] = 50] = \"COMMENT_END\";\n    State[State[\"COMMENT_END_BANG\"] = 51] = \"COMMENT_END_BANG\";\n    State[State[\"DOCTYPE\"] = 52] = \"DOCTYPE\";\n    State[State[\"BEFORE_DOCTYPE_NAME\"] = 53] = \"BEFORE_DOCTYPE_NAME\";\n    State[State[\"DOCTYPE_NAME\"] = 54] = \"DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_NAME\"] = 55] = \"AFTER_DOCTYPE_NAME\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_KEYWORD\"] = 56] = \"AFTER_DOCTYPE_PUBLIC_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\"] = 57] = \"BEFORE_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\"] = 58] = \"DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\"] = 59] = \"DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\"] = 60] = \"AFTER_DOCTYPE_PUBLIC_IDENTIFIER\";\n    State[State[\"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\"] = 61] = \"BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_KEYWORD\"] = 62] = \"AFTER_DOCTYPE_SYSTEM_KEYWORD\";\n    State[State[\"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\"] = 63] = \"BEFORE_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\"] = 64] = \"DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED\";\n    State[State[\"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\"] = 65] = \"DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED\";\n    State[State[\"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\"] = 66] = \"AFTER_DOCTYPE_SYSTEM_IDENTIFIER\";\n    State[State[\"BOGUS_DOCTYPE\"] = 67] = \"BOGUS_DOCTYPE\";\n    State[State[\"CDATA_SECTION\"] = 68] = \"CDATA_SECTION\";\n    State[State[\"CDATA_SECTION_BRACKET\"] = 69] = \"CDATA_SECTION_BRACKET\";\n    State[State[\"CDATA_SECTION_END\"] = 70] = \"CDATA_SECTION_END\";\n    State[State[\"CHARACTER_REFERENCE\"] = 71] = \"CHARACTER_REFERENCE\";\n    State[State[\"AMBIGUOUS_AMPERSAND\"] = 72] = \"AMBIGUOUS_AMPERSAND\";\n})(State || (State = {}));\n//Tokenizer initial states for different modes\nexport const TokenizerMode = {\n    DATA: State.DATA,\n    RCDATA: State.RCDATA,\n    RAWTEXT: State.RAWTEXT,\n    SCRIPT_DATA: State.SCRIPT_DATA,\n    PLAINTEXT: State.PLAINTEXT,\n    CDATA_SECTION: State.CDATA_SECTION,\n};\n//Utils\n//OPTIMIZATION: these utility functions should not be moved out of this module. V8 Crankshaft will not inline\n//this functions if they will be situated in another module due to context switch.\n//Always perform inlining check before modifying this functions ('node --trace-inlining').\nfunction isAsciiDigit(cp) {\n    return cp >= $.DIGIT_0 && cp <= $.DIGIT_9;\n}\nfunction isAsciiUpper(cp) {\n    return cp >= $.LATIN_CAPITAL_A && cp <= $.LATIN_CAPITAL_Z;\n}\nfunction isAsciiLower(cp) {\n    return cp >= $.LATIN_SMALL_A && cp <= $.LATIN_SMALL_Z;\n}\nfunction isAsciiLetter(cp) {\n    return isAsciiLower(cp) || isAsciiUpper(cp);\n}\nfunction isAsciiAlphaNumeric(cp) {\n    return isAsciiLetter(cp) || isAsciiDigit(cp);\n}\nfunction toAsciiLower(cp) {\n    return cp + 32;\n}\nfunction isWhitespace(cp) {\n    return cp === $.SPACE || cp === $.LINE_FEED || cp === $.TABULATION || cp === $.FORM_FEED;\n}\nfunction isScriptDataDoubleEscapeSequenceEnd(cp) {\n    return isWhitespace(cp) || cp === $.SOLIDUS || cp === $.GREATER_THAN_SIGN;\n}\nfunction getErrorForNumericCharacterReference(code) {\n    if (code === $.NULL) {\n        return ERR.nullCharacterReference;\n    }\n    else if (code > 1114111) {\n        return ERR.characterReferenceOutsideUnicodeRange;\n    }\n    else if (isSurrogate(code)) {\n        return ERR.surrogateCharacterReference;\n    }\n    else if (isUndefinedCodePoint(code)) {\n        return ERR.noncharacterCharacterReference;\n    }\n    else if (isControlCodePoint(code) || code === $.CARRIAGE_RETURN) {\n        return ERR.controlCharacterReference;\n    }\n    return null;\n}\n//Tokenizer\nexport class Tokenizer {\n    constructor(options, handler) {\n        this.options = options;\n        this.handler = handler;\n        this.paused = false;\n        /** Ensures that the parsing loop isn't run multiple times at once. */\n        this.inLoop = false;\n        /**\n         * Indicates that the current adjusted node exists, is not an element in the HTML namespace,\n         * and that it is not an integration point for either MathML or HTML.\n         *\n         * @see {@link https://html.spec.whatwg.org/multipage/parsing.html#tree-construction}\n         */\n        this.inForeignNode = false;\n        this.lastStartTagName = '';\n        this.active = false;\n        this.state = State.DATA;\n        this.returnState = State.DATA;\n        this.entityStartPos = 0;\n        this.consumedAfterSnapshot = -1;\n        this.currentCharacterToken = null;\n        this.currentToken = null;\n        this.currentAttr = { name: '', value: '' };\n        this.preprocessor = new Preprocessor(handler);\n        this.currentLocation = this.getCurrentLocation(-1);\n        this.entityDecoder = new EntityDecoder(htmlDecodeTree, (cp, consumed) => {\n            // Note: Set `pos` _before_ flushing, as flushing might drop\n            // the current chunk and invalidate `entityStartPos`.\n            this.preprocessor.pos = this.entityStartPos + consumed - 1;\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }, handler.onParseError\n            ? {\n                missingSemicolonAfterCharacterReference: () => {\n                    this._err(ERR.missingSemicolonAfterCharacterReference, 1);\n                },\n                absenceOfDigitsInNumericCharacterReference: (consumed) => {\n                    this._err(ERR.absenceOfDigitsInNumericCharacterReference, this.entityStartPos - this.preprocessor.pos + consumed);\n                },\n                validateNumericCharacterReference: (code) => {\n                    const error = getErrorForNumericCharacterReference(code);\n                    if (error)\n                        this._err(error, 1);\n                },\n            }\n            : undefined);\n    }\n    //Errors\n    _err(code, cpOffset = 0) {\n        var _a, _b;\n        (_b = (_a = this.handler).onParseError) === null || _b === void 0 ? void 0 : _b.call(_a, this.preprocessor.getError(code, cpOffset));\n    }\n    // NOTE: `offset` may never run across line boundaries.\n    getCurrentLocation(offset) {\n        if (!this.options.sourceCodeLocationInfo) {\n            return null;\n        }\n        return {\n            startLine: this.preprocessor.line,\n            startCol: this.preprocessor.col - offset,\n            startOffset: this.preprocessor.offset - offset,\n            endLine: -1,\n            endCol: -1,\n            endOffset: -1,\n        };\n    }\n    _runParsingLoop() {\n        if (this.inLoop)\n            return;\n        this.inLoop = true;\n        while (this.active && !this.paused) {\n            this.consumedAfterSnapshot = 0;\n            const cp = this._consume();\n            if (!this._ensureHibernation()) {\n                this._callState(cp);\n            }\n        }\n        this.inLoop = false;\n    }\n    //API\n    pause() {\n        this.paused = true;\n    }\n    resume(writeCallback) {\n        if (!this.paused) {\n            throw new Error('Parser was already resumed');\n        }\n        this.paused = false;\n        // Necessary for synchronous resume.\n        if (this.inLoop)\n            return;\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    write(chunk, isLastChunk, writeCallback) {\n        this.active = true;\n        this.preprocessor.write(chunk, isLastChunk);\n        this._runParsingLoop();\n        if (!this.paused) {\n            writeCallback === null || writeCallback === void 0 ? void 0 : writeCallback();\n        }\n    }\n    insertHtmlAtCurrentPos(chunk) {\n        this.active = true;\n        this.preprocessor.insertHtmlAtCurrentPos(chunk);\n        this._runParsingLoop();\n    }\n    //Hibernation\n    _ensureHibernation() {\n        if (this.preprocessor.endOfChunkHit) {\n            this.preprocessor.retreat(this.consumedAfterSnapshot);\n            this.consumedAfterSnapshot = 0;\n            this.active = false;\n            return true;\n        }\n        return false;\n    }\n    //Consumption\n    _consume() {\n        this.consumedAfterSnapshot++;\n        return this.preprocessor.advance();\n    }\n    _advanceBy(count) {\n        this.consumedAfterSnapshot += count;\n        for (let i = 0; i < count; i++) {\n            this.preprocessor.advance();\n        }\n    }\n    _consumeSequenceIfMatch(pattern, caseSensitive) {\n        if (this.preprocessor.startsWith(pattern, caseSensitive)) {\n            // We will already have consumed one character before calling this method.\n            this._advanceBy(pattern.length - 1);\n            return true;\n        }\n        return false;\n    }\n    //Token creation\n    _createStartTagToken() {\n        this.currentToken = {\n            type: TokenType.START_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(1),\n        };\n    }\n    _createEndTagToken() {\n        this.currentToken = {\n            type: TokenType.END_TAG,\n            tagName: '',\n            tagID: TAG_ID.UNKNOWN,\n            selfClosing: false,\n            ackSelfClosing: false,\n            attrs: [],\n            location: this.getCurrentLocation(2),\n        };\n    }\n    _createCommentToken(offset) {\n        this.currentToken = {\n            type: TokenType.COMMENT,\n            data: '',\n            location: this.getCurrentLocation(offset),\n        };\n    }\n    _createDoctypeToken(initialName) {\n        this.currentToken = {\n            type: TokenType.DOCTYPE,\n            name: initialName,\n            forceQuirks: false,\n            publicId: null,\n            systemId: null,\n            location: this.currentLocation,\n        };\n    }\n    _createCharacterToken(type, chars) {\n        this.currentCharacterToken = {\n            type,\n            chars,\n            location: this.currentLocation,\n        };\n    }\n    //Tag attributes\n    _createAttr(attrNameFirstCh) {\n        this.currentAttr = {\n            name: attrNameFirstCh,\n            value: '',\n        };\n        this.currentLocation = this.getCurrentLocation(0);\n    }\n    _leaveAttrName() {\n        var _a;\n        var _b;\n        const token = this.currentToken;\n        if (getTokenAttr(token, this.currentAttr.name) === null) {\n            token.attrs.push(this.currentAttr);\n            if (token.location && this.currentLocation) {\n                const attrLocations = ((_a = (_b = token.location).attrs) !== null && _a !== void 0 ? _a : (_b.attrs = Object.create(null)));\n                attrLocations[this.currentAttr.name] = this.currentLocation;\n                // Set end location\n                this._leaveAttrValue();\n            }\n        }\n        else {\n            this._err(ERR.duplicateAttribute);\n        }\n    }\n    _leaveAttrValue() {\n        if (this.currentLocation) {\n            this.currentLocation.endLine = this.preprocessor.line;\n            this.currentLocation.endCol = this.preprocessor.col;\n            this.currentLocation.endOffset = this.preprocessor.offset;\n        }\n    }\n    //Token emission\n    prepareToken(ct) {\n        this._emitCurrentCharacterToken(ct.location);\n        this.currentToken = null;\n        if (ct.location) {\n            ct.location.endLine = this.preprocessor.line;\n            ct.location.endCol = this.preprocessor.col + 1;\n            ct.location.endOffset = this.preprocessor.offset + 1;\n        }\n        this.currentLocation = this.getCurrentLocation(-1);\n    }\n    emitCurrentTagToken() {\n        const ct = this.currentToken;\n        this.prepareToken(ct);\n        ct.tagID = getTagID(ct.tagName);\n        if (ct.type === TokenType.START_TAG) {\n            this.lastStartTagName = ct.tagName;\n            this.handler.onStartTag(ct);\n        }\n        else {\n            if (ct.attrs.length > 0) {\n                this._err(ERR.endTagWithAttributes);\n            }\n            if (ct.selfClosing) {\n                this._err(ERR.endTagWithTrailingSolidus);\n            }\n            this.handler.onEndTag(ct);\n        }\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentComment(ct) {\n        this.prepareToken(ct);\n        this.handler.onComment(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    emitCurrentDoctype(ct) {\n        this.prepareToken(ct);\n        this.handler.onDoctype(ct);\n        this.preprocessor.dropParsedChunk();\n    }\n    _emitCurrentCharacterToken(nextLocation) {\n        if (this.currentCharacterToken) {\n            //NOTE: if we have a pending character token, make it's end location equal to the\n            //current token's start location.\n            if (nextLocation && this.currentCharacterToken.location) {\n                this.currentCharacterToken.location.endLine = nextLocation.startLine;\n                this.currentCharacterToken.location.endCol = nextLocation.startCol;\n                this.currentCharacterToken.location.endOffset = nextLocation.startOffset;\n            }\n            switch (this.currentCharacterToken.type) {\n                case TokenType.CHARACTER: {\n                    this.handler.onCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.NULL_CHARACTER: {\n                    this.handler.onNullCharacter(this.currentCharacterToken);\n                    break;\n                }\n                case TokenType.WHITESPACE_CHARACTER: {\n                    this.handler.onWhitespaceCharacter(this.currentCharacterToken);\n                    break;\n                }\n            }\n            this.currentCharacterToken = null;\n        }\n    }\n    _emitEOFToken() {\n        const location = this.getCurrentLocation(0);\n        if (location) {\n            location.endLine = location.startLine;\n            location.endCol = location.startCol;\n            location.endOffset = location.startOffset;\n        }\n        this._emitCurrentCharacterToken(location);\n        this.handler.onEof({ type: TokenType.EOF, location });\n        this.active = false;\n    }\n    //Characters emission\n    //OPTIMIZATION: The specification uses only one type of character token (one token per character).\n    //This causes a huge memory overhead and a lot of unnecessary parser loops. parse5 uses 3 groups of characters.\n    //If we have a sequence of characters that belong to the same group, the parser can process it\n    //as a single solid character token.\n    //So, there are 3 types of character tokens in parse5:\n    //1)TokenType.NULL_CHARACTER - \\u0000-character sequences (e.g. '\\u0000\\u0000\\u0000')\n    //2)TokenType.WHITESPACE_CHARACTER - any whitespace/new-line character sequences (e.g. '\\n  \\r\\t   \\f')\n    //3)TokenType.CHARACTER - any character sequence which don't belong to groups 1 and 2 (e.g. 'abcdef1234@@#$%^')\n    _appendCharToCurrentCharacterToken(type, ch) {\n        if (this.currentCharacterToken) {\n            if (this.currentCharacterToken.type === type) {\n                this.currentCharacterToken.chars += ch;\n                return;\n            }\n            else {\n                this.currentLocation = this.getCurrentLocation(0);\n                this._emitCurrentCharacterToken(this.currentLocation);\n                this.preprocessor.dropParsedChunk();\n            }\n        }\n        this._createCharacterToken(type, ch);\n    }\n    _emitCodePoint(cp) {\n        const type = isWhitespace(cp)\n            ? TokenType.WHITESPACE_CHARACTER\n            : cp === $.NULL\n                ? TokenType.NULL_CHARACTER\n                : TokenType.CHARACTER;\n        this._appendCharToCurrentCharacterToken(type, String.fromCodePoint(cp));\n    }\n    //NOTE: used when we emit characters explicitly.\n    //This is always for non-whitespace and non-null characters, which allows us to avoid additional checks.\n    _emitChars(ch) {\n        this._appendCharToCurrentCharacterToken(TokenType.CHARACTER, ch);\n    }\n    // Character reference helpers\n    _startCharacterReference() {\n        this.returnState = this.state;\n        this.state = State.CHARACTER_REFERENCE;\n        this.entityStartPos = this.preprocessor.pos;\n        this.entityDecoder.startEntity(this._isCharacterReferenceInAttribute() ? DecodingMode.Attribute : DecodingMode.Legacy);\n    }\n    _isCharacterReferenceInAttribute() {\n        return (this.returnState === State.ATTRIBUTE_VALUE_DOUBLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_SINGLE_QUOTED ||\n            this.returnState === State.ATTRIBUTE_VALUE_UNQUOTED);\n    }\n    _flushCodePointConsumedAsCharacterReference(cp) {\n        if (this._isCharacterReferenceInAttribute()) {\n            this.currentAttr.value += String.fromCodePoint(cp);\n        }\n        else {\n            this._emitCodePoint(cp);\n        }\n    }\n    // Calling states this way turns out to be much faster than any other approach.\n    _callState(cp) {\n        switch (this.state) {\n            case State.DATA: {\n                this._stateData(cp);\n                break;\n            }\n            case State.RCDATA: {\n                this._stateRcdata(cp);\n                break;\n            }\n            case State.RAWTEXT: {\n                this._stateRawtext(cp);\n                break;\n            }\n            case State.SCRIPT_DATA: {\n                this._stateScriptData(cp);\n                break;\n            }\n            case State.PLAINTEXT: {\n                this._statePlaintext(cp);\n                break;\n            }\n            case State.TAG_OPEN: {\n                this._stateTagOpen(cp);\n                break;\n            }\n            case State.END_TAG_OPEN: {\n                this._stateEndTagOpen(cp);\n                break;\n            }\n            case State.TAG_NAME: {\n                this._stateTagName(cp);\n                break;\n            }\n            case State.RCDATA_LESS_THAN_SIGN: {\n                this._stateRcdataLessThanSign(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_OPEN: {\n                this._stateRcdataEndTagOpen(cp);\n                break;\n            }\n            case State.RCDATA_END_TAG_NAME: {\n                this._stateRcdataEndTagName(cp);\n                break;\n            }\n            case State.RAWTEXT_LESS_THAN_SIGN: {\n                this._stateRawtextLessThanSign(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_OPEN: {\n                this._stateRawtextEndTagOpen(cp);\n                break;\n            }\n            case State.RAWTEXT_END_TAG_NAME: {\n                this._stateRawtextEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_LESS_THAN_SIGN: {\n                this._stateScriptDataLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_OPEN: {\n                this._stateScriptDataEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_END_TAG_NAME: {\n                this._stateScriptDataEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START: {\n                this._stateScriptDataEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPE_START_DASH: {\n                this._stateScriptDataEscapeStartDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED: {\n                this._stateScriptDataEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH: {\n                this._stateScriptDataEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_DASH_DASH: {\n                this._stateScriptDataEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN: {\n                this._stateScriptDataEscapedEndTagOpen(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_ESCAPED_END_TAG_NAME: {\n                this._stateScriptDataEscapedEndTagName(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_START: {\n                this._stateScriptDataDoubleEscapeStart(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED: {\n                this._stateScriptDataDoubleEscaped(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH: {\n                this._stateScriptDataDoubleEscapedDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH: {\n                this._stateScriptDataDoubleEscapedDashDash(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN: {\n                this._stateScriptDataDoubleEscapedLessThanSign(cp);\n                break;\n            }\n            case State.SCRIPT_DATA_DOUBLE_ESCAPE_END: {\n                this._stateScriptDataDoubleEscapeEnd(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_NAME: {\n                this._stateBeforeAttributeName(cp);\n                break;\n            }\n            case State.ATTRIBUTE_NAME: {\n                this._stateAttributeName(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_NAME: {\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case State.BEFORE_ATTRIBUTE_VALUE: {\n                this._stateBeforeAttributeValue(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_DOUBLE_QUOTED: {\n                this._stateAttributeValueDoubleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_SINGLE_QUOTED: {\n                this._stateAttributeValueSingleQuoted(cp);\n                break;\n            }\n            case State.ATTRIBUTE_VALUE_UNQUOTED: {\n                this._stateAttributeValueUnquoted(cp);\n                break;\n            }\n            case State.AFTER_ATTRIBUTE_VALUE_QUOTED: {\n                this._stateAfterAttributeValueQuoted(cp);\n                break;\n            }\n            case State.SELF_CLOSING_START_TAG: {\n                this._stateSelfClosingStartTag(cp);\n                break;\n            }\n            case State.BOGUS_COMMENT: {\n                this._stateBogusComment(cp);\n                break;\n            }\n            case State.MARKUP_DECLARATION_OPEN: {\n                this._stateMarkupDeclarationOpen(cp);\n                break;\n            }\n            case State.COMMENT_START: {\n                this._stateCommentStart(cp);\n                break;\n            }\n            case State.COMMENT_START_DASH: {\n                this._stateCommentStartDash(cp);\n                break;\n            }\n            case State.COMMENT: {\n                this._stateComment(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN: {\n                this._stateCommentLessThanSign(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG: {\n                this._stateCommentLessThanSignBang(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH: {\n                this._stateCommentLessThanSignBangDash(cp);\n                break;\n            }\n            case State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH: {\n                this._stateCommentLessThanSignBangDashDash(cp);\n                break;\n            }\n            case State.COMMENT_END_DASH: {\n                this._stateCommentEndDash(cp);\n                break;\n            }\n            case State.COMMENT_END: {\n                this._stateCommentEnd(cp);\n                break;\n            }\n            case State.COMMENT_END_BANG: {\n                this._stateCommentEndBang(cp);\n                break;\n            }\n            case State.DOCTYPE: {\n                this._stateDoctype(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_NAME: {\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case State.DOCTYPE_NAME: {\n                this._stateDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_NAME: {\n                this._stateAfterDoctypeName(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_KEYWORD: {\n                this._stateAfterDoctypePublicKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateBeforeDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypePublicIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypePublicIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER: {\n                this._stateAfterDoctypePublicIdentifier(cp);\n                break;\n            }\n            case State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS: {\n                this._stateBetweenDoctypePublicAndSystemIdentifiers(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_KEYWORD: {\n                this._stateAfterDoctypeSystemKeyword(cp);\n                break;\n            }\n            case State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateBeforeDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierDoubleQuoted(cp);\n                break;\n            }\n            case State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED: {\n                this._stateDoctypeSystemIdentifierSingleQuoted(cp);\n                break;\n            }\n            case State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER: {\n                this._stateAfterDoctypeSystemIdentifier(cp);\n                break;\n            }\n            case State.BOGUS_DOCTYPE: {\n                this._stateBogusDoctype(cp);\n                break;\n            }\n            case State.CDATA_SECTION: {\n                this._stateCdataSection(cp);\n                break;\n            }\n            case State.CDATA_SECTION_BRACKET: {\n                this._stateCdataSectionBracket(cp);\n                break;\n            }\n            case State.CDATA_SECTION_END: {\n                this._stateCdataSectionEnd(cp);\n                break;\n            }\n            case State.CHARACTER_REFERENCE: {\n                this._stateCharacterReference();\n                break;\n            }\n            case State.AMBIGUOUS_AMPERSAND: {\n                this._stateAmbiguousAmpersand(cp);\n                break;\n            }\n            default: {\n                throw new Error('Unknown state');\n            }\n        }\n    }\n    // State machine\n    // Data state\n    //------------------------------------------------------------------\n    _stateData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.TAG_OPEN;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    //  RCDATA state\n    //------------------------------------------------------------------\n    _stateRcdata(cp) {\n        switch (cp) {\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RCDATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // RAWTEXT state\n    //------------------------------------------------------------------\n    _stateRawtext(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.RAWTEXT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data state\n    //------------------------------------------------------------------\n    _stateScriptData(cp) {\n        switch (cp) {\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // PLAINTEXT state\n    //------------------------------------------------------------------\n    _statePlaintext(cp) {\n        switch (cp) {\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Tag open state\n    //------------------------------------------------------------------\n    _stateTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createStartTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.EXCLAMATION_MARK: {\n                    this.state = State.MARKUP_DECLARATION_OPEN;\n                    break;\n                }\n                case $.SOLIDUS: {\n                    this.state = State.END_TAG_OPEN;\n                    break;\n                }\n                case $.QUESTION_MARK: {\n                    this._err(ERR.unexpectedQuestionMarkInsteadOfTagName);\n                    this._createCommentToken(1);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('<');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._emitChars('<');\n                    this.state = State.DATA;\n                    this._stateData(cp);\n                }\n            }\n    }\n    // End tag open state\n    //------------------------------------------------------------------\n    _stateEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this._createEndTagToken();\n            this.state = State.TAG_NAME;\n            this._stateTagName(cp);\n        }\n        else\n            switch (cp) {\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingEndTagName);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofBeforeTagName);\n                    this._emitChars('</');\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._err(ERR.invalidFirstCharacterOfTagName);\n                    this._createCommentToken(2);\n                    this.state = State.BOGUS_COMMENT;\n                    this._stateBogusComment(cp);\n                }\n            }\n    }\n    // Tag name state\n    //------------------------------------------------------------------\n    _stateTagName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.tagName += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.tagName += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // RCDATA less-than sign state\n    //------------------------------------------------------------------\n    _stateRcdataLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RCDATA_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RCDATA end tag open state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RCDATA_END_TAG_NAME;\n            this._stateRcdataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    handleSpecialEndTag(_cp) {\n        if (!this.preprocessor.startsWith(this.lastStartTagName, false)) {\n            return !this._ensureHibernation();\n        }\n        this._createEndTagToken();\n        const token = this.currentToken;\n        token.tagName = this.lastStartTagName;\n        const cp = this.preprocessor.peek(this.lastStartTagName.length);\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                return false;\n            }\n            case $.SOLIDUS: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.state = State.SELF_CLOSING_START_TAG;\n                return false;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._advanceBy(this.lastStartTagName.length);\n                this.emitCurrentTagToken();\n                this.state = State.DATA;\n                return false;\n            }\n            default: {\n                return !this._ensureHibernation();\n            }\n        }\n    }\n    // RCDATA end tag name state\n    //------------------------------------------------------------------\n    _stateRcdataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RCDATA;\n            this._stateRcdata(cp);\n        }\n    }\n    // RAWTEXT less-than sign state\n    //------------------------------------------------------------------\n    _stateRawtextLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.RAWTEXT_END_TAG_OPEN;\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag open state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.RAWTEXT_END_TAG_NAME;\n            this._stateRawtextEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // RAWTEXT end tag name state\n    //------------------------------------------------------------------\n    _stateRawtextEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.RAWTEXT;\n            this._stateRawtext(cp);\n        }\n    }\n    // Script data less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataLessThanSign(cp) {\n        switch (cp) {\n            case $.SOLIDUS: {\n                this.state = State.SCRIPT_DATA_END_TAG_OPEN;\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.SCRIPT_DATA_ESCAPE_START;\n                this._emitChars('<!');\n                break;\n            }\n            default: {\n                this._emitChars('<');\n                this.state = State.SCRIPT_DATA;\n                this._stateScriptData(cp);\n            }\n        }\n    }\n    // Script data end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_END_TAG_NAME;\n            this._stateScriptDataEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStart(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPE_START_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escape start dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapeStartDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n            this._emitChars('-');\n        }\n        else {\n            this.state = State.SCRIPT_DATA;\n            this._stateScriptData(cp);\n        }\n    }\n    // Script data escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_OPEN;\n        }\n        else if (isAsciiLetter(cp)) {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_START;\n            this._stateScriptDataDoubleEscapeStart(cp);\n        }\n        else {\n            this._emitChars('<');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag open state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagOpen(cp) {\n        if (isAsciiLetter(cp)) {\n            this.state = State.SCRIPT_DATA_ESCAPED_END_TAG_NAME;\n            this._stateScriptDataEscapedEndTagName(cp);\n        }\n        else {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data escaped end tag name state\n    //------------------------------------------------------------------\n    _stateScriptDataEscapedEndTagName(cp) {\n        if (this.handleSpecialEndTag(cp)) {\n            this._emitChars('</');\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escape start state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeStart(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_ESCAPED;\n            this._stateScriptDataEscaped(cp);\n        }\n    }\n    // Script data double escaped state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscaped(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH;\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped dash dash state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedDashDash(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this._emitChars('-');\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN;\n                this._emitChars('<');\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.SCRIPT_DATA;\n                this._emitChars('>');\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitChars(REPLACEMENT_CHARACTER);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInScriptHtmlCommentLikeText);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // Script data double escaped less-than sign state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapedLessThanSign(cp) {\n        if (cp === $.SOLIDUS) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPE_END;\n            this._emitChars('/');\n        }\n        else {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Script data double escape end state\n    //------------------------------------------------------------------\n    _stateScriptDataDoubleEscapeEnd(cp) {\n        if (this.preprocessor.startsWith($$.SCRIPT, false) &&\n            isScriptDataDoubleEscapeSequenceEnd(this.preprocessor.peek($$.SCRIPT.length))) {\n            this._emitCodePoint(cp);\n            for (let i = 0; i < $$.SCRIPT.length; i++) {\n                this._emitCodePoint(this._consume());\n            }\n            this.state = State.SCRIPT_DATA_ESCAPED;\n        }\n        else if (!this._ensureHibernation()) {\n            this.state = State.SCRIPT_DATA_DOUBLE_ESCAPED;\n            this._stateScriptDataDoubleEscaped(cp);\n        }\n    }\n    // Before attribute name state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._err(ERR.unexpectedEqualsSignBeforeAttributeName);\n                this._createAttr('=');\n                this.state = State.ATTRIBUTE_NAME;\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Attribute name state\n    //------------------------------------------------------------------\n    _stateAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED:\n            case $.SOLIDUS:\n            case $.GREATER_THAN_SIGN:\n            case $.EOF: {\n                this._leaveAttrName();\n                this.state = State.AFTER_ATTRIBUTE_NAME;\n                this._stateAfterAttributeName(cp);\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this._leaveAttrName();\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN: {\n                this._err(ERR.unexpectedCharacterInAttributeName);\n                this.currentAttr.name += String.fromCodePoint(cp);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                this.currentAttr.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After attribute name state\n    //------------------------------------------------------------------\n    _stateAfterAttributeName(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.SOLIDUS: {\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.EQUALS_SIGN: {\n                this.state = State.BEFORE_ATTRIBUTE_VALUE;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._createAttr('');\n                this.state = State.ATTRIBUTE_NAME;\n                this._stateAttributeName(cp);\n            }\n        }\n    }\n    // Before attribute value state\n    //------------------------------------------------------------------\n    _stateBeforeAttributeValue(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this.state = State.ATTRIBUTE_VALUE_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this.state = State.ATTRIBUTE_VALUE_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingAttributeValue);\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            default: {\n                this.state = State.ATTRIBUTE_VALUE_UNQUOTED;\n                this._stateAttributeValueUnquoted(cp);\n            }\n        }\n    }\n    // Attribute value (double-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueDoubleQuoted(cp) {\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (single-quoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueSingleQuoted(cp) {\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_ATTRIBUTE_VALUE_QUOTED;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Attribute value (unquoted) state\n    //------------------------------------------------------------------\n    _stateAttributeValueUnquoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.AMPERSAND: {\n                this._startCharacterReference();\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                this.currentAttr.value += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.QUOTATION_MARK:\n            case $.APOSTROPHE:\n            case $.LESS_THAN_SIGN:\n            case $.EQUALS_SIGN:\n            case $.GRAVE_ACCENT: {\n                this._err(ERR.unexpectedCharacterInUnquotedAttributeValue);\n                this.currentAttr.value += String.fromCodePoint(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this.currentAttr.value += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After attribute value (quoted) state\n    //------------------------------------------------------------------\n    _stateAfterAttributeValueQuoted(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this._leaveAttrValue();\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                break;\n            }\n            case $.SOLIDUS: {\n                this._leaveAttrValue();\n                this.state = State.SELF_CLOSING_START_TAG;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._leaveAttrValue();\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBetweenAttributes);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Self-closing start tag state\n    //------------------------------------------------------------------\n    _stateSelfClosingStartTag(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                const token = this.currentToken;\n                token.selfClosing = true;\n                this.state = State.DATA;\n                this.emitCurrentTagToken();\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInTag);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedSolidusInTag);\n                this.state = State.BEFORE_ATTRIBUTE_NAME;\n                this._stateBeforeAttributeName(cp);\n            }\n        }\n    }\n    // Bogus comment state\n    //------------------------------------------------------------------\n    _stateBogusComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Markup declaration open state\n    //------------------------------------------------------------------\n    _stateMarkupDeclarationOpen(cp) {\n        if (this._consumeSequenceIfMatch($$.DASH_DASH, true)) {\n            this._createCommentToken($$.DASH_DASH.length + 1);\n            this.state = State.COMMENT_START;\n        }\n        else if (this._consumeSequenceIfMatch($$.DOCTYPE, false)) {\n            // NOTE: Doctypes tokens are created without fixed offsets. We keep track of the moment a doctype *might* start here.\n            this.currentLocation = this.getCurrentLocation($$.DOCTYPE.length + 1);\n            this.state = State.DOCTYPE;\n        }\n        else if (this._consumeSequenceIfMatch($$.CDATA_START, true)) {\n            if (this.inForeignNode) {\n                this.state = State.CDATA_SECTION;\n            }\n            else {\n                this._err(ERR.cdataInHtmlContent);\n                this._createCommentToken($$.CDATA_START.length + 1);\n                this.currentToken.data = '[CDATA[';\n                this.state = State.BOGUS_COMMENT;\n            }\n        }\n        //NOTE: Sequence lookups can be abrupted by hibernation. In that case, lookup\n        //results are no longer valid and we will need to start over.\n        else if (!this._ensureHibernation()) {\n            this._err(ERR.incorrectlyOpenedComment);\n            this._createCommentToken(2);\n            this.state = State.BOGUS_COMMENT;\n            this._stateBogusComment(cp);\n        }\n    }\n    // Comment start state\n    //------------------------------------------------------------------\n    _stateCommentStart(cp) {\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_START_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                const token = this.currentToken;\n                this.emitCurrentComment(token);\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment start dash state\n    //------------------------------------------------------------------\n    _stateCommentStartDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptClosingOfEmptyComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment state\n    //------------------------------------------------------------------\n    _stateComment(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                this.state = State.COMMENT_LESS_THAN_SIGN;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.data += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // Comment less-than sign state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSign(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.EXCLAMATION_MARK: {\n                token.data += '!';\n                this.state = State.COMMENT_LESS_THAN_SIGN_BANG;\n                break;\n            }\n            case $.LESS_THAN_SIGN: {\n                token.data += '<';\n                break;\n            }\n            default: {\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment less-than sign bang state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBang(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH;\n        }\n        else {\n            this.state = State.COMMENT;\n            this._stateComment(cp);\n        }\n    }\n    // Comment less-than sign bang dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDash(cp) {\n        if (cp === $.HYPHEN_MINUS) {\n            this.state = State.COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH;\n        }\n        else {\n            this.state = State.COMMENT_END_DASH;\n            this._stateCommentEndDash(cp);\n        }\n    }\n    // Comment less-than sign bang dash dash state\n    //------------------------------------------------------------------\n    _stateCommentLessThanSignBangDashDash(cp) {\n        if (cp !== $.GREATER_THAN_SIGN && cp !== $.EOF) {\n            this._err(ERR.nestedComment);\n        }\n        this.state = State.COMMENT_END;\n        this._stateCommentEnd(cp);\n    }\n    // Comment end dash state\n    //------------------------------------------------------------------\n    _stateCommentEndDash(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                this.state = State.COMMENT_END;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '-';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end state\n    //------------------------------------------------------------------\n    _stateCommentEnd(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EXCLAMATION_MARK: {\n                this.state = State.COMMENT_END_BANG;\n                break;\n            }\n            case $.HYPHEN_MINUS: {\n                token.data += '-';\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // Comment end bang state\n    //------------------------------------------------------------------\n    _stateCommentEndBang(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.HYPHEN_MINUS: {\n                token.data += '--!';\n                this.state = State.COMMENT_END_DASH;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.incorrectlyClosedComment);\n                this.state = State.DATA;\n                this.emitCurrentComment(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInComment);\n                this.emitCurrentComment(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.data += '--!';\n                this.state = State.COMMENT;\n                this._stateComment(cp);\n            }\n        }\n    }\n    // DOCTYPE state\n    //------------------------------------------------------------------\n    _stateDoctype(cp) {\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                this._createDoctypeToken(null);\n                const token = this.currentToken;\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingWhitespaceBeforeDoctypeName);\n                this.state = State.BEFORE_DOCTYPE_NAME;\n                this._stateBeforeDoctypeName(cp);\n            }\n        }\n    }\n    // Before DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeName(cp) {\n        if (isAsciiUpper(cp)) {\n            this._createDoctypeToken(String.fromCharCode(toAsciiLower(cp)));\n            this.state = State.DOCTYPE_NAME;\n        }\n        else\n            switch (cp) {\n                case $.SPACE:\n                case $.LINE_FEED:\n                case $.TABULATION:\n                case $.FORM_FEED: {\n                    // Ignore whitespace\n                    break;\n                }\n                case $.NULL: {\n                    this._err(ERR.unexpectedNullCharacter);\n                    this._createDoctypeToken(REPLACEMENT_CHARACTER);\n                    this.state = State.DOCTYPE_NAME;\n                    break;\n                }\n                case $.GREATER_THAN_SIGN: {\n                    this._err(ERR.missingDoctypeName);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this.state = State.DATA;\n                    break;\n                }\n                case $.EOF: {\n                    this._err(ERR.eofInDoctype);\n                    this._createDoctypeToken(null);\n                    const token = this.currentToken;\n                    token.forceQuirks = true;\n                    this.emitCurrentDoctype(token);\n                    this._emitEOFToken();\n                    break;\n                }\n                default: {\n                    this._createDoctypeToken(String.fromCodePoint(cp));\n                    this.state = State.DOCTYPE_NAME;\n                }\n            }\n    }\n    // DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.AFTER_DOCTYPE_NAME;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.name += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.name += String.fromCodePoint(isAsciiUpper(cp) ? toAsciiLower(cp) : cp);\n            }\n        }\n    }\n    // After DOCTYPE name state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeName(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                if (this._consumeSequenceIfMatch($$.PUBLIC, false)) {\n                    this.state = State.AFTER_DOCTYPE_PUBLIC_KEYWORD;\n                }\n                else if (this._consumeSequenceIfMatch($$.SYSTEM, false)) {\n                    this.state = State.AFTER_DOCTYPE_SYSTEM_KEYWORD;\n                }\n                //NOTE: sequence lookup can be abrupted by hibernation. In that case lookup\n                //results are no longer valid and we will need to start over.\n                else if (!this._ensureHibernation()) {\n                    this._err(ERR.invalidCharacterSequenceAfterDoctypeName);\n                    token.forceQuirks = true;\n                    this.state = State.BOGUS_DOCTYPE;\n                    this._stateBogusDoctype(cp);\n                }\n            }\n        }\n    }\n    // After DOCTYPE public keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypePublicKeyword);\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.publicId = '';\n                this.state = State.DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE public identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypePublicIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_PUBLIC_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.publicId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypePublicIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.publicId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE public identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypePublicIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Between DOCTYPE public and system identifiers state\n    //------------------------------------------------------------------\n    _stateBetweenDoctypePublicAndSystemIdentifiers(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // After DOCTYPE system keyword state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemKeyword(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                this.state = State.BEFORE_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                this._err(ERR.missingWhitespaceAfterDoctypeSystemKeyword);\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Before DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateBeforeDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.QUOTATION_MARK: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED;\n                break;\n            }\n            case $.APOSTROPHE: {\n                token.systemId = '';\n                this.state = State.DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.missingDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.DATA;\n                this.emitCurrentDoctype(token);\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.missingQuoteBeforeDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (double-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierDoubleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.QUOTATION_MARK: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // DOCTYPE system identifier (single-quoted) state\n    //------------------------------------------------------------------\n    _stateDoctypeSystemIdentifierSingleQuoted(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.APOSTROPHE: {\n                this.state = State.AFTER_DOCTYPE_SYSTEM_IDENTIFIER;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                token.systemId += REPLACEMENT_CHARACTER;\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this._err(ERR.abruptDoctypeSystemIdentifier);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                token.systemId += String.fromCodePoint(cp);\n            }\n        }\n    }\n    // After DOCTYPE system identifier state\n    //------------------------------------------------------------------\n    _stateAfterDoctypeSystemIdentifier(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.SPACE:\n            case $.LINE_FEED:\n            case $.TABULATION:\n            case $.FORM_FEED: {\n                // Ignore whitespace\n                break;\n            }\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInDoctype);\n                token.forceQuirks = true;\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._err(ERR.unexpectedCharacterAfterDoctypeSystemIdentifier);\n                this.state = State.BOGUS_DOCTYPE;\n                this._stateBogusDoctype(cp);\n            }\n        }\n    }\n    // Bogus DOCTYPE state\n    //------------------------------------------------------------------\n    _stateBogusDoctype(cp) {\n        const token = this.currentToken;\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.emitCurrentDoctype(token);\n                this.state = State.DATA;\n                break;\n            }\n            case $.NULL: {\n                this._err(ERR.unexpectedNullCharacter);\n                break;\n            }\n            case $.EOF: {\n                this.emitCurrentDoctype(token);\n                this._emitEOFToken();\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    // CDATA section state\n    //------------------------------------------------------------------\n    _stateCdataSection(cp) {\n        switch (cp) {\n            case $.RIGHT_SQUARE_BRACKET: {\n                this.state = State.CDATA_SECTION_BRACKET;\n                break;\n            }\n            case $.EOF: {\n                this._err(ERR.eofInCdata);\n                this._emitEOFToken();\n                break;\n            }\n            default: {\n                this._emitCodePoint(cp);\n            }\n        }\n    }\n    // CDATA section bracket state\n    //------------------------------------------------------------------\n    _stateCdataSectionBracket(cp) {\n        if (cp === $.RIGHT_SQUARE_BRACKET) {\n            this.state = State.CDATA_SECTION_END;\n        }\n        else {\n            this._emitChars(']');\n            this.state = State.CDATA_SECTION;\n            this._stateCdataSection(cp);\n        }\n    }\n    // CDATA section end state\n    //------------------------------------------------------------------\n    _stateCdataSectionEnd(cp) {\n        switch (cp) {\n            case $.GREATER_THAN_SIGN: {\n                this.state = State.DATA;\n                break;\n            }\n            case $.RIGHT_SQUARE_BRACKET: {\n                this._emitChars(']');\n                break;\n            }\n            default: {\n                this._emitChars(']]');\n                this.state = State.CDATA_SECTION;\n                this._stateCdataSection(cp);\n            }\n        }\n    }\n    // Character reference state\n    //------------------------------------------------------------------\n    _stateCharacterReference() {\n        let length = this.entityDecoder.write(this.preprocessor.html, this.preprocessor.pos);\n        if (length < 0) {\n            if (this.preprocessor.lastChunkWritten) {\n                length = this.entityDecoder.end();\n            }\n            else {\n                // Wait for the rest of the entity.\n                this.active = false;\n                // Mark the entire buffer as read.\n                this.preprocessor.pos = this.preprocessor.html.length - 1;\n                this.consumedAfterSnapshot = 0;\n                this.preprocessor.endOfChunkHit = true;\n                return;\n            }\n        }\n        if (length === 0) {\n            // This was not a valid entity. Go back to the beginning, and\n            // figure out what to do.\n            this.preprocessor.pos = this.entityStartPos;\n            this._flushCodePointConsumedAsCharacterReference($.AMPERSAND);\n            this.state =\n                !this._isCharacterReferenceInAttribute() && isAsciiAlphaNumeric(this.preprocessor.peek(1))\n                    ? State.AMBIGUOUS_AMPERSAND\n                    : this.returnState;\n        }\n        else {\n            // We successfully parsed an entity. Switch to the return state.\n            this.state = this.returnState;\n        }\n    }\n    // Ambiguos ampersand state\n    //------------------------------------------------------------------\n    _stateAmbiguousAmpersand(cp) {\n        if (isAsciiAlphaNumeric(cp)) {\n            this._flushCodePointConsumedAsCharacterReference(cp);\n        }\n        else {\n            if (cp === $.SEMICOLON) {\n                this._err(ERR.unknownNamedCharacterReference);\n            }\n            this.state = this.returnState;\n            this._callState(cp);\n        }\n    }\n}\n","import { TAG_ID as $, NS, NUMBERED_HEADERS } from '../common/html.js';\n//Element utils\nconst IMPLICIT_END_TAG_REQUIRED = new Set([$.DD, $.DT, $.LI, $.OPTGROUP, $.OPTION, $.P, $.RB, $.RP, $.RT, $.RTC]);\nconst IMPLICIT_END_TAG_REQUIRED_THOROUGHLY = new Set([\n    ...IMPLICIT_END_TAG_REQUIRED,\n    $.CAPTION,\n    $.COLGROUP,\n    $.TBODY,\n    $.TD,\n    $.TFOOT,\n    $.TH,\n    $.THEAD,\n    $.TR,\n]);\nconst SCOPING_ELEMENTS_HTML = new Set([\n    $.APPLET,\n    $.CAPTION,\n    $.HTML,\n    $.MARQUEE,\n    $.OBJECT,\n    $.TABLE,\n    $.TD,\n    $.TEMPLATE,\n    $.TH,\n]);\nconst SCOPING_ELEMENTS_HTML_LIST = new Set([...SCOPING_ELEMENTS_HTML, $.OL, $.UL]);\nconst SCOPING_ELEMENTS_HTML_BUTTON = new Set([...SCOPING_ELEMENTS_HTML, $.BUTTON]);\nconst SCOPING_ELEMENTS_MATHML = new Set([$.ANNOTATION_XML, $.MI, $.MN, $.MO, $.MS, $.MTEXT]);\nconst SCOPING_ELEMENTS_SVG = new Set([$.DESC, $.FOREIGN_OBJECT, $.TITLE]);\nconst TABLE_ROW_CONTEXT = new Set([$.TR, $.TEMPLATE, $.HTML]);\nconst TABLE_BODY_CONTEXT = new Set([$.TBODY, $.TFOOT, $.THEAD, $.TEMPLATE, $.HTML]);\nconst TABLE_CONTEXT = new Set([$.TABLE, $.TEMPLATE, $.HTML]);\nconst TABLE_CELLS = new Set([$.TD, $.TH]);\n//Stack of open elements\nexport class OpenElementStack {\n    get currentTmplContentOrNode() {\n        return this._isInTemplate() ? this.treeAdapter.getTemplateContent(this.current) : this.current;\n    }\n    constructor(document, treeAdapter, handler) {\n        this.treeAdapter = treeAdapter;\n        this.handler = handler;\n        this.items = [];\n        this.tagIDs = [];\n        this.stackTop = -1;\n        this.tmplCount = 0;\n        this.currentTagId = $.UNKNOWN;\n        this.current = document;\n    }\n    //Index of element\n    _indexOf(element) {\n        return this.items.lastIndexOf(element, this.stackTop);\n    }\n    //Update current element\n    _isInTemplate() {\n        return this.currentTagId === $.TEMPLATE && this.treeAdapter.getNamespaceURI(this.current) === NS.HTML;\n    }\n    _updateCurrentElement() {\n        this.current = this.items[this.stackTop];\n        this.currentTagId = this.tagIDs[this.stackTop];\n    }\n    //Mutations\n    push(element, tagID) {\n        this.stackTop++;\n        this.items[this.stackTop] = element;\n        this.current = element;\n        this.tagIDs[this.stackTop] = tagID;\n        this.currentTagId = tagID;\n        if (this._isInTemplate()) {\n            this.tmplCount++;\n        }\n        this.handler.onItemPush(element, tagID, true);\n    }\n    pop() {\n        const popped = this.current;\n        if (this.tmplCount > 0 && this._isInTemplate()) {\n            this.tmplCount--;\n        }\n        this.stackTop--;\n        this._updateCurrentElement();\n        this.handler.onItemPop(popped, true);\n    }\n    replace(oldElement, newElement) {\n        const idx = this._indexOf(oldElement);\n        this.items[idx] = newElement;\n        if (idx === this.stackTop) {\n            this.current = newElement;\n        }\n    }\n    insertAfter(referenceElement, newElement, newElementID) {\n        const insertionIdx = this._indexOf(referenceElement) + 1;\n        this.items.splice(insertionIdx, 0, newElement);\n        this.tagIDs.splice(insertionIdx, 0, newElementID);\n        this.stackTop++;\n        if (insertionIdx === this.stackTop) {\n            this._updateCurrentElement();\n        }\n        if (this.current && this.currentTagId !== undefined) {\n            this.handler.onItemPush(this.current, this.currentTagId, insertionIdx === this.stackTop);\n        }\n    }\n    popUntilTagNamePopped(tagName) {\n        let targetIdx = this.stackTop + 1;\n        do {\n            targetIdx = this.tagIDs.lastIndexOf(tagName, targetIdx - 1);\n        } while (targetIdx > 0 && this.treeAdapter.getNamespaceURI(this.items[targetIdx]) !== NS.HTML);\n        this.shortenToLength(Math.max(targetIdx, 0));\n    }\n    shortenToLength(idx) {\n        while (this.stackTop >= idx) {\n            const popped = this.current;\n            if (this.tmplCount > 0 && this._isInTemplate()) {\n                this.tmplCount -= 1;\n            }\n            this.stackTop--;\n            this._updateCurrentElement();\n            this.handler.onItemPop(popped, this.stackTop < idx);\n        }\n    }\n    popUntilElementPopped(element) {\n        const idx = this._indexOf(element);\n        this.shortenToLength(Math.max(idx, 0));\n    }\n    popUntilPopped(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(Math.max(idx, 0));\n    }\n    popUntilNumberedHeaderPopped() {\n        this.popUntilPopped(NUMBERED_HEADERS, NS.HTML);\n    }\n    popUntilTableCellPopped() {\n        this.popUntilPopped(TABLE_CELLS, NS.HTML);\n    }\n    popAllUpToHtmlElement() {\n        //NOTE: here we assume that the root <html> element is always first in the open element stack, so\n        //we perform this fast stack clean up.\n        this.tmplCount = 0;\n        this.shortenToLength(1);\n    }\n    _indexOfTagNames(tagNames, namespace) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (tagNames.has(this.tagIDs[i]) && this.treeAdapter.getNamespaceURI(this.items[i]) === namespace) {\n                return i;\n            }\n        }\n        return -1;\n    }\n    clearBackTo(tagNames, targetNS) {\n        const idx = this._indexOfTagNames(tagNames, targetNS);\n        this.shortenToLength(idx + 1);\n    }\n    clearBackToTableContext() {\n        this.clearBackTo(TABLE_CONTEXT, NS.HTML);\n    }\n    clearBackToTableBodyContext() {\n        this.clearBackTo(TABLE_BODY_CONTEXT, NS.HTML);\n    }\n    clearBackToTableRowContext() {\n        this.clearBackTo(TABLE_ROW_CONTEXT, NS.HTML);\n    }\n    remove(element) {\n        const idx = this._indexOf(element);\n        if (idx >= 0) {\n            if (idx === this.stackTop) {\n                this.pop();\n            }\n            else {\n                this.items.splice(idx, 1);\n                this.tagIDs.splice(idx, 1);\n                this.stackTop--;\n                this._updateCurrentElement();\n                this.handler.onItemPop(element, false);\n            }\n        }\n    }\n    //Search\n    tryPeekProperlyNestedBodyElement() {\n        //Properly nested <body> element (should be second element in stack).\n        return this.stackTop >= 1 && this.tagIDs[1] === $.BODY ? this.items[1] : null;\n    }\n    contains(element) {\n        return this._indexOf(element) > -1;\n    }\n    getCommonAncestor(element) {\n        const elementIdx = this._indexOf(element) - 1;\n        return elementIdx >= 0 ? this.items[elementIdx] : null;\n    }\n    isRootHtmlElementCurrent() {\n        return this.stackTop === 0 && this.tagIDs[0] === $.HTML;\n    }\n    //Element in scope\n    hasInDynamicScope(tagName, htmlScope) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (tn === tagName)\n                        return true;\n                    if (htmlScope.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML);\n    }\n    hasInListItemScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_LIST);\n    }\n    hasInButtonScope(tagName) {\n        return this.hasInDynamicScope(tagName, SCOPING_ELEMENTS_HTML_BUTTON);\n    }\n    hasNumberedHeaderInScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            const tn = this.tagIDs[i];\n            switch (this.treeAdapter.getNamespaceURI(this.items[i])) {\n                case NS.HTML: {\n                    if (NUMBERED_HEADERS.has(tn))\n                        return true;\n                    if (SCOPING_ELEMENTS_HTML.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.SVG: {\n                    if (SCOPING_ELEMENTS_SVG.has(tn))\n                        return false;\n                    break;\n                }\n                case NS.MATHML: {\n                    if (SCOPING_ELEMENTS_MATHML.has(tn))\n                        return false;\n                    break;\n                }\n            }\n        }\n        return true;\n    }\n    hasInTableScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasTableBodyContextInTableScope() {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    return true;\n                }\n                case $.TABLE:\n                case $.HTML: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    hasInSelectScope(tagName) {\n        for (let i = this.stackTop; i >= 0; i--) {\n            if (this.treeAdapter.getNamespaceURI(this.items[i]) !== NS.HTML) {\n                continue;\n            }\n            switch (this.tagIDs[i]) {\n                case tagName: {\n                    return true;\n                }\n                case $.OPTION:\n                case $.OPTGROUP: {\n                    break;\n                }\n                default: {\n                    return false;\n                }\n            }\n        }\n        return true;\n    }\n    //Implied end tags\n    generateImpliedEndTags() {\n        while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsThoroughly() {\n        while (this.currentTagId !== undefined && IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n    generateImpliedEndTagsWithExclusion(exclusionId) {\n        while (this.currentTagId !== undefined &&\n            this.currentTagId !== exclusionId &&\n            IMPLICIT_END_TAG_REQUIRED_THOROUGHLY.has(this.currentTagId)) {\n            this.pop();\n        }\n    }\n}\n","//Const\nconst NOAH_ARK_CAPACITY = 3;\nexport var EntryType;\n(function (EntryType) {\n    EntryType[EntryType[\"Marker\"] = 0] = \"Marker\";\n    EntryType[EntryType[\"Element\"] = 1] = \"Element\";\n})(EntryType || (EntryType = {}));\nconst MARKER = { type: EntryType.Marker };\n//List of formatting elements\nexport class FormattingElementList {\n    constructor(treeAdapter) {\n        this.treeAdapter = treeAdapter;\n        this.entries = [];\n        this.bookmark = null;\n    }\n    //Noah Ark's condition\n    //OPTIMIZATION: at first we try to find possible candidates for exclusion using\n    //lightweight heuristics without thorough attributes check.\n    _getNoahArkConditionCandidates(newElement, neAttrs) {\n        const candidates = [];\n        const neAttrsLength = neAttrs.length;\n        const neTagName = this.treeAdapter.getTagName(newElement);\n        const neNamespaceURI = this.treeAdapter.getNamespaceURI(newElement);\n        for (let i = 0; i < this.entries.length; i++) {\n            const entry = this.entries[i];\n            if (entry.type === EntryType.Marker) {\n                break;\n            }\n            const { element } = entry;\n            if (this.treeAdapter.getTagName(element) === neTagName &&\n                this.treeAdapter.getNamespaceURI(element) === neNamespaceURI) {\n                const elementAttrs = this.treeAdapter.getAttrList(element);\n                if (elementAttrs.length === neAttrsLength) {\n                    candidates.push({ idx: i, attrs: elementAttrs });\n                }\n            }\n        }\n        return candidates;\n    }\n    _ensureNoahArkCondition(newElement) {\n        if (this.entries.length < NOAH_ARK_CAPACITY)\n            return;\n        const neAttrs = this.treeAdapter.getAttrList(newElement);\n        const candidates = this._getNoahArkConditionCandidates(newElement, neAttrs);\n        if (candidates.length < NOAH_ARK_CAPACITY)\n            return;\n        //NOTE: build attrs map for the new element, so we can perform fast lookups\n        const neAttrsMap = new Map(neAttrs.map((neAttr) => [neAttr.name, neAttr.value]));\n        let validCandidates = 0;\n        //NOTE: remove bottommost candidates, until Noah's Ark condition will not be met\n        for (let i = 0; i < candidates.length; i++) {\n            const candidate = candidates[i];\n            // We know that `candidate.attrs.length === neAttrs.length`\n            if (candidate.attrs.every((cAttr) => neAttrsMap.get(cAttr.name) === cAttr.value)) {\n                validCandidates += 1;\n                if (validCandidates >= NOAH_ARK_CAPACITY) {\n                    this.entries.splice(candidate.idx, 1);\n                }\n            }\n        }\n    }\n    //Mutations\n    insertMarker() {\n        this.entries.unshift(MARKER);\n    }\n    pushElement(element, token) {\n        this._ensureNoahArkCondition(element);\n        this.entries.unshift({\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    insertElementAfterBookmark(element, token) {\n        const bookmarkIdx = this.entries.indexOf(this.bookmark);\n        this.entries.splice(bookmarkIdx, 0, {\n            type: EntryType.Element,\n            element,\n            token,\n        });\n    }\n    removeEntry(entry) {\n        const entryIndex = this.entries.indexOf(entry);\n        if (entryIndex !== -1) {\n            this.entries.splice(entryIndex, 1);\n        }\n    }\n    /**\n     * Clears the list of formatting elements up to the last marker.\n     *\n     * @see https://html.spec.whatwg.org/multipage/parsing.html#clear-the-list-of-active-formatting-elements-up-to-the-last-marker\n     */\n    clearToLastMarker() {\n        const markerIdx = this.entries.indexOf(MARKER);\n        if (markerIdx === -1) {\n            this.entries.length = 0;\n        }\n        else {\n            this.entries.splice(0, markerIdx + 1);\n        }\n    }\n    //Search\n    getElementEntryInScopeWithTagName(tagName) {\n        const entry = this.entries.find((entry) => entry.type === EntryType.Marker || this.treeAdapter.getTagName(entry.element) === tagName);\n        return entry && entry.type === EntryType.Element ? entry : null;\n    }\n    getElementEntry(element) {\n        return this.entries.find((entry) => entry.type === EntryType.Element && entry.element === element);\n    }\n}\n","import { DOCUMENT_MODE } from '../common/html.js';\nexport const defaultTreeAdapter = {\n    //Node construction\n    createDocument() {\n        return {\n            nodeName: '#document',\n            mode: DOCUMENT_MODE.NO_QUIRKS,\n            childNodes: [],\n        };\n    },\n    createDocumentFragment() {\n        return {\n            nodeName: '#document-fragment',\n            childNodes: [],\n        };\n    },\n    createElement(tagName, namespaceURI, attrs) {\n        return {\n            nodeName: tagName,\n            tagName,\n            attrs,\n            namespaceURI,\n            childNodes: [],\n            parentNode: null,\n        };\n    },\n    createCommentNode(data) {\n        return {\n            nodeName: '#comment',\n            data,\n            parentNode: null,\n        };\n    },\n    createTextNode(value) {\n        return {\n            nodeName: '#text',\n            value,\n            parentNode: null,\n        };\n    },\n    //Tree mutation\n    appendChild(parentNode, newNode) {\n        parentNode.childNodes.push(newNode);\n        newNode.parentNode = parentNode;\n    },\n    insertBefore(parentNode, newNode, referenceNode) {\n        const insertionIdx = parentNode.childNodes.indexOf(referenceNode);\n        parentNode.childNodes.splice(insertionIdx, 0, newNode);\n        newNode.parentNode = parentNode;\n    },\n    setTemplateContent(templateElement, contentElement) {\n        templateElement.content = contentElement;\n    },\n    getTemplateContent(templateElement) {\n        return templateElement.content;\n    },\n    setDocumentType(document, name, publicId, systemId) {\n        const doctypeNode = document.childNodes.find((node) => node.nodeName === '#documentType');\n        if (doctypeNode) {\n            doctypeNode.name = name;\n            doctypeNode.publicId = publicId;\n            doctypeNode.systemId = systemId;\n        }\n        else {\n            const node = {\n                nodeName: '#documentType',\n                name,\n                publicId,\n                systemId,\n                parentNode: null,\n            };\n            defaultTreeAdapter.appendChild(document, node);\n        }\n    },\n    setDocumentMode(document, mode) {\n        document.mode = mode;\n    },\n    getDocumentMode(document) {\n        return document.mode;\n    },\n    detachNode(node) {\n        if (node.parentNode) {\n            const idx = node.parentNode.childNodes.indexOf(node);\n            node.parentNode.childNodes.splice(idx, 1);\n            node.parentNode = null;\n        }\n    },\n    insertText(parentNode, text) {\n        if (parentNode.childNodes.length > 0) {\n            const prevNode = parentNode.childNodes[parentNode.childNodes.length - 1];\n            if (defaultTreeAdapter.isTextNode(prevNode)) {\n                prevNode.value += text;\n                return;\n            }\n        }\n        defaultTreeAdapter.appendChild(parentNode, defaultTreeAdapter.createTextNode(text));\n    },\n    insertTextBefore(parentNode, text, referenceNode) {\n        const prevNode = parentNode.childNodes[parentNode.childNodes.indexOf(referenceNode) - 1];\n        if (prevNode && defaultTreeAdapter.isTextNode(prevNode)) {\n            prevNode.value += text;\n        }\n        else {\n            defaultTreeAdapter.insertBefore(parentNode, defaultTreeAdapter.createTextNode(text), referenceNode);\n        }\n    },\n    adoptAttributes(recipient, attrs) {\n        const recipientAttrsMap = new Set(recipient.attrs.map((attr) => attr.name));\n        for (let j = 0; j < attrs.length; j++) {\n            if (!recipientAttrsMap.has(attrs[j].name)) {\n                recipient.attrs.push(attrs[j]);\n            }\n        }\n    },\n    //Tree traversing\n    getFirstChild(node) {\n        return node.childNodes[0];\n    },\n    getChildNodes(node) {\n        return node.childNodes;\n    },\n    getParentNode(node) {\n        return node.parentNode;\n    },\n    getAttrList(element) {\n        return element.attrs;\n    },\n    //Node data\n    getTagName(element) {\n        return element.tagName;\n    },\n    getNamespaceURI(element) {\n        return element.namespaceURI;\n    },\n    getTextNodeContent(textNode) {\n        return textNode.value;\n    },\n    getCommentNodeContent(commentNode) {\n        return commentNode.data;\n    },\n    getDocumentTypeNodeName(doctypeNode) {\n        return doctypeNode.name;\n    },\n    getDocumentTypeNodePublicId(doctypeNode) {\n        return doctypeNode.publicId;\n    },\n    getDocumentTypeNodeSystemId(doctypeNode) {\n        return doctypeNode.systemId;\n    },\n    //Node types\n    isTextNode(node) {\n        return node.nodeName === '#text';\n    },\n    isCommentNode(node) {\n        return node.nodeName === '#comment';\n    },\n    isDocumentTypeNode(node) {\n        return node.nodeName === '#documentType';\n    },\n    isElementNode(node) {\n        return Object.prototype.hasOwnProperty.call(node, 'tagName');\n    },\n    // Source code location\n    setNodeSourceCodeLocation(node, location) {\n        node.sourceCodeLocation = location;\n    },\n    getNodeSourceCodeLocation(node) {\n        return node.sourceCodeLocation;\n    },\n    updateNodeSourceCodeLocation(node, endLocation) {\n        node.sourceCodeLocation = { ...node.sourceCodeLocation, ...endLocation };\n    },\n};\n","import { DOCUMENT_MODE } from './html.js';\n//Const\nconst VALID_DOCTYPE_NAME = 'html';\nconst VALID_SYSTEM_ID = 'about:legacy-compat';\nconst QUIRKS_MODE_SYSTEM_ID = 'http://www.ibm.com/data/dtd/v11/ibmxhtml1-transitional.dtd';\nconst QUIRKS_MODE_PUBLIC_ID_PREFIXES = [\n    '+//silmaril//dtd html pro v0r11 19970101//',\n    '-//as//dtd html 3.0 aswedit + extensions//',\n    '-//advasoft ltd//dtd html 3.0 aswedit + extensions//',\n    '-//ietf//dtd html 2.0 level 1//',\n    '-//ietf//dtd html 2.0 level 2//',\n    '-//ietf//dtd html 2.0 strict level 1//',\n    '-//ietf//dtd html 2.0 strict level 2//',\n    '-//ietf//dtd html 2.0 strict//',\n    '-//ietf//dtd html 2.0//',\n    '-//ietf//dtd html 2.1e//',\n    '-//ietf//dtd html 3.0//',\n    '-//ietf//dtd html 3.2 final//',\n    '-//ietf//dtd html 3.2//',\n    '-//ietf//dtd html 3//',\n    '-//ietf//dtd html level 0//',\n    '-//ietf//dtd html level 1//',\n    '-//ietf//dtd html level 2//',\n    '-//ietf//dtd html level 3//',\n    '-//ietf//dtd html strict level 0//',\n    '-//ietf//dtd html strict level 1//',\n    '-//ietf//dtd html strict level 2//',\n    '-//ietf//dtd html strict level 3//',\n    '-//ietf//dtd html strict//',\n    '-//ietf//dtd html//',\n    '-//metrius//dtd metrius presentational//',\n    '-//microsoft//dtd internet explorer 2.0 html strict//',\n    '-//microsoft//dtd internet explorer 2.0 html//',\n    '-//microsoft//dtd internet explorer 2.0 tables//',\n    '-//microsoft//dtd internet explorer 3.0 html strict//',\n    '-//microsoft//dtd internet explorer 3.0 html//',\n    '-//microsoft//dtd internet explorer 3.0 tables//',\n    '-//netscape comm. corp.//dtd html//',\n    '-//netscape comm. corp.//dtd strict html//',\n    \"-//o'reilly and associates//dtd html 2.0//\",\n    \"-//o'reilly and associates//dtd html extended 1.0//\",\n    \"-//o'reilly and associates//dtd html extended relaxed 1.0//\",\n    '-//sq//dtd html 2.0 hotmetal + extensions//',\n    '-//softquad software//dtd hotmetal pro 6.0::19990601::extensions to html 4.0//',\n    '-//softquad//dtd hotmetal pro 4.0::19971010::extensions to html 4.0//',\n    '-//spyglass//dtd html 2.0 extended//',\n    '-//sun microsystems corp.//dtd hotjava html//',\n    '-//sun microsystems corp.//dtd hotjava strict html//',\n    '-//w3c//dtd html 3 1995-03-24//',\n    '-//w3c//dtd html 3.2 draft//',\n    '-//w3c//dtd html 3.2 final//',\n    '-//w3c//dtd html 3.2//',\n    '-//w3c//dtd html 3.2s draft//',\n    '-//w3c//dtd html 4.0 frameset//',\n    '-//w3c//dtd html 4.0 transitional//',\n    '-//w3c//dtd html experimental 19960712//',\n    '-//w3c//dtd html experimental 970421//',\n    '-//w3c//dtd w3 html//',\n    '-//w3o//dtd w3 html 3.0//',\n    '-//webtechs//dtd mozilla html 2.0//',\n    '-//webtechs//dtd mozilla html//',\n];\nconst QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...QUIRKS_MODE_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\nconst QUIRKS_MODE_PUBLIC_IDS = new Set([\n    '-//w3o//dtd w3 html strict 3.0//en//',\n    '-/w3c/dtd html 4.0 transitional/en',\n    'html',\n]);\nconst LIMITED_QUIRKS_PUBLIC_ID_PREFIXES = ['-//w3c//dtd xhtml 1.0 frameset//', '-//w3c//dtd xhtml 1.0 transitional//'];\nconst LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES = [\n    ...LIMITED_QUIRKS_PUBLIC_ID_PREFIXES,\n    '-//w3c//dtd html 4.01 frameset//',\n    '-//w3c//dtd html 4.01 transitional//',\n];\n//Utils\nfunction hasPrefix(publicId, prefixes) {\n    return prefixes.some((prefix) => publicId.startsWith(prefix));\n}\n//API\nexport function isConforming(token) {\n    return (token.name === VALID_DOCTYPE_NAME &&\n        token.publicId === null &&\n        (token.systemId === null || token.systemId === VALID_SYSTEM_ID));\n}\nexport function getDocumentMode(token) {\n    if (token.name !== VALID_DOCTYPE_NAME) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    const { systemId } = token;\n    if (systemId && systemId.toLowerCase() === QUIRKS_MODE_SYSTEM_ID) {\n        return DOCUMENT_MODE.QUIRKS;\n    }\n    let { publicId } = token;\n    if (publicId !== null) {\n        publicId = publicId.toLowerCase();\n        if (QUIRKS_MODE_PUBLIC_IDS.has(publicId)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        let prefixes = systemId === null ? QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES : QUIRKS_MODE_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.QUIRKS;\n        }\n        prefixes =\n            systemId === null ? LIMITED_QUIRKS_PUBLIC_ID_PREFIXES : LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES;\n        if (hasPrefix(publicId, prefixes)) {\n            return DOCUMENT_MODE.LIMITED_QUIRKS;\n        }\n    }\n    return DOCUMENT_MODE.NO_QUIRKS;\n}\n","import { TAG_ID as $, NS, ATTRS, getTagID } from './html.js';\n//MIME types\nconst MIME_TYPES = {\n    TEXT_HTML: 'text/html',\n    APPLICATION_XML: 'application/xhtml+xml',\n};\n//Attributes\nconst DEFINITION_URL_ATTR = 'definitionurl';\nconst ADJUSTED_DEFINITION_URL_ATTR = 'definitionURL';\nconst SVG_ATTRS_ADJUSTMENT_MAP = new Map([\n    'attributeName',\n    'attributeType',\n    'baseFrequency',\n    'baseProfile',\n    'calcMode',\n    'clipPathUnits',\n    'diffuseConstant',\n    'edgeMode',\n    'filterUnits',\n    'glyphRef',\n    'gradientTransform',\n    'gradientUnits',\n    'kernelMatrix',\n    'kernelUnitLength',\n    'keyPoints',\n    'keySplines',\n    'keyTimes',\n    'lengthAdjust',\n    'limitingConeAngle',\n    'markerHeight',\n    'markerUnits',\n    'markerWidth',\n    'maskContentUnits',\n    'maskUnits',\n    'numOctaves',\n    'pathLength',\n    'patternContentUnits',\n    'patternTransform',\n    'patternUnits',\n    'pointsAtX',\n    'pointsAtY',\n    'pointsAtZ',\n    'preserveAlpha',\n    'preserveAspectRatio',\n    'primitiveUnits',\n    'refX',\n    'refY',\n    'repeatCount',\n    'repeatDur',\n    'requiredExtensions',\n    'requiredFeatures',\n    'specularConstant',\n    'specularExponent',\n    'spreadMethod',\n    'startOffset',\n    'stdDeviation',\n    'stitchTiles',\n    'surfaceScale',\n    'systemLanguage',\n    'tableValues',\n    'targetX',\n    'targetY',\n    'textLength',\n    'viewBox',\n    'viewTarget',\n    'xChannelSelector',\n    'yChannelSelector',\n    'zoomAndPan',\n].map((attr) => [attr.toLowerCase(), attr]));\nconst XML_ATTRS_ADJUSTMENT_MAP = new Map([\n    ['xlink:actuate', { prefix: 'xlink', name: 'actuate', namespace: NS.XLINK }],\n    ['xlink:arcrole', { prefix: 'xlink', name: 'arcrole', namespace: NS.XLINK }],\n    ['xlink:href', { prefix: 'xlink', name: 'href', namespace: NS.XLINK }],\n    ['xlink:role', { prefix: 'xlink', name: 'role', namespace: NS.XLINK }],\n    ['xlink:show', { prefix: 'xlink', name: 'show', namespace: NS.XLINK }],\n    ['xlink:title', { prefix: 'xlink', name: 'title', namespace: NS.XLINK }],\n    ['xlink:type', { prefix: 'xlink', name: 'type', namespace: NS.XLINK }],\n    ['xml:lang', { prefix: 'xml', name: 'lang', namespace: NS.XML }],\n    ['xml:space', { prefix: 'xml', name: 'space', namespace: NS.XML }],\n    ['xmlns', { prefix: '', name: 'xmlns', namespace: NS.XMLNS }],\n    ['xmlns:xlink', { prefix: 'xmlns', name: 'xlink', namespace: NS.XMLNS }],\n]);\n//SVG tag names adjustment map\nexport const SVG_TAG_NAMES_ADJUSTMENT_MAP = new Map([\n    'altGlyph',\n    'altGlyphDef',\n    'altGlyphItem',\n    'animateColor',\n    'animateMotion',\n    'animateTransform',\n    'clipPath',\n    'feBlend',\n    'feColorMatrix',\n    'feComponentTransfer',\n    'feComposite',\n    'feConvolveMatrix',\n    'feDiffuseLighting',\n    'feDisplacementMap',\n    'feDistantLight',\n    'feFlood',\n    'feFuncA',\n    'feFuncB',\n    'feFuncG',\n    'feFuncR',\n    'feGaussianBlur',\n    'feImage',\n    'feMerge',\n    'feMergeNode',\n    'feMorphology',\n    'feOffset',\n    'fePointLight',\n    'feSpecularLighting',\n    'feSpotLight',\n    'feTile',\n    'feTurbulence',\n    'foreignObject',\n    'glyphRef',\n    'linearGradient',\n    'radialGradient',\n    'textPath',\n].map((tn) => [tn.toLowerCase(), tn]));\n//Tags that causes exit from foreign content\nconst EXITS_FOREIGN_CONTENT = new Set([\n    $.B,\n    $.BIG,\n    $.BLOCKQUOTE,\n    $.BODY,\n    $.BR,\n    $.CENTER,\n    $.CODE,\n    $.DD,\n    $.DIV,\n    $.DL,\n    $.DT,\n    $.EM,\n    $.EMBED,\n    $.H1,\n    $.H2,\n    $.H3,\n    $.H4,\n    $.H5,\n    $.H6,\n    $.HEAD,\n    $.HR,\n    $.I,\n    $.IMG,\n    $.LI,\n    $.LISTING,\n    $.MENU,\n    $.META,\n    $.NOBR,\n    $.OL,\n    $.P,\n    $.PRE,\n    $.RUBY,\n    $.S,\n    $.SMALL,\n    $.SPAN,\n    $.STRONG,\n    $.STRIKE,\n    $.SUB,\n    $.SUP,\n    $.TABLE,\n    $.TT,\n    $.U,\n    $.UL,\n    $.VAR,\n]);\n//Check exit from foreign content\nexport function causesExit(startTagToken) {\n    const tn = startTagToken.tagID;\n    const isFontWithAttrs = tn === $.FONT &&\n        startTagToken.attrs.some(({ name }) => name === ATTRS.COLOR || name === ATTRS.SIZE || name === ATTRS.FACE);\n    return isFontWithAttrs || EXITS_FOREIGN_CONTENT.has(tn);\n}\n//Token adjustments\nexport function adjustTokenMathMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        if (token.attrs[i].name === DEFINITION_URL_ATTR) {\n            token.attrs[i].name = ADJUSTED_DEFINITION_URL_ATTR;\n            break;\n        }\n    }\n}\nexport function adjustTokenSVGAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrName = SVG_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrName != null) {\n            token.attrs[i].name = adjustedAttrName;\n        }\n    }\n}\nexport function adjustTokenXMLAttrs(token) {\n    for (let i = 0; i < token.attrs.length; i++) {\n        const adjustedAttrEntry = XML_ATTRS_ADJUSTMENT_MAP.get(token.attrs[i].name);\n        if (adjustedAttrEntry) {\n            token.attrs[i].prefix = adjustedAttrEntry.prefix;\n            token.attrs[i].name = adjustedAttrEntry.name;\n            token.attrs[i].namespace = adjustedAttrEntry.namespace;\n        }\n    }\n}\nexport function adjustTokenSVGTagName(token) {\n    const adjustedTagName = SVG_TAG_NAMES_ADJUSTMENT_MAP.get(token.tagName);\n    if (adjustedTagName != null) {\n        token.tagName = adjustedTagName;\n        token.tagID = getTagID(token.tagName);\n    }\n}\n//Integration points\nfunction isMathMLTextIntegrationPoint(tn, ns) {\n    return ns === NS.MATHML && (tn === $.MI || tn === $.MO || tn === $.MN || tn === $.MS || tn === $.MTEXT);\n}\nfunction isHtmlIntegrationPoint(tn, ns, attrs) {\n    if (ns === NS.MATHML && tn === $.ANNOTATION_XML) {\n        for (let i = 0; i < attrs.length; i++) {\n            if (attrs[i].name === ATTRS.ENCODING) {\n                const value = attrs[i].value.toLowerCase();\n                return value === MIME_TYPES.TEXT_HTML || value === MIME_TYPES.APPLICATION_XML;\n            }\n        }\n    }\n    return ns === NS.SVG && (tn === $.FOREIGN_OBJECT || tn === $.DESC || tn === $.TITLE);\n}\nexport function isIntegrationPoint(tn, ns, attrs, foreignNS) {\n    return (((!foreignNS || foreignNS === NS.HTML) && isHtmlIntegrationPoint(tn, ns, attrs)) ||\n        ((!foreignNS || foreignNS === NS.MATHML) && isMathMLTextIntegrationPoint(tn, ns)));\n}\n","import { Tokenizer, TokenizerMode } from '../tokenizer/index.js';\nimport { OpenElementStack } from './open-element-stack.js';\nimport { FormattingElementList, EntryType } from './formatting-element-list.js';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\nimport * as doctype from '../common/doctype.js';\nimport * as foreignContent from '../common/foreign-content.js';\nimport { ERR } from '../common/error-codes.js';\nimport * as unicode from '../common/unicode.js';\nimport { TAG_ID as $, TAG_NAMES as TN, NS, ATTRS, SPECIAL_ELEMENTS, DOCUMENT_MODE, NUMBERED_HEADERS, getTagID, } from '../common/html.js';\nimport { TokenType, getTokenAttr, } from '../common/token.js';\n//Misc constants\nconst HIDDEN_INPUT_TYPE = 'hidden';\n//Adoption agency loops iteration count\nconst AA_OUTER_LOOP_ITER = 8;\nconst AA_INNER_LOOP_ITER = 3;\n//Insertion modes\nvar InsertionMode;\n(function (InsertionMode) {\n    InsertionMode[InsertionMode[\"INITIAL\"] = 0] = \"INITIAL\";\n    InsertionMode[InsertionMode[\"BEFORE_HTML\"] = 1] = \"BEFORE_HTML\";\n    InsertionMode[InsertionMode[\"BEFORE_HEAD\"] = 2] = \"BEFORE_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD\"] = 3] = \"IN_HEAD\";\n    InsertionMode[InsertionMode[\"IN_HEAD_NO_SCRIPT\"] = 4] = \"IN_HEAD_NO_SCRIPT\";\n    InsertionMode[InsertionMode[\"AFTER_HEAD\"] = 5] = \"AFTER_HEAD\";\n    InsertionMode[InsertionMode[\"IN_BODY\"] = 6] = \"IN_BODY\";\n    InsertionMode[InsertionMode[\"TEXT\"] = 7] = \"TEXT\";\n    InsertionMode[InsertionMode[\"IN_TABLE\"] = 8] = \"IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TABLE_TEXT\"] = 9] = \"IN_TABLE_TEXT\";\n    InsertionMode[InsertionMode[\"IN_CAPTION\"] = 10] = \"IN_CAPTION\";\n    InsertionMode[InsertionMode[\"IN_COLUMN_GROUP\"] = 11] = \"IN_COLUMN_GROUP\";\n    InsertionMode[InsertionMode[\"IN_TABLE_BODY\"] = 12] = \"IN_TABLE_BODY\";\n    InsertionMode[InsertionMode[\"IN_ROW\"] = 13] = \"IN_ROW\";\n    InsertionMode[InsertionMode[\"IN_CELL\"] = 14] = \"IN_CELL\";\n    InsertionMode[InsertionMode[\"IN_SELECT\"] = 15] = \"IN_SELECT\";\n    InsertionMode[InsertionMode[\"IN_SELECT_IN_TABLE\"] = 16] = \"IN_SELECT_IN_TABLE\";\n    InsertionMode[InsertionMode[\"IN_TEMPLATE\"] = 17] = \"IN_TEMPLATE\";\n    InsertionMode[InsertionMode[\"AFTER_BODY\"] = 18] = \"AFTER_BODY\";\n    InsertionMode[InsertionMode[\"IN_FRAMESET\"] = 19] = \"IN_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_FRAMESET\"] = 20] = \"AFTER_FRAMESET\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_BODY\"] = 21] = \"AFTER_AFTER_BODY\";\n    InsertionMode[InsertionMode[\"AFTER_AFTER_FRAMESET\"] = 22] = \"AFTER_AFTER_FRAMESET\";\n})(InsertionMode || (InsertionMode = {}));\nconst BASE_LOC = {\n    startLine: -1,\n    startCol: -1,\n    startOffset: -1,\n    endLine: -1,\n    endCol: -1,\n    endOffset: -1,\n};\nconst TABLE_STRUCTURE_TAGS = new Set([$.TABLE, $.TBODY, $.TFOOT, $.THEAD, $.TR]);\nconst defaultParserOptions = {\n    scriptingEnabled: true,\n    sourceCodeLocationInfo: false,\n    treeAdapter: defaultTreeAdapter,\n    onParseError: null,\n};\n//Parser\nexport class Parser {\n    constructor(options, document, \n    /** @internal */\n    fragmentContext = null, \n    /** @internal */\n    scriptHandler = null) {\n        this.fragmentContext = fragmentContext;\n        this.scriptHandler = scriptHandler;\n        this.currentToken = null;\n        this.stopped = false;\n        /** @internal */\n        this.insertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.originalInsertionMode = InsertionMode.INITIAL;\n        /** @internal */\n        this.headElement = null;\n        /** @internal */\n        this.formElement = null;\n        /** Indicates that the current node is not an element in the HTML namespace */\n        this.currentNotInHTML = false;\n        /**\n         * The template insertion mode stack is maintained from the left.\n         * Ie. the topmost element will always have index 0.\n         *\n         * @internal\n         */\n        this.tmplInsertionModeStack = [];\n        /** @internal */\n        this.pendingCharacterTokens = [];\n        /** @internal */\n        this.hasNonWhitespacePendingCharacterToken = false;\n        /** @internal */\n        this.framesetOk = true;\n        /** @internal */\n        this.skipNextNewLine = false;\n        /** @internal */\n        this.fosterParentingEnabled = false;\n        this.options = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        this.treeAdapter = this.options.treeAdapter;\n        this.onParseError = this.options.onParseError;\n        // Always enable location info if we report parse errors.\n        if (this.onParseError) {\n            this.options.sourceCodeLocationInfo = true;\n        }\n        this.document = document !== null && document !== void 0 ? document : this.treeAdapter.createDocument();\n        this.tokenizer = new Tokenizer(this.options, this);\n        this.activeFormattingElements = new FormattingElementList(this.treeAdapter);\n        this.fragmentContextID = fragmentContext ? getTagID(this.treeAdapter.getTagName(fragmentContext)) : $.UNKNOWN;\n        this._setContextModes(fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : this.document, this.fragmentContextID);\n        this.openElements = new OpenElementStack(this.document, this.treeAdapter, this);\n    }\n    // API\n    static parse(html, options) {\n        const parser = new this(options);\n        parser.tokenizer.write(html, true);\n        return parser.document;\n    }\n    static getFragmentParser(fragmentContext, options) {\n        const opts = {\n            ...defaultParserOptions,\n            ...options,\n        };\n        //NOTE: use a <template> element as the fragment context if no context element was provided,\n        //so we will parse in a \"forgiving\" manner\n        fragmentContext !== null && fragmentContext !== void 0 ? fragmentContext : (fragmentContext = opts.treeAdapter.createElement(TN.TEMPLATE, NS.HTML, []));\n        //NOTE: create a fake element which will be used as the `document` for fragment parsing.\n        //This is important for jsdom, where a new `document` cannot be created. This led to\n        //fragment parsing messing with the main `document`.\n        const documentMock = opts.treeAdapter.createElement('documentmock', NS.HTML, []);\n        const parser = new this(opts, documentMock, fragmentContext);\n        if (parser.fragmentContextID === $.TEMPLATE) {\n            parser.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n        }\n        parser._initTokenizerForFragmentParsing();\n        parser._insertFakeRootElement();\n        parser._resetInsertionMode();\n        parser._findFormInFragmentContext();\n        return parser;\n    }\n    getFragment() {\n        const rootElement = this.treeAdapter.getFirstChild(this.document);\n        const fragment = this.treeAdapter.createDocumentFragment();\n        this._adoptNodes(rootElement, fragment);\n        return fragment;\n    }\n    //Errors\n    /** @internal */\n    _err(token, code, beforeToken) {\n        var _a;\n        if (!this.onParseError)\n            return;\n        const loc = (_a = token.location) !== null && _a !== void 0 ? _a : BASE_LOC;\n        const err = {\n            code,\n            startLine: loc.startLine,\n            startCol: loc.startCol,\n            startOffset: loc.startOffset,\n            endLine: beforeToken ? loc.startLine : loc.endLine,\n            endCol: beforeToken ? loc.startCol : loc.endCol,\n            endOffset: beforeToken ? loc.startOffset : loc.endOffset,\n        };\n        this.onParseError(err);\n    }\n    //Stack events\n    /** @internal */\n    onItemPush(node, tid, isTop) {\n        var _a, _b;\n        (_b = (_a = this.treeAdapter).onItemPush) === null || _b === void 0 ? void 0 : _b.call(_a, node);\n        if (isTop && this.openElements.stackTop > 0)\n            this._setContextModes(node, tid);\n    }\n    /** @internal */\n    onItemPop(node, isTop) {\n        var _a, _b;\n        if (this.options.sourceCodeLocationInfo) {\n            this._setEndLocation(node, this.currentToken);\n        }\n        (_b = (_a = this.treeAdapter).onItemPop) === null || _b === void 0 ? void 0 : _b.call(_a, node, this.openElements.current);\n        if (isTop) {\n            let current;\n            let currentTagId;\n            if (this.openElements.stackTop === 0 && this.fragmentContext) {\n                current = this.fragmentContext;\n                currentTagId = this.fragmentContextID;\n            }\n            else {\n                ({ current, currentTagId } = this.openElements);\n            }\n            this._setContextModes(current, currentTagId);\n        }\n    }\n    _setContextModes(current, tid) {\n        const isHTML = current === this.document || (current && this.treeAdapter.getNamespaceURI(current) === NS.HTML);\n        this.currentNotInHTML = !isHTML;\n        this.tokenizer.inForeignNode =\n            !isHTML && current !== undefined && tid !== undefined && !this._isIntegrationPoint(tid, current);\n    }\n    /** @protected */\n    _switchToTextParsing(currentToken, nextTokenizerState) {\n        this._insertElement(currentToken, NS.HTML);\n        this.tokenizer.state = nextTokenizerState;\n        this.originalInsertionMode = this.insertionMode;\n        this.insertionMode = InsertionMode.TEXT;\n    }\n    switchToPlaintextParsing() {\n        this.insertionMode = InsertionMode.TEXT;\n        this.originalInsertionMode = InsertionMode.IN_BODY;\n        this.tokenizer.state = TokenizerMode.PLAINTEXT;\n    }\n    //Fragment parsing\n    /** @protected */\n    _getAdjustedCurrentElement() {\n        return this.openElements.stackTop === 0 && this.fragmentContext\n            ? this.fragmentContext\n            : this.openElements.current;\n    }\n    /** @protected */\n    _findFormInFragmentContext() {\n        let node = this.fragmentContext;\n        while (node) {\n            if (this.treeAdapter.getTagName(node) === TN.FORM) {\n                this.formElement = node;\n                break;\n            }\n            node = this.treeAdapter.getParentNode(node);\n        }\n    }\n    _initTokenizerForFragmentParsing() {\n        if (!this.fragmentContext || this.treeAdapter.getNamespaceURI(this.fragmentContext) !== NS.HTML) {\n            return;\n        }\n        switch (this.fragmentContextID) {\n            case $.TITLE:\n            case $.TEXTAREA: {\n                this.tokenizer.state = TokenizerMode.RCDATA;\n                break;\n            }\n            case $.STYLE:\n            case $.XMP:\n            case $.IFRAME:\n            case $.NOEMBED:\n            case $.NOFRAMES:\n            case $.NOSCRIPT: {\n                this.tokenizer.state = TokenizerMode.RAWTEXT;\n                break;\n            }\n            case $.SCRIPT: {\n                this.tokenizer.state = TokenizerMode.SCRIPT_DATA;\n                break;\n            }\n            case $.PLAINTEXT: {\n                this.tokenizer.state = TokenizerMode.PLAINTEXT;\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    //Tree mutation\n    /** @protected */\n    _setDocumentType(token) {\n        const name = token.name || '';\n        const publicId = token.publicId || '';\n        const systemId = token.systemId || '';\n        this.treeAdapter.setDocumentType(this.document, name, publicId, systemId);\n        if (token.location) {\n            const documentChildren = this.treeAdapter.getChildNodes(this.document);\n            const docTypeNode = documentChildren.find((node) => this.treeAdapter.isDocumentTypeNode(node));\n            if (docTypeNode) {\n                this.treeAdapter.setNodeSourceCodeLocation(docTypeNode, token.location);\n            }\n        }\n    }\n    /** @protected */\n    _attachElementToTree(element, location) {\n        if (this.options.sourceCodeLocationInfo) {\n            const loc = location && {\n                ...location,\n                startTag: location,\n            };\n            this.treeAdapter.setNodeSourceCodeLocation(element, loc);\n        }\n        if (this._shouldFosterParentOnInsertion()) {\n            this._fosterParentElement(element);\n        }\n        else {\n            const parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.appendChild(parent !== null && parent !== void 0 ? parent : this.document, element);\n        }\n    }\n    /**\n     * For self-closing tags. Add an element to the tree, but skip adding it\n     * to the stack.\n     */\n    /** @protected */\n    _appendElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n    }\n    /** @protected */\n    _insertElement(token, namespaceURI) {\n        const element = this.treeAdapter.createElement(token.tagName, namespaceURI, token.attrs);\n        this._attachElementToTree(element, token.location);\n        this.openElements.push(element, token.tagID);\n    }\n    /** @protected */\n    _insertFakeElement(tagName, tagID) {\n        const element = this.treeAdapter.createElement(tagName, NS.HTML, []);\n        this._attachElementToTree(element, null);\n        this.openElements.push(element, tagID);\n    }\n    /** @protected */\n    _insertTemplate(token) {\n        const tmpl = this.treeAdapter.createElement(token.tagName, NS.HTML, token.attrs);\n        const content = this.treeAdapter.createDocumentFragment();\n        this.treeAdapter.setTemplateContent(tmpl, content);\n        this._attachElementToTree(tmpl, token.location);\n        this.openElements.push(tmpl, token.tagID);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(content, null);\n    }\n    /** @protected */\n    _insertFakeRootElement() {\n        const element = this.treeAdapter.createElement(TN.HTML, NS.HTML, []);\n        if (this.options.sourceCodeLocationInfo)\n            this.treeAdapter.setNodeSourceCodeLocation(element, null);\n        this.treeAdapter.appendChild(this.openElements.current, element);\n        this.openElements.push(element, $.HTML);\n    }\n    /** @protected */\n    _appendCommentNode(token, parent) {\n        const commentNode = this.treeAdapter.createCommentNode(token.data);\n        this.treeAdapter.appendChild(parent, commentNode);\n        if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(commentNode, token.location);\n        }\n    }\n    /** @protected */\n    _insertCharacters(token) {\n        let parent;\n        let beforeElement;\n        if (this._shouldFosterParentOnInsertion()) {\n            ({ parent, beforeElement } = this._findFosterParentingLocation());\n            if (beforeElement) {\n                this.treeAdapter.insertTextBefore(parent, token.chars, beforeElement);\n            }\n            else {\n                this.treeAdapter.insertText(parent, token.chars);\n            }\n        }\n        else {\n            parent = this.openElements.currentTmplContentOrNode;\n            this.treeAdapter.insertText(parent, token.chars);\n        }\n        if (!token.location)\n            return;\n        const siblings = this.treeAdapter.getChildNodes(parent);\n        const textNodeIdx = beforeElement ? siblings.lastIndexOf(beforeElement) : siblings.length;\n        const textNode = siblings[textNodeIdx - 1];\n        //NOTE: if we have a location assigned by another token, then just update the end position\n        const tnLoc = this.treeAdapter.getNodeSourceCodeLocation(textNode);\n        if (tnLoc) {\n            const { endLine, endCol, endOffset } = token.location;\n            this.treeAdapter.updateNodeSourceCodeLocation(textNode, { endLine, endCol, endOffset });\n        }\n        else if (this.options.sourceCodeLocationInfo) {\n            this.treeAdapter.setNodeSourceCodeLocation(textNode, token.location);\n        }\n    }\n    /** @protected */\n    _adoptNodes(donor, recipient) {\n        for (let child = this.treeAdapter.getFirstChild(donor); child; child = this.treeAdapter.getFirstChild(donor)) {\n            this.treeAdapter.detachNode(child);\n            this.treeAdapter.appendChild(recipient, child);\n        }\n    }\n    /** @protected */\n    _setEndLocation(element, closingToken) {\n        if (this.treeAdapter.getNodeSourceCodeLocation(element) && closingToken.location) {\n            const ctLoc = closingToken.location;\n            const tn = this.treeAdapter.getTagName(element);\n            const endLoc = \n            // NOTE: For cases like <p> <p> </p> - First 'p' closes without a closing\n            // tag and for cases like <td> <p> </td> - 'p' closes without a closing tag.\n            closingToken.type === TokenType.END_TAG && tn === closingToken.tagName\n                ? {\n                    endTag: { ...ctLoc },\n                    endLine: ctLoc.endLine,\n                    endCol: ctLoc.endCol,\n                    endOffset: ctLoc.endOffset,\n                }\n                : {\n                    endLine: ctLoc.startLine,\n                    endCol: ctLoc.startCol,\n                    endOffset: ctLoc.startOffset,\n                };\n            this.treeAdapter.updateNodeSourceCodeLocation(element, endLoc);\n        }\n    }\n    //Token processing\n    shouldProcessStartTagTokenInForeignContent(token) {\n        // Check that neither current === document, or ns === NS.HTML\n        if (!this.currentNotInHTML)\n            return false;\n        let current;\n        let currentTagId;\n        if (this.openElements.stackTop === 0 && this.fragmentContext) {\n            current = this.fragmentContext;\n            currentTagId = this.fragmentContextID;\n        }\n        else {\n            ({ current, currentTagId } = this.openElements);\n        }\n        if (token.tagID === $.SVG &&\n            this.treeAdapter.getTagName(current) === TN.ANNOTATION_XML &&\n            this.treeAdapter.getNamespaceURI(current) === NS.MATHML) {\n            return false;\n        }\n        return (\n        // Check that `current` is not an integration point for HTML or MathML elements.\n        this.tokenizer.inForeignNode ||\n            // If it _is_ an integration point, then we might have to check that it is not an HTML\n            // integration point.\n            ((token.tagID === $.MGLYPH || token.tagID === $.MALIGNMARK) &&\n                currentTagId !== undefined &&\n                !this._isIntegrationPoint(currentTagId, current, NS.HTML)));\n    }\n    /** @protected */\n    _processToken(token) {\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                this.onCharacter(token);\n                break;\n            }\n            case TokenType.NULL_CHARACTER: {\n                this.onNullCharacter(token);\n                break;\n            }\n            case TokenType.COMMENT: {\n                this.onComment(token);\n                break;\n            }\n            case TokenType.DOCTYPE: {\n                this.onDoctype(token);\n                break;\n            }\n            case TokenType.START_TAG: {\n                this._processStartTag(token);\n                break;\n            }\n            case TokenType.END_TAG: {\n                this.onEndTag(token);\n                break;\n            }\n            case TokenType.EOF: {\n                this.onEof(token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                this.onWhitespaceCharacter(token);\n                break;\n            }\n        }\n    }\n    //Integration points\n    /** @protected */\n    _isIntegrationPoint(tid, element, foreignNS) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        const attrs = this.treeAdapter.getAttrList(element);\n        return foreignContent.isIntegrationPoint(tid, ns, attrs, foreignNS);\n    }\n    //Active formatting elements reconstruction\n    /** @protected */\n    _reconstructActiveFormattingElements() {\n        const listLength = this.activeFormattingElements.entries.length;\n        if (listLength) {\n            const endIndex = this.activeFormattingElements.entries.findIndex((entry) => entry.type === EntryType.Marker || this.openElements.contains(entry.element));\n            const unopenIdx = endIndex === -1 ? listLength - 1 : endIndex - 1;\n            for (let i = unopenIdx; i >= 0; i--) {\n                const entry = this.activeFormattingElements.entries[i];\n                this._insertElement(entry.token, this.treeAdapter.getNamespaceURI(entry.element));\n                entry.element = this.openElements.current;\n            }\n        }\n    }\n    //Close elements\n    /** @protected */\n    _closeTableCell() {\n        this.openElements.generateImpliedEndTags();\n        this.openElements.popUntilTableCellPopped();\n        this.activeFormattingElements.clearToLastMarker();\n        this.insertionMode = InsertionMode.IN_ROW;\n    }\n    /** @protected */\n    _closePElement() {\n        this.openElements.generateImpliedEndTagsWithExclusion($.P);\n        this.openElements.popUntilTagNamePopped($.P);\n    }\n    //Insertion modes\n    /** @protected */\n    _resetInsertionMode() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            //Insertion mode reset map\n            switch (i === 0 && this.fragmentContext ? this.fragmentContextID : this.openElements.tagIDs[i]) {\n                case $.TR: {\n                    this.insertionMode = InsertionMode.IN_ROW;\n                    return;\n                }\n                case $.TBODY:\n                case $.THEAD:\n                case $.TFOOT: {\n                    this.insertionMode = InsertionMode.IN_TABLE_BODY;\n                    return;\n                }\n                case $.CAPTION: {\n                    this.insertionMode = InsertionMode.IN_CAPTION;\n                    return;\n                }\n                case $.COLGROUP: {\n                    this.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n                    return;\n                }\n                case $.TABLE: {\n                    this.insertionMode = InsertionMode.IN_TABLE;\n                    return;\n                }\n                case $.BODY: {\n                    this.insertionMode = InsertionMode.IN_BODY;\n                    return;\n                }\n                case $.FRAMESET: {\n                    this.insertionMode = InsertionMode.IN_FRAMESET;\n                    return;\n                }\n                case $.SELECT: {\n                    this._resetInsertionModeForSelect(i);\n                    return;\n                }\n                case $.TEMPLATE: {\n                    this.insertionMode = this.tmplInsertionModeStack[0];\n                    return;\n                }\n                case $.HTML: {\n                    this.insertionMode = this.headElement ? InsertionMode.AFTER_HEAD : InsertionMode.BEFORE_HEAD;\n                    return;\n                }\n                case $.TD:\n                case $.TH: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_CELL;\n                        return;\n                    }\n                    break;\n                }\n                case $.HEAD: {\n                    if (i > 0) {\n                        this.insertionMode = InsertionMode.IN_HEAD;\n                        return;\n                    }\n                    break;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_BODY;\n    }\n    /** @protected */\n    _resetInsertionModeForSelect(selectIdx) {\n        if (selectIdx > 0) {\n            for (let i = selectIdx - 1; i > 0; i--) {\n                const tn = this.openElements.tagIDs[i];\n                if (tn === $.TEMPLATE) {\n                    break;\n                }\n                else if (tn === $.TABLE) {\n                    this.insertionMode = InsertionMode.IN_SELECT_IN_TABLE;\n                    return;\n                }\n            }\n        }\n        this.insertionMode = InsertionMode.IN_SELECT;\n    }\n    //Foster parenting\n    /** @protected */\n    _isElementCausesFosterParenting(tn) {\n        return TABLE_STRUCTURE_TAGS.has(tn);\n    }\n    /** @protected */\n    _shouldFosterParentOnInsertion() {\n        return (this.fosterParentingEnabled &&\n            this.openElements.currentTagId !== undefined &&\n            this._isElementCausesFosterParenting(this.openElements.currentTagId));\n    }\n    /** @protected */\n    _findFosterParentingLocation() {\n        for (let i = this.openElements.stackTop; i >= 0; i--) {\n            const openElement = this.openElements.items[i];\n            switch (this.openElements.tagIDs[i]) {\n                case $.TEMPLATE: {\n                    if (this.treeAdapter.getNamespaceURI(openElement) === NS.HTML) {\n                        return { parent: this.treeAdapter.getTemplateContent(openElement), beforeElement: null };\n                    }\n                    break;\n                }\n                case $.TABLE: {\n                    const parent = this.treeAdapter.getParentNode(openElement);\n                    if (parent) {\n                        return { parent, beforeElement: openElement };\n                    }\n                    return { parent: this.openElements.items[i - 1], beforeElement: null };\n                }\n                default:\n                // Do nothing\n            }\n        }\n        return { parent: this.openElements.items[0], beforeElement: null };\n    }\n    /** @protected */\n    _fosterParentElement(element) {\n        const location = this._findFosterParentingLocation();\n        if (location.beforeElement) {\n            this.treeAdapter.insertBefore(location.parent, element, location.beforeElement);\n        }\n        else {\n            this.treeAdapter.appendChild(location.parent, element);\n        }\n    }\n    //Special elements\n    /** @protected */\n    _isSpecialElement(element, id) {\n        const ns = this.treeAdapter.getNamespaceURI(element);\n        return SPECIAL_ELEMENTS[ns].has(id);\n    }\n    /** @internal */\n    onCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            characterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE: {\n                characterInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                characterInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onNullCharacter(token) {\n        this.skipNextNewLine = false;\n        if (this.tokenizer.inForeignNode) {\n            nullCharacterInForeignContent(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                tokenInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                tokenAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onComment(token) {\n        this.skipNextNewLine = false;\n        if (this.currentNotInHTML) {\n            appendComment(this, token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL:\n            case InsertionMode.BEFORE_HTML:\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                appendComment(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                appendCommentToRootHtmlElement(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                appendCommentToDocument(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onDoctype(token) {\n        this.skipNextNewLine = false;\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                doctypeInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD:\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD: {\n                this._err(token, ERR.misplacedDoctype);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onStartTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        this._processStartTag(token);\n        if (token.selfClosing && !token.ackSelfClosing) {\n            this._err(token, ERR.nonVoidHtmlElementStartTagWithTrailingSolidus);\n        }\n    }\n    /**\n     * Processes a given start tag.\n     *\n     * `onStartTag` checks if a self-closing tag was recognized. When a token\n     * is moved inbetween multiple insertion modes, this check for self-closing\n     * could lead to false positives. To avoid this, `_processStartTag` is used\n     * for nested calls.\n     *\n     * @param token The token to process.\n     * @protected\n     */\n    _processStartTag(token) {\n        if (this.shouldProcessStartTagTokenInForeignContent(token)) {\n            startTagInForeignContent(this, token);\n        }\n        else {\n            this._startTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _startTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                startTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                startTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                startTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                startTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                startTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                startTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                startTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                startTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                startTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                startTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                startTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                startTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                startTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                startTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                startTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                startTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                startTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                startTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                startTagAfterAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                startTagAfterAfterFrameset(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEndTag(token) {\n        this.skipNextNewLine = false;\n        this.currentToken = token;\n        if (this.currentNotInHTML) {\n            endTagInForeignContent(this, token);\n        }\n        else {\n            this._endTagOutsideForeignContent(token);\n        }\n    }\n    /** @protected */\n    _endTagOutsideForeignContent(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                endTagBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                endTagBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                endTagInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                endTagInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                endTagAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY: {\n                endTagInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                endTagInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE: {\n                endTagInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_CAPTION: {\n                endTagInCaption(this, token);\n                break;\n            }\n            case InsertionMode.IN_COLUMN_GROUP: {\n                endTagInColumnGroup(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_BODY: {\n                endTagInTableBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_ROW: {\n                endTagInRow(this, token);\n                break;\n            }\n            case InsertionMode.IN_CELL: {\n                endTagInCell(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT: {\n                endTagInSelect(this, token);\n                break;\n            }\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                endTagInSelectInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                endTagInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY: {\n                endTagAfterBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_FRAMESET: {\n                endTagInFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_FRAMESET: {\n                endTagAfterFrameset(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_AFTER_BODY: {\n                tokenAfterAfterBody(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onEof(token) {\n        switch (this.insertionMode) {\n            case InsertionMode.INITIAL: {\n                tokenInInitialMode(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HTML: {\n                tokenBeforeHtml(this, token);\n                break;\n            }\n            case InsertionMode.BEFORE_HEAD: {\n                tokenBeforeHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD: {\n                tokenInHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_HEAD_NO_SCRIPT: {\n                tokenInHeadNoScript(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_HEAD: {\n                tokenAfterHead(this, token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE: {\n                eofInBody(this, token);\n                break;\n            }\n            case InsertionMode.TEXT: {\n                eofInText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                tokenInTableText(this, token);\n                break;\n            }\n            case InsertionMode.IN_TEMPLATE: {\n                eofInTemplate(this, token);\n                break;\n            }\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                stopParsing(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n    /** @internal */\n    onWhitespaceCharacter(token) {\n        if (this.skipNextNewLine) {\n            this.skipNextNewLine = false;\n            if (token.chars.charCodeAt(0) === unicode.CODE_POINTS.LINE_FEED) {\n                if (token.chars.length === 1) {\n                    return;\n                }\n                token.chars = token.chars.substr(1);\n            }\n        }\n        if (this.tokenizer.inForeignNode) {\n            this._insertCharacters(token);\n            return;\n        }\n        switch (this.insertionMode) {\n            case InsertionMode.IN_HEAD:\n            case InsertionMode.IN_HEAD_NO_SCRIPT:\n            case InsertionMode.AFTER_HEAD:\n            case InsertionMode.TEXT:\n            case InsertionMode.IN_COLUMN_GROUP:\n            case InsertionMode.IN_SELECT:\n            case InsertionMode.IN_SELECT_IN_TABLE:\n            case InsertionMode.IN_FRAMESET:\n            case InsertionMode.AFTER_FRAMESET: {\n                this._insertCharacters(token);\n                break;\n            }\n            case InsertionMode.IN_BODY:\n            case InsertionMode.IN_CAPTION:\n            case InsertionMode.IN_CELL:\n            case InsertionMode.IN_TEMPLATE:\n            case InsertionMode.AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_BODY:\n            case InsertionMode.AFTER_AFTER_FRAMESET: {\n                whitespaceCharacterInBody(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE:\n            case InsertionMode.IN_TABLE_BODY:\n            case InsertionMode.IN_ROW: {\n                characterInTable(this, token);\n                break;\n            }\n            case InsertionMode.IN_TABLE_TEXT: {\n                whitespaceCharacterInTableText(this, token);\n                break;\n            }\n            default:\n            // Do nothing\n        }\n    }\n}\n//Adoption agency algorithm\n//(see: http://www.whatwg.org/specs/web-apps/current-work/multipage/tree-construction.html#adoptionAgency)\n//------------------------------------------------------------------\n//Steps 5-8 of the algorithm\nfunction aaObtainFormattingElementEntry(p, token) {\n    let formattingElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(token.tagName);\n    if (formattingElementEntry) {\n        if (!p.openElements.contains(formattingElementEntry.element)) {\n            p.activeFormattingElements.removeEntry(formattingElementEntry);\n            formattingElementEntry = null;\n        }\n        else if (!p.openElements.hasInScope(token.tagID)) {\n            formattingElementEntry = null;\n        }\n    }\n    else {\n        genericEndTagInBody(p, token);\n    }\n    return formattingElementEntry;\n}\n//Steps 9 and 10 of the algorithm\nfunction aaObtainFurthestBlock(p, formattingElementEntry) {\n    let furthestBlock = null;\n    let idx = p.openElements.stackTop;\n    for (; idx >= 0; idx--) {\n        const element = p.openElements.items[idx];\n        if (element === formattingElementEntry.element) {\n            break;\n        }\n        if (p._isSpecialElement(element, p.openElements.tagIDs[idx])) {\n            furthestBlock = element;\n        }\n    }\n    if (!furthestBlock) {\n        p.openElements.shortenToLength(Math.max(idx, 0));\n        p.activeFormattingElements.removeEntry(formattingElementEntry);\n    }\n    return furthestBlock;\n}\n//Step 13 of the algorithm\nfunction aaInnerLoop(p, furthestBlock, formattingElement) {\n    let lastElement = furthestBlock;\n    let nextElement = p.openElements.getCommonAncestor(furthestBlock);\n    for (let i = 0, element = nextElement; element !== formattingElement; i++, element = nextElement) {\n        //NOTE: store the next element for the next loop iteration (it may be deleted from the stack by step 9.5)\n        nextElement = p.openElements.getCommonAncestor(element);\n        const elementEntry = p.activeFormattingElements.getElementEntry(element);\n        const counterOverflow = elementEntry && i >= AA_INNER_LOOP_ITER;\n        const shouldRemoveFromOpenElements = !elementEntry || counterOverflow;\n        if (shouldRemoveFromOpenElements) {\n            if (counterOverflow) {\n                p.activeFormattingElements.removeEntry(elementEntry);\n            }\n            p.openElements.remove(element);\n        }\n        else {\n            element = aaRecreateElementFromEntry(p, elementEntry);\n            if (lastElement === furthestBlock) {\n                p.activeFormattingElements.bookmark = elementEntry;\n            }\n            p.treeAdapter.detachNode(lastElement);\n            p.treeAdapter.appendChild(element, lastElement);\n            lastElement = element;\n        }\n    }\n    return lastElement;\n}\n//Step 13.7 of the algorithm\nfunction aaRecreateElementFromEntry(p, elementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(elementEntry.element);\n    const newElement = p.treeAdapter.createElement(elementEntry.token.tagName, ns, elementEntry.token.attrs);\n    p.openElements.replace(elementEntry.element, newElement);\n    elementEntry.element = newElement;\n    return newElement;\n}\n//Step 14 of the algorithm\nfunction aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement) {\n    const tn = p.treeAdapter.getTagName(commonAncestor);\n    const tid = getTagID(tn);\n    if (p._isElementCausesFosterParenting(tid)) {\n        p._fosterParentElement(lastElement);\n    }\n    else {\n        const ns = p.treeAdapter.getNamespaceURI(commonAncestor);\n        if (tid === $.TEMPLATE && ns === NS.HTML) {\n            commonAncestor = p.treeAdapter.getTemplateContent(commonAncestor);\n        }\n        p.treeAdapter.appendChild(commonAncestor, lastElement);\n    }\n}\n//Steps 15-19 of the algorithm\nfunction aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry) {\n    const ns = p.treeAdapter.getNamespaceURI(formattingElementEntry.element);\n    const { token } = formattingElementEntry;\n    const newElement = p.treeAdapter.createElement(token.tagName, ns, token.attrs);\n    p._adoptNodes(furthestBlock, newElement);\n    p.treeAdapter.appendChild(furthestBlock, newElement);\n    p.activeFormattingElements.insertElementAfterBookmark(newElement, token);\n    p.activeFormattingElements.removeEntry(formattingElementEntry);\n    p.openElements.remove(formattingElementEntry.element);\n    p.openElements.insertAfter(furthestBlock, newElement, token.tagID);\n}\n//Algorithm entry point\nfunction callAdoptionAgency(p, token) {\n    for (let i = 0; i < AA_OUTER_LOOP_ITER; i++) {\n        const formattingElementEntry = aaObtainFormattingElementEntry(p, token);\n        if (!formattingElementEntry) {\n            break;\n        }\n        const furthestBlock = aaObtainFurthestBlock(p, formattingElementEntry);\n        if (!furthestBlock) {\n            break;\n        }\n        p.activeFormattingElements.bookmark = formattingElementEntry;\n        const lastElement = aaInnerLoop(p, furthestBlock, formattingElementEntry.element);\n        const commonAncestor = p.openElements.getCommonAncestor(formattingElementEntry.element);\n        p.treeAdapter.detachNode(lastElement);\n        if (commonAncestor)\n            aaInsertLastNodeInCommonAncestor(p, commonAncestor, lastElement);\n        aaReplaceFormattingElement(p, furthestBlock, formattingElementEntry);\n    }\n}\n//Generic token handlers\n//------------------------------------------------------------------\nfunction appendComment(p, token) {\n    p._appendCommentNode(token, p.openElements.currentTmplContentOrNode);\n}\nfunction appendCommentToRootHtmlElement(p, token) {\n    p._appendCommentNode(token, p.openElements.items[0]);\n}\nfunction appendCommentToDocument(p, token) {\n    p._appendCommentNode(token, p.document);\n}\nfunction stopParsing(p, token) {\n    p.stopped = true;\n    // NOTE: Set end locations for elements that remain on the open element stack.\n    if (token.location) {\n        // NOTE: If we are not in a fragment, `html` and `body` will stay on the stack.\n        // This is a problem, as we might overwrite their end position here.\n        const target = p.fragmentContext ? 0 : 2;\n        for (let i = p.openElements.stackTop; i >= target; i--) {\n            p._setEndLocation(p.openElements.items[i], token);\n        }\n        // Handle `html` and `body`\n        if (!p.fragmentContext && p.openElements.stackTop >= 0) {\n            const htmlElement = p.openElements.items[0];\n            const htmlLocation = p.treeAdapter.getNodeSourceCodeLocation(htmlElement);\n            if (htmlLocation && !htmlLocation.endTag) {\n                p._setEndLocation(htmlElement, token);\n                if (p.openElements.stackTop >= 1) {\n                    const bodyElement = p.openElements.items[1];\n                    const bodyLocation = p.treeAdapter.getNodeSourceCodeLocation(bodyElement);\n                    if (bodyLocation && !bodyLocation.endTag) {\n                        p._setEndLocation(bodyElement, token);\n                    }\n                }\n            }\n        }\n    }\n}\n// The \"initial\" insertion mode\n//------------------------------------------------------------------\nfunction doctypeInInitialMode(p, token) {\n    p._setDocumentType(token);\n    const mode = token.forceQuirks ? DOCUMENT_MODE.QUIRKS : doctype.getDocumentMode(token);\n    if (!doctype.isConforming(token)) {\n        p._err(token, ERR.nonConformingDoctype);\n    }\n    p.treeAdapter.setDocumentMode(p.document, mode);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n}\nfunction tokenInInitialMode(p, token) {\n    p._err(token, ERR.missingDoctype, true);\n    p.treeAdapter.setDocumentMode(p.document, DOCUMENT_MODE.QUIRKS);\n    p.insertionMode = InsertionMode.BEFORE_HTML;\n    p._processToken(token);\n}\n// The \"before html\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHtml(p, token) {\n    if (token.tagID === $.HTML) {\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.BEFORE_HEAD;\n    }\n    else {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction endTagBeforeHtml(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HTML || tn === $.HEAD || tn === $.BODY || tn === $.BR) {\n        tokenBeforeHtml(p, token);\n    }\n}\nfunction tokenBeforeHtml(p, token) {\n    p._insertFakeRootElement();\n    p.insertionMode = InsertionMode.BEFORE_HEAD;\n    p._processToken(token);\n}\n// The \"before head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagBeforeHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.HEAD: {\n            p._insertElement(token, NS.HTML);\n            p.headElement = p.openElements.current;\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        default: {\n            tokenBeforeHead(p, token);\n        }\n    }\n}\nfunction endTagBeforeHead(p, token) {\n    const tn = token.tagID;\n    if (tn === $.HEAD || tn === $.BODY || tn === $.HTML || tn === $.BR) {\n        tokenBeforeHead(p, token);\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenBeforeHead(p, token) {\n    p._insertFakeElement(TN.HEAD, $.HEAD);\n    p.headElement = p.openElements.current;\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"in head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TITLE: {\n            p._switchToTextParsing(token, TokenizerMode.RCDATA);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            }\n            else {\n                p._insertElement(token, NS.HTML);\n                p.insertionMode = InsertionMode.IN_HEAD_NO_SCRIPT;\n            }\n            break;\n        }\n        case $.NOFRAMES:\n        case $.STYLE: {\n            p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n            break;\n        }\n        case $.SCRIPT: {\n            p._switchToTextParsing(token, TokenizerMode.SCRIPT_DATA);\n            break;\n        }\n        case $.TEMPLATE: {\n            p._insertTemplate(token);\n            p.activeFormattingElements.insertMarker();\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_TEMPLATE;\n            p.tmplInsertionModeStack.unshift(InsertionMode.IN_TEMPLATE);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenInHead(p, token);\n        }\n    }\n}\nfunction endTagInHead(p, token) {\n    switch (token.tagID) {\n        case $.HEAD: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.AFTER_HEAD;\n            break;\n        }\n        case $.BODY:\n        case $.BR:\n        case $.HTML: {\n            tokenInHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction templateEndTagInHead(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.generateImpliedEndTagsThoroughly();\n        if (p.openElements.currentTagId !== $.TEMPLATE) {\n            p._err(token, ERR.closingOfElementWithOpenChildElements);\n        }\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n    }\n    else {\n        p._err(token, ERR.endTagWithoutMatchingOpenElement);\n    }\n}\nfunction tokenInHead(p, token) {\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.AFTER_HEAD;\n    p._processToken(token);\n}\n// The \"in head no script\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.HEAD:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.STYLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            p._err(token, ERR.nestedNoscriptInHead);\n            break;\n        }\n        default: {\n            tokenInHeadNoScript(p, token);\n        }\n    }\n}\nfunction endTagInHeadNoScript(p, token) {\n    switch (token.tagID) {\n        case $.NOSCRIPT: {\n            p.openElements.pop();\n            p.insertionMode = InsertionMode.IN_HEAD;\n            break;\n        }\n        case $.BR: {\n            tokenInHeadNoScript(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenInHeadNoScript(p, token) {\n    const errCode = token.type === TokenType.EOF ? ERR.openElementsLeftAfterEof : ERR.disallowedContentInNoscriptInHead;\n    p._err(token, errCode);\n    p.openElements.pop();\n    p.insertionMode = InsertionMode.IN_HEAD;\n    p._processToken(token);\n}\n// The \"after head\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.BODY: {\n            p._insertElement(token, NS.HTML);\n            p.framesetOk = false;\n            p.insertionMode = InsertionMode.IN_BODY;\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_FRAMESET;\n            break;\n        }\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            p._err(token, ERR.abandonedHeadElementChild);\n            p.openElements.push(p.headElement, $.HEAD);\n            startTagInHead(p, token);\n            p.openElements.remove(p.headElement);\n            break;\n        }\n        case $.HEAD: {\n            p._err(token, ERR.misplacedStartTagForHeadElement);\n            break;\n        }\n        default: {\n            tokenAfterHead(p, token);\n        }\n    }\n}\nfunction endTagAfterHead(p, token) {\n    switch (token.tagID) {\n        case $.BODY:\n        case $.HTML:\n        case $.BR: {\n            tokenAfterHead(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            p._err(token, ERR.endTagWithoutMatchingOpenElement);\n        }\n    }\n}\nfunction tokenAfterHead(p, token) {\n    p._insertFakeElement(TN.BODY, $.BODY);\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in body\" insertion mode\n//------------------------------------------------------------------\nfunction modeInBody(p, token) {\n    switch (token.type) {\n        case TokenType.CHARACTER: {\n            characterInBody(p, token);\n            break;\n        }\n        case TokenType.WHITESPACE_CHARACTER: {\n            whitespaceCharacterInBody(p, token);\n            break;\n        }\n        case TokenType.COMMENT: {\n            appendComment(p, token);\n            break;\n        }\n        case TokenType.START_TAG: {\n            startTagInBody(p, token);\n            break;\n        }\n        case TokenType.END_TAG: {\n            endTagInBody(p, token);\n            break;\n        }\n        case TokenType.EOF: {\n            eofInBody(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction whitespaceCharacterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n}\nfunction characterInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction htmlStartTagInBody(p, token) {\n    if (p.openElements.tmplCount === 0) {\n        p.treeAdapter.adoptAttributes(p.openElements.items[0], token.attrs);\n    }\n}\nfunction bodyStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (bodyElement && p.openElements.tmplCount === 0) {\n        p.framesetOk = false;\n        p.treeAdapter.adoptAttributes(bodyElement, token.attrs);\n    }\n}\nfunction framesetStartTagInBody(p, token) {\n    const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n    if (p.framesetOk && bodyElement) {\n        p.treeAdapter.detachNode(bodyElement);\n        p.openElements.popAllUpToHtmlElement();\n        p._insertElement(token, NS.HTML);\n        p.insertionMode = InsertionMode.IN_FRAMESET;\n    }\n}\nfunction addressStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction numberedHeaderStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    if (p.openElements.currentTagId !== undefined && NUMBERED_HEADERS.has(p.openElements.currentTagId)) {\n        p.openElements.pop();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction preStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of pre blocks are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.framesetOk = false;\n}\nfunction formStartTagInBody(p, token) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    if (!p.formElement || inTemplate) {\n        if (p.openElements.hasInButtonScope($.P)) {\n            p._closePElement();\n        }\n        p._insertElement(token, NS.HTML);\n        if (!inTemplate) {\n            p.formElement = p.openElements.current;\n        }\n    }\n}\nfunction listItemStartTagInBody(p, token) {\n    p.framesetOk = false;\n    const tn = token.tagID;\n    for (let i = p.openElements.stackTop; i >= 0; i--) {\n        const elementId = p.openElements.tagIDs[i];\n        if ((tn === $.LI && elementId === $.LI) ||\n            ((tn === $.DD || tn === $.DT) && (elementId === $.DD || elementId === $.DT))) {\n            p.openElements.generateImpliedEndTagsWithExclusion(elementId);\n            p.openElements.popUntilTagNamePopped(elementId);\n            break;\n        }\n        if (elementId !== $.ADDRESS &&\n            elementId !== $.DIV &&\n            elementId !== $.P &&\n            p._isSpecialElement(p.openElements.items[i], elementId)) {\n            break;\n        }\n    }\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction plaintextStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.tokenizer.state = TokenizerMode.PLAINTEXT;\n}\nfunction buttonStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BUTTON)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped($.BUTTON);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n}\nfunction aStartTagInBody(p, token) {\n    const activeElementEntry = p.activeFormattingElements.getElementEntryInScopeWithTagName(TN.A);\n    if (activeElementEntry) {\n        callAdoptionAgency(p, token);\n        p.openElements.remove(activeElementEntry.element);\n        p.activeFormattingElements.removeEntry(activeElementEntry);\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction bStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction nobrStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    if (p.openElements.hasInScope($.NOBR)) {\n        callAdoptionAgency(p, token);\n        p._reconstructActiveFormattingElements();\n    }\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.pushElement(p.openElements.current, token);\n}\nfunction appletStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.activeFormattingElements.insertMarker();\n    p.framesetOk = false;\n}\nfunction tableStartTagInBody(p, token) {\n    if (p.treeAdapter.getDocumentMode(p.document) !== DOCUMENT_MODE.QUIRKS && p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.IN_TABLE;\n}\nfunction areaStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction isHiddenInput(token) {\n    const inputType = getTokenAttr(token, ATTRS.TYPE);\n    return inputType != null && inputType.toLowerCase() === HIDDEN_INPUT_TYPE;\n}\nfunction inputStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._appendElement(token, NS.HTML);\n    if (!isHiddenInput(token)) {\n        p.framesetOk = false;\n    }\n    token.ackSelfClosing = true;\n}\nfunction paramStartTagInBody(p, token) {\n    p._appendElement(token, NS.HTML);\n    token.ackSelfClosing = true;\n}\nfunction hrStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._appendElement(token, NS.HTML);\n    p.framesetOk = false;\n    token.ackSelfClosing = true;\n}\nfunction imageStartTagInBody(p, token) {\n    token.tagName = TN.IMG;\n    token.tagID = $.IMG;\n    areaStartTagInBody(p, token);\n}\nfunction textareaStartTagInBody(p, token) {\n    p._insertElement(token, NS.HTML);\n    //NOTE: If the next token is a U+000A LINE FEED (LF) character token, then ignore that token and move\n    //on to the next one. (Newlines at the start of textarea elements are ignored as an authoring convenience.)\n    p.skipNextNewLine = true;\n    p.tokenizer.state = TokenizerMode.RCDATA;\n    p.originalInsertionMode = p.insertionMode;\n    p.framesetOk = false;\n    p.insertionMode = InsertionMode.TEXT;\n}\nfunction xmpStartTagInBody(p, token) {\n    if (p.openElements.hasInButtonScope($.P)) {\n        p._closePElement();\n    }\n    p._reconstructActiveFormattingElements();\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction iframeStartTagInBody(p, token) {\n    p.framesetOk = false;\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\n//NOTE: here we assume that we always act as a user agent with enabled plugins/frames, so we parse\n//<noembed>/<noframes> as rawtext.\nfunction rawTextStartTagInBody(p, token) {\n    p._switchToTextParsing(token, TokenizerMode.RAWTEXT);\n}\nfunction selectStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n    p.framesetOk = false;\n    p.insertionMode =\n        p.insertionMode === InsertionMode.IN_TABLE ||\n            p.insertionMode === InsertionMode.IN_CAPTION ||\n            p.insertionMode === InsertionMode.IN_TABLE_BODY ||\n            p.insertionMode === InsertionMode.IN_ROW ||\n            p.insertionMode === InsertionMode.IN_CELL\n            ? InsertionMode.IN_SELECT_IN_TABLE\n            : InsertionMode.IN_SELECT;\n}\nfunction optgroupStartTagInBody(p, token) {\n    if (p.openElements.currentTagId === $.OPTION) {\n        p.openElements.pop();\n    }\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction rbStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTags();\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction rtStartTagInBody(p, token) {\n    if (p.openElements.hasInScope($.RUBY)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.RTC);\n    }\n    p._insertElement(token, NS.HTML);\n}\nfunction mathStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenMathMLAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.MATHML);\n    }\n    else {\n        p._insertElement(token, NS.MATHML);\n    }\n    token.ackSelfClosing = true;\n}\nfunction svgStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    foreignContent.adjustTokenSVGAttrs(token);\n    foreignContent.adjustTokenXMLAttrs(token);\n    if (token.selfClosing) {\n        p._appendElement(token, NS.SVG);\n    }\n    else {\n        p._insertElement(token, NS.SVG);\n    }\n    token.ackSelfClosing = true;\n}\nfunction genericStartTagInBody(p, token) {\n    p._reconstructActiveFormattingElements();\n    p._insertElement(token, NS.HTML);\n}\nfunction startTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.I:\n        case $.S:\n        case $.B:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            bStartTagInBody(p, token);\n            break;\n        }\n        case $.A: {\n            aStartTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderStartTagInBody(p, token);\n            break;\n        }\n        case $.P:\n        case $.DL:\n        case $.OL:\n        case $.UL:\n        case $.DIV:\n        case $.DIR:\n        case $.NAV:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.DETAILS:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressStartTagInBody(p, token);\n            break;\n        }\n        case $.LI:\n        case $.DD:\n        case $.DT: {\n            listItemStartTagInBody(p, token);\n            break;\n        }\n        case $.BR:\n        case $.IMG:\n        case $.WBR:\n        case $.AREA:\n        case $.EMBED:\n        case $.KEYGEN: {\n            areaStartTagInBody(p, token);\n            break;\n        }\n        case $.HR: {\n            hrStartTagInBody(p, token);\n            break;\n        }\n        case $.RB:\n        case $.RTC: {\n            rbStartTagInBody(p, token);\n            break;\n        }\n        case $.RT:\n        case $.RP: {\n            rtStartTagInBody(p, token);\n            break;\n        }\n        case $.PRE:\n        case $.LISTING: {\n            preStartTagInBody(p, token);\n            break;\n        }\n        case $.XMP: {\n            xmpStartTagInBody(p, token);\n            break;\n        }\n        case $.SVG: {\n            svgStartTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlStartTagInBody(p, token);\n            break;\n        }\n        case $.BASE:\n        case $.LINK:\n        case $.META:\n        case $.STYLE:\n        case $.TITLE:\n        case $.SCRIPT:\n        case $.BGSOUND:\n        case $.BASEFONT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.BODY: {\n            bodyStartTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInBody(p, token);\n            break;\n        }\n        case $.NOBR: {\n            nobrStartTagInBody(p, token);\n            break;\n        }\n        case $.MATH: {\n            mathStartTagInBody(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInBody(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInBody(p, token);\n            break;\n        }\n        case $.PARAM:\n        case $.TRACK:\n        case $.SOURCE: {\n            paramStartTagInBody(p, token);\n            break;\n        }\n        case $.IMAGE: {\n            imageStartTagInBody(p, token);\n            break;\n        }\n        case $.BUTTON: {\n            buttonStartTagInBody(p, token);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletStartTagInBody(p, token);\n            break;\n        }\n        case $.IFRAME: {\n            iframeStartTagInBody(p, token);\n            break;\n        }\n        case $.SELECT: {\n            selectStartTagInBody(p, token);\n            break;\n        }\n        case $.OPTION:\n        case $.OPTGROUP: {\n            optgroupStartTagInBody(p, token);\n            break;\n        }\n        case $.NOEMBED:\n        case $.NOFRAMES: {\n            rawTextStartTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            framesetStartTagInBody(p, token);\n            break;\n        }\n        case $.TEXTAREA: {\n            textareaStartTagInBody(p, token);\n            break;\n        }\n        case $.NOSCRIPT: {\n            if (p.options.scriptingEnabled) {\n                rawTextStartTagInBody(p, token);\n            }\n            else {\n                genericStartTagInBody(p, token);\n            }\n            break;\n        }\n        case $.PLAINTEXT: {\n            plaintextStartTagInBody(p, token);\n            break;\n        }\n        case $.COL:\n        case $.TH:\n        case $.TD:\n        case $.TR:\n        case $.HEAD:\n        case $.FRAME:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.CAPTION:\n        case $.COLGROUP: {\n            // Ignore token\n            break;\n        }\n        default: {\n            genericStartTagInBody(p, token);\n        }\n    }\n}\nfunction bodyEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        //NOTE: <body> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo) {\n            const bodyElement = p.openElements.tryPeekProperlyNestedBodyElement();\n            if (bodyElement) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n}\nfunction htmlEndTagInBody(p, token) {\n    if (p.openElements.hasInScope($.BODY)) {\n        p.insertionMode = InsertionMode.AFTER_BODY;\n        endTagAfterBody(p, token);\n    }\n}\nfunction addressEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction formEndTagInBody(p) {\n    const inTemplate = p.openElements.tmplCount > 0;\n    const { formElement } = p;\n    if (!inTemplate) {\n        p.formElement = null;\n    }\n    if ((formElement || inTemplate) && p.openElements.hasInScope($.FORM)) {\n        p.openElements.generateImpliedEndTags();\n        if (inTemplate) {\n            p.openElements.popUntilTagNamePopped($.FORM);\n        }\n        else if (formElement) {\n            p.openElements.remove(formElement);\n        }\n    }\n}\nfunction pEndTagInBody(p) {\n    if (!p.openElements.hasInButtonScope($.P)) {\n        p._insertFakeElement(TN.P, $.P);\n    }\n    p._closePElement();\n}\nfunction liEndTagInBody(p) {\n    if (p.openElements.hasInListItemScope($.LI)) {\n        p.openElements.generateImpliedEndTagsWithExclusion($.LI);\n        p.openElements.popUntilTagNamePopped($.LI);\n    }\n}\nfunction ddEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTagsWithExclusion(tn);\n        p.openElements.popUntilTagNamePopped(tn);\n    }\n}\nfunction numberedHeaderEndTagInBody(p) {\n    if (p.openElements.hasNumberedHeaderInScope()) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilNumberedHeaderPopped();\n    }\n}\nfunction appletEndTagInBody(p, token) {\n    const tn = token.tagID;\n    if (p.openElements.hasInScope(tn)) {\n        p.openElements.generateImpliedEndTags();\n        p.openElements.popUntilTagNamePopped(tn);\n        p.activeFormattingElements.clearToLastMarker();\n    }\n}\nfunction brEndTagInBody(p) {\n    p._reconstructActiveFormattingElements();\n    p._insertFakeElement(TN.BR, $.BR);\n    p.openElements.pop();\n    p.framesetOk = false;\n}\nfunction genericEndTagInBody(p, token) {\n    const tn = token.tagName;\n    const tid = token.tagID;\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        const elementId = p.openElements.tagIDs[i];\n        // Compare the tag name here, as the tag might not be a known tag with an ID.\n        if (tid === elementId && (tid !== $.UNKNOWN || p.treeAdapter.getTagName(element) === tn)) {\n            p.openElements.generateImpliedEndTagsWithExclusion(tid);\n            if (p.openElements.stackTop >= i)\n                p.openElements.shortenToLength(i);\n            break;\n        }\n        if (p._isSpecialElement(element, elementId)) {\n            break;\n        }\n    }\n}\nfunction endTagInBody(p, token) {\n    switch (token.tagID) {\n        case $.A:\n        case $.B:\n        case $.I:\n        case $.S:\n        case $.U:\n        case $.EM:\n        case $.TT:\n        case $.BIG:\n        case $.CODE:\n        case $.FONT:\n        case $.NOBR:\n        case $.SMALL:\n        case $.STRIKE:\n        case $.STRONG: {\n            callAdoptionAgency(p, token);\n            break;\n        }\n        case $.P: {\n            pEndTagInBody(p);\n            break;\n        }\n        case $.DL:\n        case $.UL:\n        case $.OL:\n        case $.DIR:\n        case $.DIV:\n        case $.NAV:\n        case $.PRE:\n        case $.MAIN:\n        case $.MENU:\n        case $.ASIDE:\n        case $.BUTTON:\n        case $.CENTER:\n        case $.FIGURE:\n        case $.FOOTER:\n        case $.HEADER:\n        case $.HGROUP:\n        case $.DIALOG:\n        case $.ADDRESS:\n        case $.ARTICLE:\n        case $.DETAILS:\n        case $.SEARCH:\n        case $.SECTION:\n        case $.SUMMARY:\n        case $.LISTING:\n        case $.FIELDSET:\n        case $.BLOCKQUOTE:\n        case $.FIGCAPTION: {\n            addressEndTagInBody(p, token);\n            break;\n        }\n        case $.LI: {\n            liEndTagInBody(p);\n            break;\n        }\n        case $.DD:\n        case $.DT: {\n            ddEndTagInBody(p, token);\n            break;\n        }\n        case $.H1:\n        case $.H2:\n        case $.H3:\n        case $.H4:\n        case $.H5:\n        case $.H6: {\n            numberedHeaderEndTagInBody(p);\n            break;\n        }\n        case $.BR: {\n            brEndTagInBody(p);\n            break;\n        }\n        case $.BODY: {\n            bodyEndTagInBody(p, token);\n            break;\n        }\n        case $.HTML: {\n            htmlEndTagInBody(p, token);\n            break;\n        }\n        case $.FORM: {\n            formEndTagInBody(p);\n            break;\n        }\n        case $.APPLET:\n        case $.OBJECT:\n        case $.MARQUEE: {\n            appletEndTagInBody(p, token);\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default: {\n            genericEndTagInBody(p, token);\n        }\n    }\n}\nfunction eofInBody(p, token) {\n    if (p.tmplInsertionModeStack.length > 0) {\n        eofInTemplate(p, token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"text\" insertion mode\n//------------------------------------------------------------------\nfunction endTagInText(p, token) {\n    var _a;\n    if (token.tagID === $.SCRIPT) {\n        (_a = p.scriptHandler) === null || _a === void 0 ? void 0 : _a.call(p, p.openElements.current);\n    }\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n}\nfunction eofInText(p, token) {\n    p._err(token, ERR.eofInElementThatCanContainOnlyText);\n    p.openElements.pop();\n    p.insertionMode = p.originalInsertionMode;\n    p.onEof(token);\n}\n// The \"in table\" insertion mode\n//------------------------------------------------------------------\nfunction characterInTable(p, token) {\n    if (p.openElements.currentTagId !== undefined && TABLE_STRUCTURE_TAGS.has(p.openElements.currentTagId)) {\n        p.pendingCharacterTokens.length = 0;\n        p.hasNonWhitespacePendingCharacterToken = false;\n        p.originalInsertionMode = p.insertionMode;\n        p.insertionMode = InsertionMode.IN_TABLE_TEXT;\n        switch (token.type) {\n            case TokenType.CHARACTER: {\n                characterInTableText(p, token);\n                break;\n            }\n            case TokenType.WHITESPACE_CHARACTER: {\n                whitespaceCharacterInTableText(p, token);\n                break;\n            }\n            // Ignore null\n        }\n    }\n    else {\n        tokenInTable(p, token);\n    }\n}\nfunction captionStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p.activeFormattingElements.insertMarker();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_CAPTION;\n}\nfunction colgroupStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n}\nfunction colStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.COLGROUP, $.COLGROUP);\n    p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n    startTagInColumnGroup(p, token);\n}\nfunction tbodyStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertElement(token, NS.HTML);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n}\nfunction tdStartTagInTable(p, token) {\n    p.openElements.clearBackToTableContext();\n    p._insertFakeElement(TN.TBODY, $.TBODY);\n    p.insertionMode = InsertionMode.IN_TABLE_BODY;\n    startTagInTableBody(p, token);\n}\nfunction tableStartTagInTable(p, token) {\n    if (p.openElements.hasInTableScope($.TABLE)) {\n        p.openElements.popUntilTagNamePopped($.TABLE);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n}\nfunction inputStartTagInTable(p, token) {\n    if (isHiddenInput(token)) {\n        p._appendElement(token, NS.HTML);\n    }\n    else {\n        tokenInTable(p, token);\n    }\n    token.ackSelfClosing = true;\n}\nfunction formStartTagInTable(p, token) {\n    if (!p.formElement && p.openElements.tmplCount === 0) {\n        p._insertElement(token, NS.HTML);\n        p.formElement = p.openElements.current;\n        p.openElements.pop();\n    }\n}\nfunction startTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            tdStartTagInTable(p, token);\n            break;\n        }\n        case $.STYLE:\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            colStartTagInTable(p, token);\n            break;\n        }\n        case $.FORM: {\n            formStartTagInTable(p, token);\n            break;\n        }\n        case $.TABLE: {\n            tableStartTagInTable(p, token);\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            tbodyStartTagInTable(p, token);\n            break;\n        }\n        case $.INPUT: {\n            inputStartTagInTable(p, token);\n            break;\n        }\n        case $.CAPTION: {\n            captionStartTagInTable(p, token);\n            break;\n        }\n        case $.COLGROUP: {\n            colgroupStartTagInTable(p, token);\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction endTagInTable(p, token) {\n    switch (token.tagID) {\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TABLE)) {\n                p.openElements.popUntilTagNamePopped($.TABLE);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInTable(p, token);\n        }\n    }\n}\nfunction tokenInTable(p, token) {\n    const savedFosterParentingState = p.fosterParentingEnabled;\n    p.fosterParentingEnabled = true;\n    // Process token in `In Body` mode\n    modeInBody(p, token);\n    p.fosterParentingEnabled = savedFosterParentingState;\n}\n// The \"in table text\" insertion mode\n//------------------------------------------------------------------\nfunction whitespaceCharacterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n}\nfunction characterInTableText(p, token) {\n    p.pendingCharacterTokens.push(token);\n    p.hasNonWhitespacePendingCharacterToken = true;\n}\nfunction tokenInTableText(p, token) {\n    let i = 0;\n    if (p.hasNonWhitespacePendingCharacterToken) {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            tokenInTable(p, p.pendingCharacterTokens[i]);\n        }\n    }\n    else {\n        for (; i < p.pendingCharacterTokens.length; i++) {\n            p._insertCharacters(p.pendingCharacterTokens[i]);\n        }\n    }\n    p.insertionMode = p.originalInsertionMode;\n    p._processToken(token);\n}\n// The \"in caption\" insertion mode\n//------------------------------------------------------------------\nconst TABLE_VOID_ELEMENTS = new Set([$.CAPTION, $.COL, $.COLGROUP, $.TBODY, $.TD, $.TFOOT, $.TH, $.THEAD, $.TR]);\nfunction startTagInCaption(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.CAPTION)) {\n            p.openElements.generateImpliedEndTags();\n            p.openElements.popUntilTagNamePopped($.CAPTION);\n            p.activeFormattingElements.clearToLastMarker();\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCaption(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.CAPTION:\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.CAPTION)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped($.CAPTION);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                if (tn === $.TABLE) {\n                    endTagInTable(p, token);\n                }\n            }\n            break;\n        }\n        case $.BODY:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TBODY:\n        case $.TD:\n        case $.TFOOT:\n        case $.TH:\n        case $.THEAD:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in column group\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.COL: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction endTagInColumnGroup(p, token) {\n    switch (token.tagID) {\n        case $.COLGROUP: {\n            if (p.openElements.currentTagId === $.COLGROUP) {\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        case $.COL: {\n            // Ignore token\n            break;\n        }\n        default: {\n            tokenInColumnGroup(p, token);\n        }\n    }\n}\nfunction tokenInColumnGroup(p, token) {\n    if (p.openElements.currentTagId === $.COLGROUP) {\n        p.openElements.pop();\n        p.insertionMode = InsertionMode.IN_TABLE;\n        p._processToken(token);\n    }\n}\n// The \"in table body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTableBody(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_ROW;\n            break;\n        }\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableBodyContext();\n            p._insertFakeElement(TN.TR, $.TR);\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                startTagInTable(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInTableBody(p, token) {\n    const tn = token.tagID;\n    switch (token.tagID) {\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasTableBodyContextInTableScope()) {\n                p.openElements.clearBackToTableBodyContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE;\n                endTagInTable(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH:\n        case $.TR: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in row\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TH:\n        case $.TD: {\n            p.openElements.clearBackToTableRowContext();\n            p._insertElement(token, NS.HTML);\n            p.insertionMode = InsertionMode.IN_CELL;\n            p.activeFormattingElements.insertMarker();\n            break;\n        }\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                startTagInTableBody(p, token);\n            }\n            break;\n        }\n        default: {\n            startTagInTable(p, token);\n        }\n    }\n}\nfunction endTagInRow(p, token) {\n    switch (token.tagID) {\n        case $.TR: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            }\n            break;\n        }\n        case $.TABLE: {\n            if (p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            if (p.openElements.hasInTableScope(token.tagID) || p.openElements.hasInTableScope($.TR)) {\n                p.openElements.clearBackToTableRowContext();\n                p.openElements.pop();\n                p.insertionMode = InsertionMode.IN_TABLE_BODY;\n                endTagInTableBody(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML:\n        case $.TD:\n        case $.TH: {\n            // Ignore end tag\n            break;\n        }\n        default: {\n            endTagInTable(p, token);\n        }\n    }\n}\n// The \"in cell\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInCell(p, token) {\n    const tn = token.tagID;\n    if (TABLE_VOID_ELEMENTS.has(tn)) {\n        if (p.openElements.hasInTableScope($.TD) || p.openElements.hasInTableScope($.TH)) {\n            p._closeTableCell();\n            startTagInRow(p, token);\n        }\n    }\n    else {\n        startTagInBody(p, token);\n    }\n}\nfunction endTagInCell(p, token) {\n    const tn = token.tagID;\n    switch (tn) {\n        case $.TD:\n        case $.TH: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p.openElements.generateImpliedEndTags();\n                p.openElements.popUntilTagNamePopped(tn);\n                p.activeFormattingElements.clearToLastMarker();\n                p.insertionMode = InsertionMode.IN_ROW;\n            }\n            break;\n        }\n        case $.TABLE:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD:\n        case $.TR: {\n            if (p.openElements.hasInTableScope(tn)) {\n                p._closeTableCell();\n                endTagInRow(p, token);\n            }\n            break;\n        }\n        case $.BODY:\n        case $.CAPTION:\n        case $.COL:\n        case $.COLGROUP:\n        case $.HTML: {\n            // Ignore token\n            break;\n        }\n        default: {\n            endTagInBody(p, token);\n        }\n    }\n}\n// The \"in select\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.OPTGROUP: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.HR: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.INPUT:\n        case $.KEYGEN:\n        case $.TEXTAREA:\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n                if (token.tagID !== $.SELECT) {\n                    p._processStartTag(token);\n                }\n            }\n            break;\n        }\n        case $.SCRIPT:\n        case $.TEMPLATE: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInSelect(p, token) {\n    switch (token.tagID) {\n        case $.OPTGROUP: {\n            if (p.openElements.stackTop > 0 &&\n                p.openElements.currentTagId === $.OPTION &&\n                p.openElements.tagIDs[p.openElements.stackTop - 1] === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            if (p.openElements.currentTagId === $.OPTGROUP) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.OPTION: {\n            if (p.openElements.currentTagId === $.OPTION) {\n                p.openElements.pop();\n            }\n            break;\n        }\n        case $.SELECT: {\n            if (p.openElements.hasInSelectScope($.SELECT)) {\n                p.openElements.popUntilTagNamePopped($.SELECT);\n                p._resetInsertionMode();\n            }\n            break;\n        }\n        case $.TEMPLATE: {\n            templateEndTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The \"in select in table\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        p.openElements.popUntilTagNamePopped($.SELECT);\n        p._resetInsertionMode();\n        p._processStartTag(token);\n    }\n    else {\n        startTagInSelect(p, token);\n    }\n}\nfunction endTagInSelectInTable(p, token) {\n    const tn = token.tagID;\n    if (tn === $.CAPTION ||\n        tn === $.TABLE ||\n        tn === $.TBODY ||\n        tn === $.TFOOT ||\n        tn === $.THEAD ||\n        tn === $.TR ||\n        tn === $.TD ||\n        tn === $.TH) {\n        if (p.openElements.hasInTableScope(tn)) {\n            p.openElements.popUntilTagNamePopped($.SELECT);\n            p._resetInsertionMode();\n            p.onEndTag(token);\n        }\n    }\n    else {\n        endTagInSelect(p, token);\n    }\n}\n// The \"in template\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInTemplate(p, token) {\n    switch (token.tagID) {\n        // First, handle tags that can start without a mode change\n        case $.BASE:\n        case $.BASEFONT:\n        case $.BGSOUND:\n        case $.LINK:\n        case $.META:\n        case $.NOFRAMES:\n        case $.SCRIPT:\n        case $.STYLE:\n        case $.TEMPLATE:\n        case $.TITLE: {\n            startTagInHead(p, token);\n            break;\n        }\n        // Re-process the token in the appropriate mode\n        case $.CAPTION:\n        case $.COLGROUP:\n        case $.TBODY:\n        case $.TFOOT:\n        case $.THEAD: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE;\n            p.insertionMode = InsertionMode.IN_TABLE;\n            startTagInTable(p, token);\n            break;\n        }\n        case $.COL: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_COLUMN_GROUP;\n            p.insertionMode = InsertionMode.IN_COLUMN_GROUP;\n            startTagInColumnGroup(p, token);\n            break;\n        }\n        case $.TR: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_TABLE_BODY;\n            p.insertionMode = InsertionMode.IN_TABLE_BODY;\n            startTagInTableBody(p, token);\n            break;\n        }\n        case $.TD:\n        case $.TH: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_ROW;\n            p.insertionMode = InsertionMode.IN_ROW;\n            startTagInRow(p, token);\n            break;\n        }\n        default: {\n            p.tmplInsertionModeStack[0] = InsertionMode.IN_BODY;\n            p.insertionMode = InsertionMode.IN_BODY;\n            startTagInBody(p, token);\n        }\n    }\n}\nfunction endTagInTemplate(p, token) {\n    if (token.tagID === $.TEMPLATE) {\n        templateEndTagInHead(p, token);\n    }\n}\nfunction eofInTemplate(p, token) {\n    if (p.openElements.tmplCount > 0) {\n        p.openElements.popUntilTagNamePopped($.TEMPLATE);\n        p.activeFormattingElements.clearToLastMarker();\n        p.tmplInsertionModeStack.shift();\n        p._resetInsertionMode();\n        p.onEof(token);\n    }\n    else {\n        stopParsing(p, token);\n    }\n}\n// The \"after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction endTagAfterBody(p, token) {\n    var _a;\n    if (token.tagID === $.HTML) {\n        if (!p.fragmentContext) {\n            p.insertionMode = InsertionMode.AFTER_AFTER_BODY;\n        }\n        //NOTE: <html> is never popped from the stack, so we need to updated\n        //the end location explicitly.\n        if (p.options.sourceCodeLocationInfo && p.openElements.tagIDs[0] === $.HTML) {\n            p._setEndLocation(p.openElements.items[0], token);\n            // Update the body element, if it doesn't have an end tag\n            const bodyElement = p.openElements.items[1];\n            if (bodyElement && !((_a = p.treeAdapter.getNodeSourceCodeLocation(bodyElement)) === null || _a === void 0 ? void 0 : _a.endTag)) {\n                p._setEndLocation(bodyElement, token);\n            }\n        }\n    }\n    else {\n        tokenAfterBody(p, token);\n    }\n}\nfunction tokenAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"in frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagInFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.FRAMESET: {\n            p._insertElement(token, NS.HTML);\n            break;\n        }\n        case $.FRAME: {\n            p._appendElement(token, NS.HTML);\n            token.ackSelfClosing = true;\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagInFrameset(p, token) {\n    if (token.tagID === $.FRAMESET && !p.openElements.isRootHtmlElementCurrent()) {\n        p.openElements.pop();\n        if (!p.fragmentContext && p.openElements.currentTagId !== $.FRAMESET) {\n            p.insertionMode = InsertionMode.AFTER_FRAMESET;\n        }\n    }\n}\n// The \"after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\nfunction endTagAfterFrameset(p, token) {\n    if (token.tagID === $.HTML) {\n        p.insertionMode = InsertionMode.AFTER_AFTER_FRAMESET;\n    }\n}\n// The \"after after body\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterBody(p, token) {\n    if (token.tagID === $.HTML) {\n        startTagInBody(p, token);\n    }\n    else {\n        tokenAfterAfterBody(p, token);\n    }\n}\nfunction tokenAfterAfterBody(p, token) {\n    p.insertionMode = InsertionMode.IN_BODY;\n    modeInBody(p, token);\n}\n// The \"after after frameset\" insertion mode\n//------------------------------------------------------------------\nfunction startTagAfterAfterFrameset(p, token) {\n    switch (token.tagID) {\n        case $.HTML: {\n            startTagInBody(p, token);\n            break;\n        }\n        case $.NOFRAMES: {\n            startTagInHead(p, token);\n            break;\n        }\n        default:\n        // Do nothing\n    }\n}\n// The rules for parsing tokens in foreign content\n//------------------------------------------------------------------\nfunction nullCharacterInForeignContent(p, token) {\n    token.chars = unicode.REPLACEMENT_CHARACTER;\n    p._insertCharacters(token);\n}\nfunction characterInForeignContent(p, token) {\n    p._insertCharacters(token);\n    p.framesetOk = false;\n}\nfunction popUntilHtmlOrIntegrationPoint(p) {\n    while (p.treeAdapter.getNamespaceURI(p.openElements.current) !== NS.HTML &&\n        p.openElements.currentTagId !== undefined &&\n        !p._isIntegrationPoint(p.openElements.currentTagId, p.openElements.current)) {\n        p.openElements.pop();\n    }\n}\nfunction startTagInForeignContent(p, token) {\n    if (foreignContent.causesExit(token)) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._startTagOutsideForeignContent(token);\n    }\n    else {\n        const current = p._getAdjustedCurrentElement();\n        const currentNs = p.treeAdapter.getNamespaceURI(current);\n        if (currentNs === NS.MATHML) {\n            foreignContent.adjustTokenMathMLAttrs(token);\n        }\n        else if (currentNs === NS.SVG) {\n            foreignContent.adjustTokenSVGTagName(token);\n            foreignContent.adjustTokenSVGAttrs(token);\n        }\n        foreignContent.adjustTokenXMLAttrs(token);\n        if (token.selfClosing) {\n            p._appendElement(token, currentNs);\n        }\n        else {\n            p._insertElement(token, currentNs);\n        }\n        token.ackSelfClosing = true;\n    }\n}\nfunction endTagInForeignContent(p, token) {\n    if (token.tagID === $.P || token.tagID === $.BR) {\n        popUntilHtmlOrIntegrationPoint(p);\n        p._endTagOutsideForeignContent(token);\n        return;\n    }\n    for (let i = p.openElements.stackTop; i > 0; i--) {\n        const element = p.openElements.items[i];\n        if (p.treeAdapter.getNamespaceURI(element) === NS.HTML) {\n            p._endTagOutsideForeignContent(token);\n            break;\n        }\n        const tagName = p.treeAdapter.getTagName(element);\n        if (tagName.toLowerCase() === token.tagName) {\n            //NOTE: update the token tag name for `_setEndLocation`.\n            token.tagName = tagName;\n            p.openElements.shortenToLength(i);\n            break;\n        }\n    }\n}\n","export const xmlReplacer = /[\"$&'<>\\u0080-\\uFFFF]/g;\nconst xmlCodeMap = new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [39, \"&apos;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n]);\n// For compatibility with node < 4, we wrap `codePointAt`\nexport const getCodePoint = \n// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition\nString.prototype.codePointAt == null\n    ? (c, index) => (c.charCodeAt(index) & 64512) === 55296\n        ? (c.charCodeAt(index) - 55296) * 1024 +\n            c.charCodeAt(index + 1) -\n            56320 +\n            65536\n        : c.charCodeAt(index)\n    : // http://mathiasbynens.be/notes/javascript-encoding#surrogate-formulae\n        (input, index) => input.codePointAt(index);\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using XML entities.\n *\n * If a character has no equivalent entity, a\n * numeric hexadecimal reference (eg. `&#xfc;`) will be used.\n */\nexport function encodeXML(input) {\n    let returnValue = \"\";\n    let lastIndex = 0;\n    let match;\n    while ((match = xmlReplacer.exec(input)) !== null) {\n        const { index } = match;\n        const char = input.charCodeAt(index);\n        const next = xmlCodeMap.get(char);\n        if (next === undefined) {\n            returnValue += `${input.substring(lastIndex, index)}&#x${getCodePoint(input, index).toString(16)};`;\n            // Increase by 1 if we have a surrogate pair\n            lastIndex = xmlReplacer.lastIndex += Number((char & 64512) === 55296);\n        }\n        else {\n            returnValue += input.substring(lastIndex, index) + next;\n            lastIndex = index + 1;\n        }\n    }\n    return returnValue + input.substr(lastIndex);\n}\n/**\n * Encodes all non-ASCII characters, as well as characters not valid in XML\n * documents using numeric hexadecimal reference (eg. `&#xfc;`).\n *\n * Have a look at `escapeUTF8` if you want a more concise output at the expense\n * of reduced transportability.\n *\n * @param data String to escape.\n */\nexport const escape = encodeXML;\n/**\n * Creates a function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n *\n * @param regex Regular expression to match characters to escape.\n * @param map Map of characters to escape to their entities.\n *\n * @returns Function that escapes all characters matched by the given regular\n * expression using the given map of characters to escape to their entities.\n */\nfunction getEscaper(regex, map) {\n    return function escape(data) {\n        let match;\n        let lastIndex = 0;\n        let result = \"\";\n        while ((match = regex.exec(data))) {\n            if (lastIndex !== match.index) {\n                result += data.substring(lastIndex, match.index);\n            }\n            // We know that this character will be in the map.\n            result += map.get(match[0].charCodeAt(0));\n            // Every match will be of length 1\n            lastIndex = match.index + 1;\n        }\n        return result + data.substring(lastIndex);\n    };\n}\n/**\n * Encodes all characters not valid in XML documents using XML entities.\n *\n * Note that the output will be character-set dependent.\n *\n * @param data String to escape.\n */\nexport const escapeUTF8 = /* #__PURE__ */ getEscaper(/[\"&'<>]/g, xmlCodeMap);\n/**\n * Encodes all characters that have to be escaped in HTML attributes,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeAttribute = \n/* #__PURE__ */ getEscaper(/[\"&\\u00A0]/g, new Map([\n    [34, \"&quot;\"],\n    [38, \"&amp;\"],\n    [160, \"&nbsp;\"],\n]));\n/**\n * Encodes all characters that have to be escaped in HTML text,\n * following {@link https://html.spec.whatwg.org/multipage/parsing.html#escapingString}.\n *\n * @param data String to escape.\n */\nexport const escapeText = /* #__PURE__ */ getEscaper(/[&<>\\u00A0]/g, new Map([\n    [38, \"&amp;\"],\n    [60, \"&lt;\"],\n    [62, \"&gt;\"],\n    [160, \"&nbsp;\"],\n]));\n//# sourceMappingURL=escape.js.map","import { TAG_NAMES as $, NS, hasUnescapedText } from '../common/html.js';\nimport { escapeText, escapeAttribute } from 'entities/escape';\nimport { defaultTreeAdapter } from '../tree-adapters/default.js';\n// Sets\nconst VOID_ELEMENTS = new Set([\n    $.AREA,\n    $.BASE,\n    $.BASEFONT,\n    $.BGSOUND,\n    $.BR,\n    $.COL,\n    $.EMBED,\n    $.FRAME,\n    $.HR,\n    $.IMG,\n    $.INPUT,\n    $.KEYGEN,\n    $.LINK,\n    $.META,\n    $.PARAM,\n    $.SOURCE,\n    $.TRACK,\n    $.WBR,\n]);\nfunction isVoidElement(node, options) {\n    return (options.treeAdapter.isElementNode(node) &&\n        options.treeAdapter.getNamespaceURI(node) === NS.HTML &&\n        VOID_ELEMENTS.has(options.treeAdapter.getTagName(node)));\n}\nconst defaultOpts = { treeAdapter: defaultTreeAdapter, scriptingEnabled: true };\n/**\n * Serializes an AST node to an HTML string.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parse('<!DOCTYPE html><html><head></head><body>Hi there!</body></html>');\n *\n * // Serializes a document.\n * const html = parse5.serialize(document);\n *\n * // Serializes the <html> element content.\n * const str = parse5.serialize(document.childNodes[1]);\n *\n * console.log(str); //> '<head></head><body>Hi there!</body>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serialize(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    if (isVoidElement(node, opts)) {\n        return '';\n    }\n    return serializeChildNodes(node, opts);\n}\n/**\n * Serializes an AST element node to an HTML string, including the element node.\n *\n * @example\n *\n * ```js\n * const parse5 = require('parse5');\n *\n * const document = parse5.parseFragment('<div>Hello, <b>world</b>!</div>');\n *\n * // Serializes the <div> element.\n * const str = parse5.serializeOuter(document.childNodes[0]);\n *\n * console.log(str); //> '<div>Hello, <b>world</b>!</div>'\n * ```\n *\n * @param node Node to serialize.\n * @param options Serialization options.\n */\nexport function serializeOuter(node, options) {\n    const opts = { ...defaultOpts, ...options };\n    return serializeNode(node, opts);\n}\nfunction serializeChildNodes(parentNode, options) {\n    let html = '';\n    // Get container of the child nodes\n    const container = options.treeAdapter.isElementNode(parentNode) &&\n        options.treeAdapter.getTagName(parentNode) === $.TEMPLATE &&\n        options.treeAdapter.getNamespaceURI(parentNode) === NS.HTML\n        ? options.treeAdapter.getTemplateContent(parentNode)\n        : parentNode;\n    const childNodes = options.treeAdapter.getChildNodes(container);\n    if (childNodes) {\n        for (const currentNode of childNodes) {\n            html += serializeNode(currentNode, options);\n        }\n    }\n    return html;\n}\nfunction serializeNode(node, options) {\n    if (options.treeAdapter.isElementNode(node)) {\n        return serializeElement(node, options);\n    }\n    if (options.treeAdapter.isTextNode(node)) {\n        return serializeTextNode(node, options);\n    }\n    if (options.treeAdapter.isCommentNode(node)) {\n        return serializeCommentNode(node, options);\n    }\n    if (options.treeAdapter.isDocumentTypeNode(node)) {\n        return serializeDocumentTypeNode(node, options);\n    }\n    // Return an empty string for unknown nodes\n    return '';\n}\nfunction serializeElement(node, options) {\n    const tn = options.treeAdapter.getTagName(node);\n    return `<${tn}${serializeAttributes(node, options)}>${isVoidElement(node, options) ? '' : `${serializeChildNodes(node, options)}</${tn}>`}`;\n}\nfunction serializeAttributes(node, { treeAdapter }) {\n    let html = '';\n    for (const attr of treeAdapter.getAttrList(node)) {\n        html += ' ';\n        if (attr.namespace) {\n            switch (attr.namespace) {\n                case NS.XML: {\n                    html += `xml:${attr.name}`;\n                    break;\n                }\n                case NS.XMLNS: {\n                    if (attr.name !== 'xmlns') {\n                        html += 'xmlns:';\n                    }\n                    html += attr.name;\n                    break;\n                }\n                case NS.XLINK: {\n                    html += `xlink:${attr.name}`;\n                    break;\n                }\n                default: {\n                    html += `${attr.prefix}:${attr.name}`;\n                }\n            }\n        }\n        else {\n            html += attr.name;\n        }\n        html += `=\"${escapeAttribute(attr.value)}\"`;\n    }\n    return html;\n}\nfunction serializeTextNode(node, options) {\n    const { treeAdapter } = options;\n    const content = treeAdapter.getTextNodeContent(node);\n    const parent = treeAdapter.getParentNode(node);\n    const parentTn = parent && treeAdapter.isElementNode(parent) && treeAdapter.getTagName(parent);\n    return parentTn &&\n        treeAdapter.getNamespaceURI(parent) === NS.HTML &&\n        hasUnescapedText(parentTn, options.scriptingEnabled)\n        ? content\n        : escapeText(content);\n}\nfunction serializeCommentNode(node, { treeAdapter }) {\n    return `<!--${treeAdapter.getCommentNodeContent(node)}-->`;\n}\nfunction serializeDocumentTypeNode(node, { treeAdapter }) {\n    return `<!DOCTYPE ${treeAdapter.getDocumentTypeNodeName(node)}>`;\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Point} Point\n * @typedef {import('unist').Position} Position\n */\n\n/**\n * @typedef NodeLike\n * @property {string} type\n * @property {PositionLike | null | undefined} [position]\n *\n * @typedef PositionLike\n * @property {PointLike | null | undefined} [start]\n * @property {PointLike | null | undefined} [end]\n *\n * @typedef PointLike\n * @property {number | null | undefined} [line]\n * @property {number | null | undefined} [column]\n * @property {number | null | undefined} [offset]\n */\n\n/**\n * Get the ending point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointEnd = point('end')\n\n/**\n * Get the starting point of `node`.\n *\n * @param node\n *   Node.\n * @returns\n *   Point.\n */\nexport const pointStart = point('start')\n\n/**\n * Get the positional info of `node`.\n *\n * @param {'end' | 'start'} type\n *   Side.\n * @returns\n *   Getter.\n */\nfunction point(type) {\n  return point\n\n  /**\n   * Get the point info of `node` at a bound side.\n   *\n   * @param {Node | NodeLike | null | undefined} [node]\n   * @returns {Point | undefined}\n   */\n  function point(node) {\n    const point = (node && node.position && node.position[type]) || {}\n\n    if (\n      typeof point.line === 'number' &&\n      point.line > 0 &&\n      typeof point.column === 'number' &&\n      point.column > 0\n    ) {\n      return {\n        line: point.line,\n        column: point.column,\n        offset:\n          typeof point.offset === 'number' && point.offset > -1\n            ? point.offset\n            : undefined\n      }\n    }\n  }\n}\n\n/**\n * Get the positional info of `node`.\n *\n * @param {Node | NodeLike | null | undefined} [node]\n *   Node.\n * @returns {Position | undefined}\n *   Position.\n */\nexport function position(node) {\n  const start = pointStart(node)\n  const end = pointEnd(node)\n\n  if (start && end) {\n    return {start, end}\n  }\n}\n","/**\n * @typedef {import('unist').Node} Node\n * @typedef {import('unist').Parent} Parent\n */\n\n/**\n * @template Fn\n * @template Fallback\n * @typedef {Fn extends (value: any) => value is infer Thing ? Thing : Fallback} Predicate\n */\n\n/**\n * @callback Check\n *   Check that an arbitrary value is a node.\n * @param {unknown} this\n *   The given context.\n * @param {unknown} [node]\n *   Anything (typically a node).\n * @param {number | null | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean}\n *   Whether this is a node and passes a test.\n *\n * @typedef {Record<string, unknown> | Node} Props\n *   Object to check for equivalence.\n *\n *   Note: `Node` is included as it is common but is not indexable.\n *\n * @typedef {Array<Props | TestFunction | string> | Props | TestFunction | string | null | undefined} Test\n *   Check for an arbitrary node.\n *\n * @callback TestFunction\n *   Check if a node passes a test.\n * @param {unknown} this\n *   The given context.\n * @param {Node} node\n *   A node.\n * @param {number | undefined} [index]\n *   The node’s position in its parent.\n * @param {Parent | undefined} [parent]\n *   The node’s parent.\n * @returns {boolean | undefined | void}\n *   Whether this node passes the test.\n *\n *   Note: `void` is included until TS sees no return as `undefined`.\n */\n\n/**\n * Check if `node` is a `Node` and whether it passes the given test.\n *\n * @param {unknown} node\n *   Thing to check, typically `Node`.\n * @param {Test} test\n *   A check for a specific node.\n * @param {number | null | undefined} index\n *   The node’s position in its parent.\n * @param {Parent | null | undefined} parent\n *   The node’s parent.\n * @param {unknown} context\n *   Context object (`this`) to pass to `test` functions.\n * @returns {boolean}\n *   Whether `node` is a node and passes a test.\n */\nexport const is =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(node: unknown, test: Condition, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((node?: null | undefined) => false) &\n   *   ((node: unknown, test?: null | undefined, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((node: unknown, test?: Test, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => boolean)\n   * )}\n   */\n  (\n    /**\n     * @param {unknown} [node]\n     * @param {Test} [test]\n     * @param {number | null | undefined} [index]\n     * @param {Parent | null | undefined} [parent]\n     * @param {unknown} [context]\n     * @returns {boolean}\n     */\n    // eslint-disable-next-line max-params\n    function (node, test, index, parent, context) {\n      const check = convert(test)\n\n      if (\n        index !== undefined &&\n        index !== null &&\n        (typeof index !== 'number' ||\n          index < 0 ||\n          index === Number.POSITIVE_INFINITY)\n      ) {\n        throw new Error('Expected positive finite index')\n      }\n\n      if (\n        parent !== undefined &&\n        parent !== null &&\n        (!is(parent) || !parent.children)\n      ) {\n        throw new Error('Expected parent node')\n      }\n\n      if (\n        (parent === undefined || parent === null) !==\n        (index === undefined || index === null)\n      ) {\n        throw new Error('Expected both parent and index')\n      }\n\n      return looksLikeANode(node)\n        ? check.call(context, node, index, parent)\n        : false\n    }\n  )\n\n/**\n * Generate an assertion from a test.\n *\n * Useful if you’re going to test many nodes, for example when creating a\n * utility where something else passes a compatible test.\n *\n * The created function is a bit faster because it expects valid input only:\n * a `node`, `index`, and `parent`.\n *\n * @param {Test} test\n *   *   when nullish, checks if `node` is a `Node`.\n *   *   when `string`, works like passing `(node) => node.type === test`.\n *   *   when `function` checks if function passed the node is true.\n *   *   when `object`, checks that all keys in test are in node, and that they have (strictly) equal values.\n *   *   when `array`, checks if any one of the subtests pass.\n * @returns {Check}\n *   An assertion.\n */\nexport const convert =\n  // Note: overloads in JSDoc can’t yet use different `@template`s.\n  /**\n   * @type {(\n   *   (<Condition extends string>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & {type: Condition}) &\n   *   (<Condition extends Props>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Condition) &\n   *   (<Condition extends TestFunction>(test: Condition) => (node: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node & Predicate<Condition, Node>) &\n   *   ((test?: null | undefined) => (node?: unknown, index?: number | null | undefined, parent?: Parent | null | undefined, context?: unknown) => node is Node) &\n   *   ((test?: Test) => Check)\n   * )}\n   */\n  (\n    /**\n     * @param {Test} [test]\n     * @returns {Check}\n     */\n    function (test) {\n      if (test === null || test === undefined) {\n        return ok\n      }\n\n      if (typeof test === 'function') {\n        return castFactory(test)\n      }\n\n      if (typeof test === 'object') {\n        return Array.isArray(test) ? anyFactory(test) : propsFactory(test)\n      }\n\n      if (typeof test === 'string') {\n        return typeFactory(test)\n      }\n\n      throw new Error('Expected function, string, or object as test')\n    }\n  )\n\n/**\n * @param {Array<Props | TestFunction | string>} tests\n * @returns {Check}\n */\nfunction anyFactory(tests) {\n  /** @type {Array<Check>} */\n  const checks = []\n  let index = -1\n\n  while (++index < tests.length) {\n    checks[index] = convert(tests[index])\n  }\n\n  return castFactory(any)\n\n  /**\n   * @this {unknown}\n   * @type {TestFunction}\n   */\n  function any(...parameters) {\n    let index = -1\n\n    while (++index < checks.length) {\n      if (checks[index].apply(this, parameters)) return true\n    }\n\n    return false\n  }\n}\n\n/**\n * Turn an object into a test for a node with a certain fields.\n *\n * @param {Props} check\n * @returns {Check}\n */\nfunction propsFactory(check) {\n  const checkAsRecord = /** @type {Record<string, unknown>} */ (check)\n\n  return castFactory(all)\n\n  /**\n   * @param {Node} node\n   * @returns {boolean}\n   */\n  function all(node) {\n    const nodeAsRecord = /** @type {Record<string, unknown>} */ (\n      /** @type {unknown} */ (node)\n    )\n\n    /** @type {string} */\n    let key\n\n    for (key in check) {\n      if (nodeAsRecord[key] !== checkAsRecord[key]) return false\n    }\n\n    return true\n  }\n}\n\n/**\n * Turn a string into a test for a node with a certain type.\n *\n * @param {string} check\n * @returns {Check}\n */\nfunction typeFactory(check) {\n  return castFactory(type)\n\n  /**\n   * @param {Node} node\n   */\n  function type(node) {\n    return node && node.type === check\n  }\n}\n\n/**\n * Turn a custom test into a test for a node that passes that test.\n *\n * @param {TestFunction} testFunction\n * @returns {Check}\n */\nfunction castFactory(testFunction) {\n  return check\n\n  /**\n   * @this {unknown}\n   * @type {Check}\n   */\n  function check(value, index, parent) {\n    return Boolean(\n      looksLikeANode(value) &&\n        testFunction.call(\n          this,\n          value,\n          typeof index === 'number' ? index : undefined,\n          parent || undefined\n        )\n    )\n  }\n}\n\nfunction ok() {\n  return true\n}\n\n/**\n * @param {unknown} value\n * @returns {value is Node}\n */\nfunction looksLikeANode(value) {\n  return value !== null && typeof value === 'object' && 'type' in value\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {InternalAncestor<InclusiveDescendant<Tree>, Child>} Ancestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {'skip' | boolean} Action\n *   Union of the action types.\n *\n * @typedef {number} Index\n *   Move to the sibling at `index` next (after node itself is completely\n *   traversed).\n *\n *   Useful if mutating the tree, such as removing the node the visitor is\n *   currently on, or any of its previous siblings.\n *   Results less than 0 or greater than or equal to `children.length` stop\n *   traversing the parent.\n *\n * @typedef {[(Action | null | undefined | void)?, (Index | null | undefined)?]} ActionTuple\n *   List with one or two values, the first an action, the second an index.\n *\n * @typedef {Action | ActionTuple | Index | null | undefined | void} VisitorResult\n *   Any value that can be returned from a visitor.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform the parent of node (the last of `ancestors`).\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of an ancestor still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Array<VisitedParents>} ancestors\n *   Ancestors of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [VisitedParents=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Matches<InclusiveDescendant<Tree>, Check>, Ancestor<Tree, Matches<InclusiveDescendant<Tree>, Check>>>} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parents`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Tree type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {convert} from 'unist-util-is'\nimport {color} from 'unist-util-visit-parents/do-not-use-color'\n\n/** @type {Readonly<ActionTuple>} */\nconst empty = []\n\n/**\n * Continue traversing as normal.\n */\nexport const CONTINUE = true\n\n/**\n * Stop traversing immediately.\n */\nexport const EXIT = false\n\n/**\n * Do not traverse this node’s children.\n */\nexport const SKIP = 'skip'\n\n/**\n * Visit nodes, with ancestral information.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} test\n *   `unist-util-is`-compatible test\n * @param {Visitor | boolean | null | undefined} [visitor]\n *   Handle each node.\n * @param {boolean | null | undefined} [reverse]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visitParents(tree, test, visitor, reverse) {\n  /** @type {Test} */\n  let check\n\n  if (typeof test === 'function' && typeof visitor !== 'function') {\n    reverse = visitor\n    // @ts-expect-error no visitor given, so `visitor` is test.\n    visitor = test\n  } else {\n    // @ts-expect-error visitor given, so `test` isn’t a visitor.\n    check = test\n  }\n\n  const is = convert(check)\n  const step = reverse ? -1 : 1\n\n  factory(tree, undefined, [])()\n\n  /**\n   * @param {UnistNode} node\n   * @param {number | undefined} index\n   * @param {Array<UnistParent>} parents\n   */\n  function factory(node, index, parents) {\n    const value = /** @type {Record<string, unknown>} */ (\n      node && typeof node === 'object' ? node : {}\n    )\n\n    if (typeof value.type === 'string') {\n      const name =\n        // `hast`\n        typeof value.tagName === 'string'\n          ? value.tagName\n          : // `xast`\n          typeof value.name === 'string'\n          ? value.name\n          : undefined\n\n      Object.defineProperty(visit, 'name', {\n        value:\n          'node (' + color(node.type + (name ? '<' + name + '>' : '')) + ')'\n      })\n    }\n\n    return visit\n\n    function visit() {\n      /** @type {Readonly<ActionTuple>} */\n      let result = empty\n      /** @type {Readonly<ActionTuple>} */\n      let subresult\n      /** @type {number} */\n      let offset\n      /** @type {Array<UnistParent>} */\n      let grandparents\n\n      if (!test || is(node, index, parents[parents.length - 1] || undefined)) {\n        // @ts-expect-error: `visitor` is now a visitor.\n        result = toResult(visitor(node, parents))\n\n        if (result[0] === EXIT) {\n          return result\n        }\n      }\n\n      if ('children' in node && node.children) {\n        const nodeAsParent = /** @type {UnistParent} */ (node)\n\n        if (nodeAsParent.children && result[0] !== SKIP) {\n          offset = (reverse ? nodeAsParent.children.length : -1) + step\n          grandparents = parents.concat(nodeAsParent)\n\n          while (offset > -1 && offset < nodeAsParent.children.length) {\n            const child = nodeAsParent.children[offset]\n\n            subresult = factory(child, offset, grandparents)()\n\n            if (subresult[0] === EXIT) {\n              return subresult\n            }\n\n            offset =\n              typeof subresult[1] === 'number' ? subresult[1] : offset + step\n          }\n        }\n      }\n\n      return result\n    }\n  }\n}\n\n/**\n * Turn a return value into a clean result.\n *\n * @param {VisitorResult} value\n *   Valid return values from visitors.\n * @returns {Readonly<ActionTuple>}\n *   Clean result.\n */\nfunction toResult(value) {\n  if (Array.isArray(value)) {\n    return value\n  }\n\n  if (typeof value === 'number') {\n    return [CONTINUE, value]\n  }\n\n  return value === null || value === undefined ? empty : [value]\n}\n","/**\n * @import {Options} from 'hast-util-raw'\n * @import {Comment, Doctype, Element, Nodes, RootContent, Root, Text} from 'hast'\n * @import {Raw} from 'mdast-util-to-hast'\n * @import {DefaultTreeAdapterMap, ParserOptions} from 'parse5'\n * @import {Point} from 'unist'\n */\n\n/**\n * @typedef State\n *   Info passed around about the current state.\n * @property {(node: Nodes) => undefined} handle\n *   Add a hast node to the parser.\n * @property {Options} options\n *   User configuration.\n * @property {Parser<DefaultTreeAdapterMap>} parser\n *   Current parser.\n * @property {boolean} stitches\n *   Whether there are stitches.\n */\n\n/**\n * @typedef Stitch\n *   Custom comment-like value we pass through parse5, which contains a\n *   replacement node that we’ll swap back in afterwards.\n * @property {'comment'} type\n *   Node type.\n * @property {{stitch: Nodes}} value\n *   Replacement value.\n */\n\nimport structuredClone from '@ungap/structured-clone'\nimport {fromParse5} from 'hast-util-from-parse5'\nimport {toParse5} from 'hast-util-to-parse5'\nimport {htmlVoidElements} from 'html-void-elements'\nimport {Parser, Token, TokenizerMode, html} from 'parse5'\nimport {pointEnd, pointStart} from 'unist-util-position'\nimport {visit} from 'unist-util-visit'\nimport {webNamespaces} from 'web-namespaces'\nimport {zwitch} from 'zwitch'\n\nconst gfmTagfilterExpression =\n  /<(\\/?)(iframe|noembed|noframes|plaintext|script|style|textarea|title|xmp)(?=[\\t\\n\\f\\r />])/gi\n\n// Node types associated with MDX.\n// <https://github.com/mdx-js/mdx/blob/8a56312/packages/mdx/lib/node-types.js>\nconst knownMdxNames = new Set([\n  'mdxFlowExpression',\n  'mdxJsxFlowElement',\n  'mdxJsxTextElement',\n  'mdxTextExpression',\n  'mdxjsEsm'\n])\n\n/** @type {ParserOptions<DefaultTreeAdapterMap>} */\nconst parseOptions = {sourceCodeLocationInfo: true, scriptingEnabled: false}\n\n/**\n * Pass a hast tree through an HTML parser, which will fix nesting, and turn\n * raw nodes into actual nodes.\n *\n * @param {Nodes} tree\n *   Original hast tree to transform.\n * @param {Options | null | undefined} [options]\n *   Configuration (optional).\n * @returns {Nodes}\n *   Parsed again tree.\n */\nexport function raw(tree, options) {\n  const document = documentMode(tree)\n  /** @type {(node: Nodes, state: State) => undefined} */\n  const one = zwitch('type', {\n    handlers: {root, element, text, comment, doctype, raw: handleRaw},\n    unknown\n  })\n\n  /** @type {State} */\n  const state = {\n    parser: document\n      ? new Parser(parseOptions)\n      : Parser.getFragmentParser(undefined, parseOptions),\n    handle(node) {\n      one(node, state)\n    },\n    stitches: false,\n    options: options || {}\n  }\n\n  one(tree, state)\n  resetTokenizer(state, pointStart())\n\n  const p5 = document ? state.parser.document : state.parser.getFragment()\n  const result = fromParse5(p5, {\n    // To do: support `space`?\n    file: state.options.file\n  })\n\n  if (state.stitches) {\n    visit(result, 'comment', function (node, index, parent) {\n      const stitch = /** @type {Stitch} */ (/** @type {unknown} */ (node))\n      if (stitch.value.stitch && parent && index !== undefined) {\n        /** @type {Array<RootContent>} */\n        const siblings = parent.children\n        // @ts-expect-error: assume the stitch is allowed.\n        siblings[index] = stitch.value.stitch\n        return index\n      }\n    })\n  }\n\n  // Unpack if possible and when not given a `root`.\n  if (\n    result.type === 'root' &&\n    result.children.length === 1 &&\n    result.children[0].type === tree.type\n  ) {\n    return result.children[0]\n  }\n\n  return result\n}\n\n/**\n * Transform all nodes\n *\n * @param {Array<RootContent>} nodes\n *   hast content.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction all(nodes, state) {\n  let index = -1\n\n  /* istanbul ignore else - invalid nodes, see rehypejs/rehype-raw#7. */\n  if (nodes) {\n    while (++index < nodes.length) {\n      state.handle(nodes[index])\n    }\n  }\n}\n\n/**\n * Transform a root.\n *\n * @param {Root} node\n *   hast root node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction root(node, state) {\n  all(node.children, state)\n}\n\n/**\n * Transform an element.\n *\n * @param {Element} node\n *   hast element node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction element(node, state) {\n  startTag(node, state)\n\n  all(node.children, state)\n\n  endTag(node, state)\n}\n\n/**\n * Transform a text.\n *\n * @param {Text} node\n *   hast text node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction text(node, state) {\n  // Allow `DATA` through `PLAINTEXT`,\n  // but when hanging in a tag for example,\n  // switch back to `DATA`.\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  if (state.parser.tokenizer.state > 4) {\n    state.parser.tokenizer.state = 0\n  }\n\n  /** @type {Token.CharacterToken} */\n  const token = {\n    type: Token.TokenType.CHARACTER,\n    chars: node.value,\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a doctype.\n *\n * @param {Doctype} node\n *   hast doctype node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction doctype(node, state) {\n  /** @type {Token.DoctypeToken} */\n  const token = {\n    type: Token.TokenType.DOCTYPE,\n    name: 'html',\n    forceQuirks: false,\n    publicId: '',\n    systemId: '',\n    location: createParse5Location(node)\n  }\n\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a stitch.\n *\n * @param {Nodes} node\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction stitch(node, state) {\n  // Mark that there are stitches, so we need to walk the tree and revert them.\n  state.stitches = true\n\n  /** @type {Nodes} */\n  const clone = cloneWithoutChildren(node)\n\n  // Recurse, because to somewhat handle `[<x>]</x>` (where `[]` denotes the\n  // passed through node).\n  if ('children' in node && 'children' in clone) {\n    // Root in root out.\n    const fakeRoot = /** @type {Root} */ (\n      raw({type: 'root', children: node.children}, state.options)\n    )\n    clone.children = fakeRoot.children\n  }\n\n  // Hack: `value` is supposed to be a string, but as none of the tools\n  // (`parse5` or `hast-util-from-parse5`) looks at it, we can pass nodes\n  // through.\n  comment({type: 'comment', value: {stitch: clone}}, state)\n}\n\n/**\n * Transform a comment (or stitch).\n *\n * @param {Comment | Stitch} node\n *   hast comment node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction comment(node, state) {\n  /** @type {string} */\n  // @ts-expect-error: we pass stitches through.\n  const data = node.value\n\n  /** @type {Token.CommentToken} */\n  const token = {\n    type: Token.TokenType.COMMENT,\n    data,\n    location: createParse5Location(node)\n  }\n  resetTokenizer(state, pointStart(node))\n  // @ts-expect-error: private.\n  state.parser.currentToken = token\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n}\n\n/**\n * Transform a raw node.\n *\n * @param {Raw} node\n *   hast raw node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction handleRaw(node, state) {\n  // Reset preprocessor:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/preprocessor.ts#L18-L31>.\n  state.parser.tokenizer.preprocessor.html = ''\n  state.parser.tokenizer.preprocessor.pos = -1\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.lastGapPos = -2\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.gapStack = []\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.skipNextNewLine = false\n  state.parser.tokenizer.preprocessor.lastChunkWritten = false\n  state.parser.tokenizer.preprocessor.endOfChunkHit = false\n  // @ts-expect-error: private.\n  // type-coverage:ignore-next-line\n  state.parser.tokenizer.preprocessor.isEol = false\n\n  // Now pass `node.value`.\n  setPoint(state, pointStart(node))\n\n  state.parser.tokenizer.write(\n    state.options.tagfilter\n      ? node.value.replace(gfmTagfilterExpression, '&lt;$1$2')\n      : node.value,\n    false\n  )\n  // @ts-expect-error: private.\n  state.parser.tokenizer._runParsingLoop()\n\n  // Character references hang, so if we ended there, we need to flush\n  // those too.\n  // We reset the preprocessor as if the document ends here.\n  // Then one single call to the relevant state does the trick, parse5\n  // consumes the whole token.\n\n  // Note: `State` is not exposed by `parse5`, so these numbers are fragile.\n  // See: <https://github.com/inikulin/parse5/blob/46cba43/packages/parse5/lib/tokenizer/index.ts#L58>\n  // Note: a change to `parse5`, which breaks this, was merged but not released.\n  // Investigate when it is.\n  // To do: remove next major.\n  /* c8 ignore next 12 -- removed in <https://github.com/inikulin/parse5/pull/897> */\n  if (\n    state.parser.tokenizer.state === 72 /* NAMED_CHARACTER_REFERENCE */ ||\n    // @ts-expect-error: removed.\n    state.parser.tokenizer.state === 78 /* NUMERIC_CHARACTER_REFERENCE_END */\n  ) {\n    state.parser.tokenizer.preprocessor.lastChunkWritten = true\n    /** @type {number} */\n    // @ts-expect-error: private.\n    const cp = state.parser.tokenizer._consume()\n    // @ts-expect-error: private.\n    state.parser.tokenizer._callState(cp)\n  }\n}\n\n/**\n * Crash on an unknown node.\n *\n * @param {unknown} node_\n *   unknown node.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Never.\n */\nfunction unknown(node_, state) {\n  const node = /** @type {Nodes} */ (node_)\n\n  if (\n    state.options.passThrough &&\n    state.options.passThrough.includes(node.type)\n  ) {\n    stitch(node, state)\n  } else {\n    let extra = ''\n\n    if (knownMdxNames.has(node.type)) {\n      extra =\n        \". It looks like you are using MDX nodes with `hast-util-raw` (or `rehype-raw`). If you use this because you are using remark or rehype plugins that inject `'html'` nodes, then please raise an issue with that plugin, as its a bad and slow idea. If you use this because you are using markdown syntax, then you have to configure this utility (or plugin) to pass through these nodes (see `passThrough` in docs), but you can also migrate to use the MDX syntax\"\n    }\n\n    throw new Error('Cannot compile `' + node.type + '` node' + extra)\n  }\n}\n\n/**\n * Reset the tokenizer of a parser.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction resetTokenizer(state, point) {\n  setPoint(state, point)\n\n  // Process final characters if they’re still there after hibernating.\n  /** @type {Token.CharacterToken} */\n  // @ts-expect-error: private.\n  const token = state.parser.tokenizer.currentCharacterToken\n\n  if (token && token.location) {\n    token.location.endLine = state.parser.tokenizer.preprocessor.line\n    token.location.endCol = state.parser.tokenizer.preprocessor.col + 1\n    token.location.endOffset = state.parser.tokenizer.preprocessor.offset + 1\n    // @ts-expect-error: private.\n    state.parser.currentToken = token\n    // @ts-expect-error: private.\n    state.parser._processToken(state.parser.currentToken)\n  }\n\n  // Reset tokenizer:\n  // See: <https://github.com/inikulin/parse5/blob/6f7ca60/packages/parse5/lib/tokenizer/index.ts#L187-L223>.\n  // Especially putting it back in the `data` state is useful: some elements,\n  // like textareas and iframes, change the state.\n  // See GH-7.\n  // But also if broken HTML is in `raw`, and then a correct element is given.\n  // See GH-11.\n  // @ts-expect-error: private.\n  state.parser.tokenizer.paused = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.inLoop = false\n\n  // Note: don’t reset `state`, `inForeignNode`, or `lastStartTagName`, we\n  // manually update those when needed.\n  state.parser.tokenizer.active = false\n  // @ts-expect-error: private.\n  state.parser.tokenizer.returnState = TokenizerMode.DATA\n  // @ts-expect-error: private.\n  state.parser.tokenizer.charRefCode = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.consumedAfterSnapshot = -1\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentLocation = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentCharacterToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentToken = null\n  // @ts-expect-error: private.\n  state.parser.tokenizer.currentAttr = {name: '', value: ''}\n}\n\n/**\n * Set current location.\n *\n * @param {State} state\n *   Info passed around about the current state.\n * @param {Point | undefined} point\n *   Point.\n * @returns {undefined}\n *   Nothing.\n */\nfunction setPoint(state, point) {\n  if (point && point.offset !== undefined) {\n    /** @type {Token.Location} */\n    const location = {\n      startLine: point.line,\n      startCol: point.column,\n      startOffset: point.offset,\n      endLine: -1,\n      endCol: -1,\n      endOffset: -1\n    }\n\n    // @ts-expect-error: private.\n    // type-coverage:ignore-next-line\n    state.parser.tokenizer.preprocessor.lineStartPos = -point.column + 1 // Looks weird, but ensures we get correct positional info.\n    state.parser.tokenizer.preprocessor.droppedBufferSize = point.offset\n    state.parser.tokenizer.preprocessor.line = point.line\n    // @ts-expect-error: private.\n    state.parser.tokenizer.currentLocation = location\n  }\n}\n\n/**\n * Emit a start tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction startTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointStart(node))\n\n  const current = state.parser.openElements.current\n  let ns = 'namespaceURI' in current ? current.namespaceURI : webNamespaces.html\n\n  if (ns === webNamespaces.html && tagName === 'svg') {\n    ns = webNamespaces.svg\n  }\n\n  const result = toParse5(\n    // Shallow clone to not delve into `children`: we only need the attributes.\n    {...node, children: []},\n    {space: ns === webNamespaces.svg ? 'svg' : 'html'}\n  )\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.START_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    // We always send start and end tags.\n    selfClosing: false,\n    ackSelfClosing: false,\n    // Always element.\n    /* c8 ignore next */\n    attrs: 'attrs' in result ? result.attrs : [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Set a tag name, similar to how the tokenizer would do it.\n  state.parser.tokenizer.lastStartTagName = tagName\n\n  // `inForeignNode` is correctly set by the parser.\n}\n\n/**\n * Emit an end tag.\n *\n * @param {Element} node\n *   Element.\n * @param {State} state\n *   Info passed around about the current state.\n * @returns {undefined}\n *   Nothing.\n */\nfunction endTag(node, state) {\n  const tagName = node.tagName.toLowerCase()\n  // Do not emit closing tags for HTML void elements.\n  if (\n    !state.parser.tokenizer.inForeignNode &&\n    htmlVoidElements.includes(tagName)\n  ) {\n    return\n  }\n\n  // Ignore tags if we’re in plain text.\n  if (state.parser.tokenizer.state === TokenizerMode.PLAINTEXT) return\n\n  resetTokenizer(state, pointEnd(node))\n\n  /** @type {Token.TagToken} */\n  const tag = {\n    type: Token.TokenType.END_TAG,\n    tagName,\n    tagID: html.getTagID(tagName),\n    selfClosing: false,\n    ackSelfClosing: false,\n    attrs: [],\n    location: createParse5Location(node)\n  }\n\n  // The HTML parsing algorithm works by doing half of the state management in\n  // the tokenizer and half in the parser.\n  // We can’t use the tokenizer here, as we don’t have strings.\n  // So we act *as if* the tokenizer emits tokens:\n\n  // @ts-expect-error: private.\n  state.parser.currentToken = tag\n  // @ts-expect-error: private.\n  state.parser._processToken(state.parser.currentToken)\n\n  // …but then we still need a bunch of work that the tokenizer would normally\n  // do, such as:\n\n  // Switch back to the data state after alternative states that don’t accept\n  // tags:\n  if (\n    // Current element is closed.\n    tagName === state.parser.tokenizer.lastStartTagName &&\n    // `<textarea>` and `<title>`\n    (state.parser.tokenizer.state === TokenizerMode.RCDATA ||\n      // `<iframe>`, `<noembed>`, `<noframes>`, `<style>`, `<xmp>`\n      state.parser.tokenizer.state === TokenizerMode.RAWTEXT ||\n      // `<script>`\n      state.parser.tokenizer.state === TokenizerMode.SCRIPT_DATA)\n    // Note: `<plaintext>` not needed, as it’s the last element.\n  ) {\n    state.parser.tokenizer.state = TokenizerMode.DATA\n  }\n}\n\n/**\n * Check if `node` represents a whole document or a fragment.\n *\n * @param {Nodes} node\n *   hast node.\n * @returns {boolean}\n *   Whether this represents a whole document or a fragment.\n */\nfunction documentMode(node) {\n  const head = node.type === 'root' ? node.children[0] : node\n  return Boolean(\n    head &&\n      (head.type === 'doctype' ||\n        (head.type === 'element' && head.tagName.toLowerCase() === 'html'))\n  )\n}\n\n/**\n * Get a `parse5` location from a node.\n *\n * @param {Nodes | Stitch} node\n *   hast node.\n * @returns {Token.Location}\n *   `parse5` location.\n */\nfunction createParse5Location(node) {\n  const start = pointStart(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n  const end = pointEnd(node) || {\n    line: undefined,\n    column: undefined,\n    offset: undefined\n  }\n\n  /** @type {Record<keyof Token.Location, number | undefined>} */\n  const location = {\n    startLine: start.line,\n    startCol: start.column,\n    startOffset: start.offset,\n    endLine: end.line,\n    endCol: end.column,\n    endOffset: end.offset\n  }\n\n  // @ts-expect-error: unist point values can be `undefined` in hast, which\n  // `parse5` types don’t want.\n  return location\n}\n\n/**\n * @template {Nodes} NodeType\n *   Node type.\n * @param {NodeType} node\n *   Node to clone.\n * @returns {NodeType}\n *   Cloned node, without children.\n */\nfunction cloneWithoutChildren(node) {\n  return 'children' in node\n    ? structuredClone({...node, children: []})\n    : structuredClone(node)\n}\n","/**\n * @typedef {import('unist').Node} UnistNode\n * @typedef {import('unist').Parent} UnistParent\n * @typedef {import('unist-util-visit-parents').VisitorResult} VisitorResult\n */\n\n/**\n * @typedef {Exclude<import('unist-util-is').Test, undefined> | undefined} Test\n *   Test from `unist-util-is`.\n *\n *   Note: we have remove and add `undefined`, because otherwise when generating\n *   automatic `.d.ts` files, TS tries to flatten paths from a local perspective,\n *   which doesn’t work when publishing on npm.\n */\n\n// To do: use types from `unist-util-visit-parents` when it’s released.\n\n/**\n * @typedef {(\n *   Fn extends (value: any) => value is infer Thing\n *   ? Thing\n *   : Fallback\n * )} Predicate\n *   Get the value of a type guard `Fn`.\n * @template Fn\n *   Value; typically function that is a type guard (such as `(x): x is Y`).\n * @template Fallback\n *   Value to yield if `Fn` is not a type guard.\n */\n\n/**\n * @typedef {(\n *   Check extends null | undefined // No test.\n *   ? Value\n *   : Value extends {type: Check} // String (type) test.\n *   ? Value\n *   : Value extends Check // Partial test.\n *   ? Value\n *   : Check extends Function // Function test.\n *   ? Predicate<Check, Value> extends Value\n *     ? Predicate<Check, Value>\n *     : never\n *   : never // Some other test?\n * )} MatchesOne\n *   Check whether a node matches a primitive check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test, but not arrays.\n */\n\n/**\n * @typedef {(\n *   Check extends Array<any>\n *   ? MatchesOne<Value, Check[keyof Check]>\n *   : MatchesOne<Value, Check>\n * )} Matches\n *   Check whether a node matches a check in the type system.\n * @template Value\n *   Value; typically unist `Node`.\n * @template Check\n *   Value; typically `unist-util-is`-compatible test.\n */\n\n/**\n * @typedef {0 | 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9 | 10} Uint\n *   Number; capped reasonably.\n */\n\n/**\n * @typedef {I extends 0 ? 1 : I extends 1 ? 2 : I extends 2 ? 3 : I extends 3 ? 4 : I extends 4 ? 5 : I extends 5 ? 6 : I extends 6 ? 7 : I extends 7 ? 8 : I extends 8 ? 9 : 10} Increment\n *   Increment a number in the type system.\n * @template {Uint} [I=0]\n *   Index.\n */\n\n/**\n * @typedef {(\n *   Node extends UnistParent\n *   ? Node extends {children: Array<infer Children>}\n *     ? Child extends Children ? Node : never\n *     : never\n *   : never\n * )} InternalParent\n *   Collect nodes that can be parents of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {InternalParent<InclusiveDescendant<Tree>, Child>} Parent\n *   Collect nodes in `Tree` that can be parents of `Child`.\n * @template {UnistNode} Tree\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n */\n\n/**\n * @typedef {(\n *   Depth extends Max\n *   ? never\n *   :\n *     | InternalParent<Node, Child>\n *     | InternalAncestor<Node, InternalParent<Node, Child>, Max, Increment<Depth>>\n * )} InternalAncestor\n *   Collect nodes in `Tree` that can be ancestors of `Child`.\n * @template {UnistNode} Node\n *   All node types in a tree.\n * @template {UnistNode} Child\n *   Node to search for.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @typedef {(\n *   Tree extends UnistParent\n *     ? Depth extends Max\n *       ? Tree\n *       : Tree | InclusiveDescendant<Tree['children'][number], Max, Increment<Depth>>\n *     : Tree\n * )} InclusiveDescendant\n *   Collect all (inclusive) descendants of `Tree`.\n *\n *   > 👉 **Note**: for performance reasons, this seems to be the fastest way to\n *   > recurse without actually running into an infinite loop, which the\n *   > previous version did.\n *   >\n *   > Practically, a max of `2` is typically enough assuming a `Root` is\n *   > passed, but it doesn’t improve performance.\n *   > It gets higher with `List > ListItem > Table > TableRow > TableCell`.\n *   > Using up to `10` doesn’t hurt or help either.\n * @template {UnistNode} Tree\n *   Tree type.\n * @template {Uint} [Max=10]\n *   Max; searches up to this depth.\n * @template {Uint} [Depth=0]\n *   Current depth.\n */\n\n/**\n * @callback Visitor\n *   Handle a node (matching `test`, if given).\n *\n *   Visitors are free to transform `node`.\n *   They can also transform `parent`.\n *\n *   Replacing `node` itself, if `SKIP` is not returned, still causes its\n *   descendants to be walked (which is a bug).\n *\n *   When adding or removing previous siblings of `node` (or next siblings, in\n *   case of reverse), the `Visitor` should return a new `Index` to specify the\n *   sibling to traverse after `node` is traversed.\n *   Adding or removing next siblings of `node` (or previous siblings, in case\n *   of reverse) is handled as expected without needing to return a new `Index`.\n *\n *   Removing the children property of `parent` still results in them being\n *   traversed.\n * @param {Visited} node\n *   Found node.\n * @param {Visited extends UnistNode ? number | undefined : never} index\n *   Index of `node` in `parent`.\n * @param {Ancestor extends UnistParent ? Ancestor | undefined : never} parent\n *   Parent of `node`.\n * @returns {VisitorResult}\n *   What to do next.\n *\n *   An `Index` is treated as a tuple of `[CONTINUE, Index]`.\n *   An `Action` is treated as a tuple of `[Action]`.\n *\n *   Passing a tuple back only makes sense if the `Action` is `SKIP`.\n *   When the `Action` is `EXIT`, that action can be returned.\n *   When the `Action` is `CONTINUE`, `Index` can be returned.\n * @template {UnistNode} [Visited=UnistNode]\n *   Visited node type.\n * @template {UnistParent} [Ancestor=UnistParent]\n *   Ancestor type.\n */\n\n/**\n * @typedef {Visitor<Visited, Parent<Ancestor, Visited>>} BuildVisitorFromMatch\n *   Build a typed `Visitor` function from a node and all possible parents.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Visited\n *   Node type.\n * @template {UnistParent} Ancestor\n *   Parent type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromMatch<\n *     Matches<Descendant, Check>,\n *     Extract<Descendant, UnistParent>\n *   >\n * )} BuildVisitorFromDescendants\n *   Build a typed `Visitor` function from a list of descendants and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} Descendant\n *   Node type.\n * @template {Test} Check\n *   Test type.\n */\n\n/**\n * @typedef {(\n *   BuildVisitorFromDescendants<\n *     InclusiveDescendant<Tree>,\n *     Check\n *   >\n * )} BuildVisitor\n *   Build a typed `Visitor` function from a tree and a test.\n *\n *   It will infer which values are passed as `node` and which as `parent`.\n * @template {UnistNode} [Tree=UnistNode]\n *   Node type.\n * @template {Test} [Check=Test]\n *   Test type.\n */\n\nimport {visitParents} from 'unist-util-visit-parents'\n\nexport {CONTINUE, EXIT, SKIP} from 'unist-util-visit-parents'\n\n/**\n * Visit nodes.\n *\n * This algorithm performs *depth-first* *tree traversal* in *preorder*\n * (**NLR**) or if `reverse` is given, in *reverse preorder* (**NRL**).\n *\n * You can choose for which nodes `visitor` is called by passing a `test`.\n * For complex tests, you should test yourself in `visitor`, as it will be\n * faster and will have improved type information.\n *\n * Walking the tree is an intensive task.\n * Make use of the return values of the visitor when possible.\n * Instead of walking a tree multiple times, walk it once, use `unist-util-is`\n * to check if a node matches, and then perform different operations.\n *\n * You can change the tree.\n * See `Visitor` for more info.\n *\n * @overload\n * @param {Tree} tree\n * @param {Check} check\n * @param {BuildVisitor<Tree, Check>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @overload\n * @param {Tree} tree\n * @param {BuildVisitor<Tree>} visitor\n * @param {boolean | null | undefined} [reverse]\n * @returns {undefined}\n *\n * @param {UnistNode} tree\n *   Tree to traverse.\n * @param {Visitor | Test} testOrVisitor\n *   `unist-util-is`-compatible test (optional, omit to pass a visitor).\n * @param {Visitor | boolean | null | undefined} [visitorOrReverse]\n *   Handle each node (when test is omitted, pass `reverse`).\n * @param {boolean | null | undefined} [maybeReverse=false]\n *   Traverse in reverse preorder (NRL) instead of the default preorder (NLR).\n * @returns {undefined}\n *   Nothing.\n *\n * @template {UnistNode} Tree\n *   Node type.\n * @template {Test} Check\n *   `unist-util-is`-compatible test.\n */\nexport function visit(tree, testOrVisitor, visitorOrReverse, maybeReverse) {\n  /** @type {boolean | null | undefined} */\n  let reverse\n  /** @type {Test} */\n  let test\n  /** @type {Visitor} */\n  let visitor\n\n  if (\n    typeof testOrVisitor === 'function' &&\n    typeof visitorOrReverse !== 'function'\n  ) {\n    test = undefined\n    visitor = testOrVisitor\n    reverse = visitorOrReverse\n  } else {\n    // @ts-expect-error: assume the overload with test was given.\n    test = testOrVisitor\n    // @ts-expect-error: assume the overload with test was given.\n    visitor = visitorOrReverse\n    reverse = maybeReverse\n  }\n\n  visitParents(tree, test, overload, reverse)\n\n  /**\n   * @param {UnistNode} node\n   * @param {Array<UnistParent>} parents\n   */\n  function overload(node, parents) {\n    const parent = parents[parents.length - 1]\n    const index = parent ? parent.children.indexOf(node) : undefined\n    return visitor(node, index, parent)\n  }\n}\n","/**\n * @typedef {import('hast').Root} Root\n * @typedef {import('hast-util-raw').Options} RawOptions\n * @typedef {import('vfile').VFile} VFile\n */\n\n/**\n * @typedef {Omit<RawOptions, 'file'>} Options\n *   Configuration.\n */\n\nimport {raw} from 'hast-util-raw'\n\n/**\n * Parse the tree (and raw nodes) again, keeping positional info okay.\n *\n * @param {Options | null | undefined}  [options]\n *   Configuration (optional).\n * @returns\n *   Transform.\n */\nexport default function rehypeRaw(options) {\n  /**\n   * @param {Root} tree\n   *   Tree.\n   * @param {VFile} file\n   *   File.\n   * @returns {Root}\n   *   New tree.\n   */\n  return function (tree, file) {\n    // Assume root in -> root out.\n    const result = /** @type {Root} */ (raw(tree, {...options, file}))\n    return result\n  }\n}\n","import type { FC } from \"react\";\nimport Markdown from \"react-markdown\";\nimport remarkGfm from \"remark-gfm\";\nimport { css, blockStyle, h2Style, articleRoot } from \"./index.css\";\nimport { TagList } from \"@/components/organisms/tag-list\";\nimport rehypeRaw from \"rehype-raw\";\n\ntype Props = {\n  title: string;\n  date?: string;\n  markdown: string;\n  tags?: string[];\n};\nexport const MarkdownRenderer: FC<Props> = ({\n  markdown,\n  title,\n  date = \"\",\n  tags = [],\n}) => (\n  <div className={css}>\n    <div className={blockStyle}>\n      {date ? <small>{date}</small> : null}\n      <h2 className={h2Style}>{title}</h2>\n      {tags.length > 0 && <TagList tags={tags} />}\n    </div>\n    <article className={`${blockStyle} ${articleRoot}`}>\n      <Markdown remarkPlugins={[remarkGfm]} rehypePlugins={[rehypeRaw]}>\n        {markdown}\n      </Markdown>\n    </article>\n  </div>\n);\n","import { MarkdownRenderer } from \"@/components/organisms/markdown-renderer\";\nimport { CommonHead } from \"@/components/organisms/meta/common-head\";\nimport { Template } from \"@/components/templates\";\nimport { toPlainText } from \"@/utils/markdownUtils\";\nimport { type HeadFC, type PageProps, graphql } from \"gatsby\";\nimport { z } from \"zod\";\n\nconst EntryPage: React.FC<PageProps<Queries.EntryPageQueryQuery>> = ({\n  data,\n  location,\n}) => {\n  if (!data.markdownRemark) {\n    return <></>;\n  }\n  const { frontmatter, rawMarkdownBody } = data.markdownRemark;\n  if (frontmatter?.draft) {\n    return <></>;\n  }\n  return (\n    <Template pathname={location.pathname}>\n      <main>\n        <MarkdownRenderer\n          title={frontmatter?.title ?? \"\"}\n          date={frontmatter?.date ?? undefined}\n          markdown={rawMarkdownBody ?? \"\"}\n          tags={frontmatter?.tags ?? []}\n        />\n      </main>\n    </Template>\n  );\n};\n\nexport default EntryPage;\n\nexport const query = graphql`\n  query EntryPageQuery ($id: String!) {\n    markdownRemark(id: { eq: $id }) {\n      rawMarkdownBody\n      frontmatter {\n        date(formatString: \"MMMM DD, YYYY\")\n        slug\n        title\n        draft\n        tags\n      }\n    }\n    site {\n      siteMetadata {\n        title\n        description\n        siteUrl \n      }\n    }\n  }\n`;\n\nconst frontmatterSchema = z.object({\n  date: z.string(),\n  slug: z.string(),\n  title: z.string(),\n  draft: z.boolean(),\n  tags: z.array(z.string()).nullable(),\n});\n\nconst siteMetadataSchema = z.object({\n  title: z.string(),\n  description: z.string(),\n  siteUrl: z.string(),\n});\n\nexport const querySchema = z.object({\n  markdownRemark: z.object({\n    frontmatter: frontmatterSchema,\n    rawMarkdownBody: z.string(),\n  }),\n  site: z.object({\n    siteMetadata: siteMetadataSchema,\n  }),\n});\n\nexport const Head: HeadFC<Queries.EntryPageQueryQuery> = (props) => {\n  const parseResult = querySchema.safeParse(props.data);\n  if (parseResult.error) {\n    throw new Error(parseResult.error.message);\n  }\n  const data = parseResult.data;\n\n  const description = toPlainText(data.markdownRemark.rawMarkdownBody).slice(\n    0,\n    160,\n  );\n\n  return (\n    <CommonHead\n      title={`${data.markdownRemark.frontmatter.title} | ${data.site.siteMetadata.title}`}\n      siteUrl={`${data.site.siteMetadata.siteUrl}/entry/${data.markdownRemark.frontmatter.slug}`}\n      description={description}\n    />\n  );\n};\n","\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.camelCase = void 0;\nvar CUSTOM_PROPERTY_REGEX = /^--[a-zA-Z0-9_-]+$/;\nvar HYPHEN_REGEX = /-([a-z])/g;\nvar NO_HYPHEN_REGEX = /^[^-]+$/;\nvar VENDOR_PREFIX_REGEX = /^-(webkit|moz|ms|o|khtml)-/;\nvar MS_VENDOR_PREFIX_REGEX = /^-(ms)-/;\n/**\n * Checks whether to skip camelCase.\n */\nvar skipCamelCase = function (property) {\n    return !property ||\n        NO_HYPHEN_REGEX.test(property) ||\n        CUSTOM_PROPERTY_REGEX.test(property);\n};\n/**\n * Replacer that capitalizes first character.\n */\nvar capitalize = function (match, character) {\n    return character.toUpperCase();\n};\n/**\n * Replacer that removes beginning hyphen of vendor prefix property.\n */\nvar trimHyphen = function (match, prefix) { return \"\".concat(prefix, \"-\"); };\n/**\n * CamelCases a CSS property.\n */\nvar camelCase = function (property, options) {\n    if (options === void 0) { options = {}; }\n    if (skipCamelCase(property)) {\n        return property;\n    }\n    property = property.toLowerCase();\n    if (options.reactCompat) {\n        // `-ms` vendor prefix should not be capitalized\n        property = property.replace(MS_VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    else {\n        // for non-React, remove first hyphen so vendor prefix is not capitalized\n        property = property.replace(VENDOR_PREFIX_REGEX, trimHyphen);\n    }\n    return property.replace(HYPHEN_REGEX, capitalize);\n};\nexports.camelCase = camelCase;\n//# sourceMappingURL=utilities.js.map"],"names":["COMMENT_REGEX","NEWLINE_REGEX","WHITESPACE_REGEX","PROPERTY_REGEX","COLON_REGEX","VALUE_REGEX","SEMICOLON_REGEX","TRIM_REGEX","EMPTY_STRING","trim","str","replace","module","exports","style","options","TypeError","lineno","column","updatePosition","lines","match","length","i","lastIndexOf","position","start","line","node","Position","whitespace","this","end","source","prototype","content","errorsList","error","msg","err","Error","reason","filename","silent","push","re","m","exec","slice","comments","rules","c","comment","pos","charAt","type","declaration","prop","val","ret","property","value","decl","decls","declarations","hasOwn","Object","hasOwnProperty","toStr","toString","defineProperty","gOPD","getOwnPropertyDescriptor","isArray","arr","Array","call","isPlainObject","obj","key","hasOwnConstructor","hasIsPrototypeOf","constructor","setProperty","target","name","enumerable","configurable","newValue","writable","getProperty","extend","src","copy","copyIsArray","clone","arguments","deep","__importDefault","mod","__esModule","iterator","styleObject","inline_style_parser_1","default","hasIterator","forEach","style_to_object_1","utilities_1","StyleToJS","output","camelCase","ok","unreachable","nameRe","nameReJsx","emptyOptions","jsx","test","empty","Schema","normal","space","merge","definitions","definition","assign","normalize","toLowerCase","undefined","Info","attribute","booleanish","boolean","commaOrSpaceSeparated","commaSeparated","defined","mustUseProperty","number","overloadedBoolean","spaceSeparated","powers","increment","checks","keys","DefinedInfo","mask","index","super","mark","check","values","create","properties","normals","entries","info","transform","attributes","includes","aria","ariaActiveDescendant","ariaAtomic","ariaAutoComplete","ariaBusy","ariaChecked","ariaColCount","ariaColIndex","ariaColSpan","ariaControls","ariaCurrent","ariaDescribedBy","ariaDetails","ariaDisabled","ariaDropEffect","ariaErrorMessage","ariaExpanded","ariaFlowTo","ariaGrabbed","ariaHasPopup","ariaHidden","ariaInvalid","ariaKeyShortcuts","ariaLabel","ariaLabelledBy","ariaLevel","ariaLive","ariaModal","ariaMultiLine","ariaMultiSelectable","ariaOrientation","ariaOwns","ariaPlaceholder","ariaPosInSet","ariaPressed","ariaReadOnly","ariaRelevant","ariaRequired","ariaRoleDescription","ariaRowCount","ariaRowIndex","ariaRowSpan","ariaSelected","ariaSetSize","ariaSort","ariaValueMax","ariaValueMin","ariaValueNow","ariaValueText","role","_","caseSensitiveTransform","caseInsensitiveTransform","html","acceptcharset","classname","htmlfor","httpequiv","abbr","accept","acceptCharset","accessKey","action","allow","allowFullScreen","allowPaymentRequest","allowUserMedia","alt","as","async","autoCapitalize","autoComplete","autoFocus","autoPlay","blocking","capture","charSet","checked","cite","className","cols","colSpan","contentEditable","controls","controlsList","coords","crossOrigin","data","dateTime","decoding","defer","dir","dirName","disabled","download","draggable","encType","enterKeyHint","fetchPriority","form","formAction","formEncType","formMethod","formNoValidate","formTarget","headers","height","hidden","high","href","hrefLang","htmlFor","httpEquiv","id","imageSizes","imageSrcSet","inert","inputMode","integrity","is","isMap","itemId","itemProp","itemRef","itemScope","itemType","kind","label","lang","language","list","loading","loop","low","manifest","max","maxLength","media","method","min","minLength","multiple","muted","nonce","noModule","noValidate","onAbort","onAfterPrint","onAuxClick","onBeforeMatch","onBeforePrint","onBeforeToggle","onBeforeUnload","onBlur","onCancel","onCanPlay","onCanPlayThrough","onChange","onClick","onClose","onContextLost","onContextMenu","onContextRestored","onCopy","onCueChange","onCut","onDblClick","onDrag","onDragEnd","onDragEnter","onDragExit","onDragLeave","onDragOver","onDragStart","onDrop","onDurationChange","onEmptied","onEnded","onError","onFocus","onFormData","onHashChange","onInput","onInvalid","onKeyDown","onKeyPress","onKeyUp","onLanguageChange","onLoad","onLoadedData","onLoadedMetadata","onLoadEnd","onLoadStart","onMessage","onMessageError","onMouseDown","onMouseEnter","onMouseLeave","onMouseMove","onMouseOut","onMouseOver","onMouseUp","onOffline","onOnline","onPageHide","onPageShow","onPaste","onPause","onPlay","onPlaying","onPopState","onProgress","onRateChange","onRejectionHandled","onReset","onResize","onScroll","onScrollEnd","onSecurityPolicyViolation","onSeeked","onSeeking","onSelect","onSlotChange","onStalled","onStorage","onSubmit","onSuspend","onTimeUpdate","onToggle","onUnhandledRejection","onUnload","onVolumeChange","onWaiting","onWheel","open","optimum","pattern","ping","placeholder","playsInline","popover","popoverTarget","popoverTargetAction","poster","preload","readOnly","referrerPolicy","rel","required","reversed","rows","rowSpan","sandbox","scope","scoped","seamless","selected","shadowRootClonable","shadowRootDelegatesFocus","shadowRootMode","shape","size","sizes","slot","span","spellCheck","srcDoc","srcLang","srcSet","step","tabIndex","title","translate","typeMustMatch","useMap","width","wrap","writingSuggestions","align","aLink","archive","axis","background","bgColor","border","borderColor","bottomMargin","cellPadding","cellSpacing","char","charOff","classId","clear","code","codeBase","codeType","color","compact","declare","event","face","frame","frameBorder","hSpace","leftMargin","link","longDesc","lowSrc","marginHeight","marginWidth","noResize","noHref","noShade","noWrap","object","profile","prompt","rev","rightMargin","scheme","scrolling","standby","summary","text","topMargin","valueType","version","vAlign","vLink","vSpace","allowTransparency","autoCorrect","autoSave","disablePictureInPicture","disableRemotePlayback","prefix","results","security","unselectable","svg","accentHeight","alignmentBaseline","arabicForm","baselineShift","capHeight","clipPath","clipRule","colorInterpolation","colorInterpolationFilters","colorProfile","colorRendering","dataType","dominantBaseline","enableBackground","fillOpacity","fillRule","floodColor","floodOpacity","fontFamily","fontSize","fontSizeAdjust","fontStretch","fontStyle","fontVariant","fontWeight","glyphName","glyphOrientationHorizontal","glyphOrientationVertical","horizAdvX","horizOriginX","horizOriginY","imageRendering","letterSpacing","lightingColor","markerEnd","markerMid","markerStart","navDown","navDownLeft","navDownRight","navLeft","navNext","navPrev","navRight","navUp","navUpLeft","navUpRight","onActivate","onBegin","onEnd","onFocusIn","onFocusOut","onMouseWheel","onRepeat","onShow","onZoom","overlinePosition","overlineThickness","paintOrder","panose1","pointerEvents","renderingIntent","shapeRendering","stopColor","stopOpacity","strikethroughPosition","strikethroughThickness","strokeDashArray","strokeDashOffset","strokeLineCap","strokeLineJoin","strokeMiterLimit","strokeOpacity","strokeWidth","textAnchor","textDecoration","textRendering","transformOrigin","typeOf","underlinePosition","underlineThickness","unicodeBidi","unicodeRange","unitsPerEm","vAlphabetic","vHanging","vIdeographic","vMathematical","vectorEffect","vertAdvY","vertOriginX","vertOriginY","wordSpacing","writingMode","xHeight","playbackOrder","timelineBegin","about","accumulate","additive","alphabetic","amplitude","ascent","attributeName","attributeType","azimuth","bandwidth","baseFrequency","baseProfile","bbox","begin","bias","by","calcMode","clip","clipPathUnits","contentScriptType","contentStyleType","cursor","cx","cy","d","defaultAction","descent","diffuseConstant","direction","display","dur","divisor","dx","dy","edgeMode","editable","elevation","exponent","externalResourcesRequired","fill","filter","filterRes","filterUnits","focusable","focusHighlight","format","fr","from","fx","fy","g1","g2","glyphRef","gradientTransform","gradientUnits","handler","hanging","hatchContentUnits","hatchUnits","ideographic","initialVisibility","in","in2","intercept","k","k1","k2","k3","k4","kernelMatrix","kernelUnitLength","keyPoints","keySplines","keyTimes","kerning","lengthAdjust","limitingConeAngle","local","markerHeight","markerUnits","markerWidth","maskContentUnits","maskUnits","mathematical","mediaCharacterEncoding","mediaContentEncodings","mediaSize","mediaTime","mode","numOctaves","observer","offset","opacity","operator","order","orient","orientation","origin","overflow","overlay","path","pathLength","patternContentUnits","patternTransform","patternUnits","phase","pitch","points","pointsAtX","pointsAtY","pointsAtZ","preserveAlpha","preserveAspectRatio","primitiveUnits","propagate","r","radius","refX","refY","repeatCount","repeatDur","requiredExtensions","requiredFeatures","requiredFonts","requiredFormats","resource","restart","result","rotate","rx","ry","scale","seed","side","slope","snapshotTime","specularConstant","specularExponent","spreadMethod","spacing","startOffset","stdDeviation","stemh","stemv","stitchTiles","string","stroke","surfaceScale","syncBehavior","syncBehaviorDefault","syncMaster","syncTolerance","syncToleranceDefault","systemLanguage","tableValues","targetX","targetY","textLength","transformBehavior","to","u1","u2","unicode","viewBox","viewTarget","visibility","widths","x","x1","x2","xChannelSelector","y","y1","y2","yChannelSelector","z","zoomAndPan","xlink","xLinkActuate","xLinkArcRole","xLinkHref","xLinkRole","xLinkShow","xLinkTitle","xLinkType","xmlns","xmlnsxlink","xmlnsXLink","xml","xmlBase","xmlLang","xmlSpace","cap","dash","valid","kebab","$0","camelcase","toUpperCase","hastToReact","point","pointStart","VFileMessage","causeOrReason","optionsOrParentOrPlace","legacyCause","place","ancestors","cause","message","ruleId","indexOf","parent","fatal","file","stack","actual","expected","note","url","own","emptyMap","Map","tableElements","Set","tableCellElement","docs","toJsxRuntime","tree","Fragment","filePath","development","jsxDEV","props","isStaticChildren","children","columnNumber","fileName","lineNumber","developmentCreate","jsxs","fn","productionCreate","state","components","elementAttributeNameCase","evaluater","createEvaluater","ignoreInvalidStyle","passKeys","passNode","schema","stylePropertyNameCase","tableCellAlignToStyle","one","parentSchema","tagName","findComponentFromName","alignValue","createProperty","has","createElementProps","createChildren","child","thing","addNode","addChildren","pop","estree","expression","body","evaluateExpression","crashEstree","mdxExpression","objectExpression","argument","createJsxElementProps","mdxJsxElement","evaluateProgram","mdxEsm","root","countsByName","count","get","set","Type","rest","dashes","find","Number","isNaN","settings","join","padRight","padLeft","reactCompat","parseStyle","String","domCasing","cssCasing","transformStyleToCssCasing","transformStylesToCssCasing","allowExpression","identifiers","split","computed","Boolean","optional","toDash","urlAttributes","icon","includeImageAlt","includeHtml","splice","remove","items","parameters","chunkStart","unshift","SpliceBuffer","initial","left","right","RangeError","shift","setCursor","stop","POSITIVE_INFINITY","reverse","concat","deleteCount","Math","trunc","removed","chunkedPush","item","pushMany","unshiftMany","n","subtokenize","eventsArray","jumps","lineIndex","otherIndex","otherEvent","subevents","more","events","_tokenizer","_isInFirstContentOfListItem","contentType","subcontent","_container","eventIndex","token","context","startPosition","startPositions","tokenizer","parser","_contentTypeTextTrailing","childEvents","gaps","stream","previous","current","adjust","breaks","sliceStream","next","defineSkip","_gfmTasklistFirstContentOfListItem","write","combineExtensions","extensions","all","syntaxExtension","extension","hook","constructs","existing","before","add","regexCheck","markdownSpace","regex","fromCharCode","factorySpace","effects","limit","enter","consume","exit","tokenize","contentStart","attempt","contentInitial","lineStart","self","childFlow","childToken","lineStartOffset","continued","containerState","continuation","documentContinue","checkNewContainers","_closeFlow","closeFlow","indexBeforeExits","indexBeforeFlow","exitContainers","documentContinued","currentConstruct","concrete","flowStart","interrupt","_gfmTableDynamicInterruptHack","containerConstruct","thereIsANewContainer","thereIsNoNewContainer","lazy","now","containerContinue","flow","flowContinue","writeToChild","endOfFile","seen","entry","nok","document","disable","null","blankLine","partial","after","resolve","chunkInside","contentEnd","continuationConstruct","contentContinue","prefixed","tail","sliceSerialize","flowInitial","afterConstruct","resolver","resolveAll","createResolver","initializeFactory","field","resolveAllLineSuffixes","notText","atBreak","extraResolver","chunks","tabs","bufferIndex","chunk","charCodeAt","_bufferIndex","_index","thematicBreak","marker","sequence","onBlank","notBlank","furtherBlankLines","initialBlankLine","notInCurrentItem","indentConstruct","initialSize","atMarker","inside","listItemPrefixWhitespaceConstruct","endOfPrefix","otherPrefix","blockQuote","contBefore","factoryDestination","literalType","literalMarkerType","rawType","stringType","balance","enclosedBefore","raw","enclosed","enclosedEscape","rawEscape","factoryLabel","markerType","labelInside","labelEscape","factoryTitle","escape","factoryWhitespace","normalizeIdentifier","identifier","labelAfter","markerAfter","destinationBefore","destinationAfter","titleBefore","afterWhitespace","beforeMarker","titleAfter","titleAfterOptionalWhitespace","codeIndented","afterPrefix","furtherStart","headingAtx","sequenceOpen","sequenceFurther","setextUnderline","resolveTo","heading","paragraph","htmlBlockNames","htmlRawNames","htmlFlow","closingTag","buffer","markerB","declarationOpen","tagCloseStart","continuationDeclarationInside","commentOpenInside","cdataOpenInside","slash","basicSelfClosing","completeClosingTagAfter","completeAttributeNameBefore","completeEnd","completeAttributeName","completeAttributeNameAfter","completeAttributeValueBefore","completeAttributeValueQuoted","completeAttributeValueUnquoted","completeAttributeValueQuotedAfter","completeAfter","continuationCommentInside","continuationRawTagOpen","continuationClose","continuationCdataInside","continuationStart","blankLineBefore","continuationAfter","nonLazyContinuationStart","continuationStartNonLazy","continuationBefore","continuationRawEndTag","nonLazyContinuation","codeFenced","closeStart","startBefore","beforeSequenceClose","sequenceClose","sizeOpen","sequenceCloseAfter","initialPrefix","beforeSequenceOpen","infoBefore","atNonLazyBreak","metaBefore","meta","contentBefore","beforeContentChunk","contentChunk","createElement","decodeNamedCharacterReference","characterReference","innerHTML","character","textContent","numeric","characterEscape","lineEnding","called","labelEnd","newEvents","close","_inactive","_balanced","group","insideSpan","labelStart","labelEndNok","resourceConstruct","labelEndOk","referenceFullConstruct","referenceNotFull","referenceCollapsedConstruct","resourceBefore","resourceOpen","resourceEnd","resourceDestinationAfter","resourceDestinationMissing","resourceBetween","resourceTitleAfter","referenceFullAfter","referenceFullMissing","referenceCollapsedOpen","labelStartImage","classifyCharacter","attention","openingSequence","closingSequence","use","nextEvents","_close","_open","movePoint","attentionMarkers","autolink","schemeOrEmailAtext","emailAtext","schemeInsideOrEmailAtext","urlInside","emailAtSignOrDot","emailLabel","emailValue","htmlText","returnState","instruction","tagOpen","commentEnd","commentClose","lineEndingBefore","cdata","cdataClose","cdataEnd","instructionClose","tagClose","tagCloseBetween","tagOpenBetween","tagOpenAttributeName","tagOpenAttributeNameAfter","tagOpenAttributeValueBefore","tagOpenAttributeValueQuoted","tagOpenAttributeValueUnquoted","tagOpenAttributeValueQuotedAfter","lineEndingAfter","lineEndingAfterPrefix","labelStartLink","hardBreakEscape","codeText","tailExitIndex","headEnterIndex","between","createTokenizer","initialize","columnStart","resolveAllConstructs","consumed","constructFactory","construct","addResult","onsuccessfulcheck","accountForPotentialSkip","fields","expandTabs","atTab","serializeChunks","main","expectedCode","startIndex","startBufferIndex","endIndex","endBufferIndex","view","head","sliceChunks","chunkIndex","go","restore","onreturn","bogusState","listOfConstructs","constructIndex","handleListOfConstructs","map","handleMapOfConstructs","handleConstruct","startPoint","startPrevious","startCurrentConstruct","startEventsIndex","startStack","store","search","decodeNumericCharacterReference","base","parseInt","fromCodePoint","characterEscapeOrReference","decode","$1","$2","hex","fromMarkdown","encoding","config","transforms","canContainEols","opener","autolinkProtocol","onenterdata","autolinkEmail","atxHeading","codeFlow","codeFencedFenceInfo","codeFencedFenceMeta","codeTextData","codeFlowValue","definitionDestinationString","definitionLabelString","definitionTitleString","emphasis","hardBreak","hardBreakTrailing","htmlFlowData","htmlTextData","image","listItem","listItemValue","onenterlistitemvalue","listOrdered","onenterlistordered","listUnordered","reference","onenterreference","referenceString","resourceDestinationString","resourceTitleString","setextHeading","strong","closer","atxHeadingSequence","onexitatxheadingsequence","onexitautolinkemail","onexitautolinkprotocol","characterEscapeValue","onexitdata","characterReferenceMarkerHexadecimal","onexitcharacterreferencemarker","characterReferenceMarkerNumeric","characterReferenceValue","onexitcharacterreferencevalue","onexitcharacterreference","onexitcodefenced","codeFencedFence","onexitcodefencedfence","onexitcodefencedfenceinfo","onexitcodefencedfencemeta","onexitcodeindented","onexitcodetext","onexitdefinitiondestinationstring","onexitdefinitionlabelstring","onexitdefinitiontitlestring","onexithardbreak","onexithtmlflow","onexithtmltext","onexitimage","onexitlabel","labelText","onexitlabeltext","onexitlineending","onexitlink","onexitreferencestring","onexitresourcedestinationstring","onexitresourcetitlestring","onexitresource","onexitsetextheading","setextHeadingLineSequence","onexitsetextheadinglinesequence","setextHeadingText","onexitsetextheadingtext","configure","mdastExtensions","compile","tokenStack","resume","listStack","prepareList","defaultOnError","firstBlankLineIndex","containerBalance","listSpread","tailIndex","tailEvent","_spread","and","errorHandler","onExitError","expectingFirstListItemValue","flowCodeInside","depth","setextHeadingSlurpLineEnding","codePointAt","siblings","atHardBreak","inReference","referenceType","ancestor","decodeString","fragment","characterReferenceType","ordered","spread","compiler","postprocess","atCarriageReturn","endPosition","TextDecoder","lastIndex","ceil","preprocess","combined","remarkParse","doc","env","globalThis","deserialize","serialized","$","out","unpair","Date","flags","RegExp","BigInt","Uint8Array","DataView","deserializer","EMPTY","asString","shouldSkip","TYPE","serialize","json","lossy","strict","pair","valueOf","toJSON","toISOString","serializer","structuredClone","any","normalizeUri","skip","encodeURIComponent","defaultFootnoteBackContent","rereferenceIndex","defaultFootnoteBackLabel","referenceIndex","convert","castFactory","tests","apply","anyFactory","checkAsRecord","nodeAsRecord","propsFactory","typeFactory","testFunction","looksLikeANode","CONTINUE","EXIT","visitParents","visitor","factory","parents","visit","subresult","grandparents","toResult","nodeAsParent","revert","subtype","suffix","contents","listItemLoose","trimLines","last","trimLine","blockquote","patch","applyData","break","delete","footnoteReference","clobberPrefix","safeId","footnoteOrder","counter","reuseCounter","footnoteCounts","dataFootnoteRef","sup","allowDangerousHtml","imageReference","definitionById","inlineCode","linkReference","loose","listLoose","table","firstRow","tableContent","tableCell","tableRow","cellIndex","cells","cell","toml","ignore","yaml","footnoteDefinition","createState","footnoteById","handlers","nodes","trimMarkdownSpaceStart","handle","passThrough","shallow","unknown","unknownHandler","defaultUnknownHandler","testOrVisitor","visitorOrReverse","maybeReverse","hName","hChildren","hProperties","toHast","foot","footnoteBackContent","footnoteBackLabel","footnoteLabel","footnoteLabelTagName","footnoteLabelProperties","listItems","backReferences","counts","dataFootnoteBackref","tailTail","dataFootnotes","footer","remarkRehype","destination","hastTree","run","bail","getPrototypeOf","Symbol","toStringTag","trough","fns","pipeline","middlewareIndex","callback","middleware","wrapped","fnExpectsCallback","done","then","middelware","minpath","basename","extname","assertPath","seenNonSlash","firstNonSlashEnd","extnameIndex","dirname","unmatchedSlash","startPart","startDot","preDotState","segments","joined","absolute","allowAboveRoot","lastSlashIndex","lastSegmentLength","lastSlash","dots","normalizeString","sep","JSON","stringify","minproc","cwd","isUrl","fileUrlOrPath","protocol","auth","urlToPath","URL","hostname","pathname","third","decodeURIComponent","getPathFromURLPosix","VFile","isUint8Array","history","messages","stored","assertNonEmpty","assertPart","stem","fail","part","CallableInstance","proto","setPrototypeOf","Processor","Compiler","Parser","attachers","freezeIndex","frozen","namespace","transformers","attacher","assertUnfrozen","freeze","transformer","parse","realFile","vfile","assertParser","process","assertCompiler","executor","Promise","reject","parseTree","realDone","compileTree","compileResult","processSync","complete","assertDone","assertNode","outputTree","resultingTree","runSync","addPlugin","addList","addPreset","plugin","plugins","entryIndex","primary","currentPrimary","unified","asyncName","looksLikeAVFile","emptyPlugins","emptyRemarkRehypeOptions","safeProtocol","deprecations","Markdown","processor","createProcessor","createFile","post","rehypePlugins","remarkPlugins","remarkRehypeOptions","allowedElements","allowElement","disallowedElements","skipHtml","unwrapDisallowed","urlTransform","defaultUrlTransform","deprecation","colon","questionMark","numberSign","ccount","findAndReplace","ignored","pairs","tupleOrList","tuple","toExpression","toFunction","toPairs","pairIndex","grandparent","change","matchObject","input","global","inConstruct","notInConstruct","enterLiteralAutolink","enterLiteralAutolinkValue","exitLiteralAutolinkHttp","exitLiteralAutolinkWww","exitLiteralAutolinkEmail","exitLiteralAutolink","transformGfmAutolinkLiterals","findUrl","findEmail","domain","parts","isCorrectDomain","trailExec","trail","closingParenIndex","openingParens","closingParens","splitUrl","atext","email","enterFootnoteCallString","enterFootnoteCall","enterFootnoteDefinitionLabelString","enterFootnoteDefinition","exitFootnoteCallString","exitFootnoteCall","exitFootnoteDefinitionLabelString","exitFootnoteDefinition","tracker","createTracker","move","subexit","safe","associationId","gfmFootnoteToMarkdown","firstLineBlank","indentLines","containerFlow","mapAll","mapExceptFirst","unsafe","blank","peek","constructsWithoutStrikethrough","enterStrikethrough","exitStrikethrough","handleDelete","containerPhrasing","defaultStringLength","toAlignment","patternInScope","listInScope","none","_1","longestStreak","substring","checkQuote","quote","encodeCharacterReference","encodeInfo","outside","outsideKind","insideKind","checkEmphasis","betweenHead","betweenTail","attentionEncodeSurroundingInfo","formatHeadingAsSetext","literalWithBreak","setext","compilePattern","formatLinkAsAutolink","resourceLink","checkBullet","bullet","checkRule","rule","phrasing","checkStrong","fence","checkFence","fences","formatCodeAsIndented","repeat","encode","rank","closeAtx","bulletCurrent","bulletOrdered","checkBulletOrdered","bulletOther","checkBulletOther","useDifferentMarker","bulletLastUsed","firstListItem","indexStack","listItemIndent","checkListItemIndent","incrementListMarker","some","ruleSpaces","repetition","ruleRepetition","checkRuleRepetition","enterTable","_align","inTable","exitTable","enterRow","enterCell","exitCodeText","gfmTableToMarkdown","padding","tableCellPadding","alignDelimiters","tablePipeAlign","stringLength","around","serializeData","handleTableRowAsData","handleTableAsData","handleTableCell","row","matrix","alignments","cellMatrix","sizeMatrix","longestCellByColumn","mostCellsPerRow","rowIndex","columnIndex","delimiterStart","delimiterEnd","markdownTable","exitCheck","exitParagraphWithTaskListItem","firstParaghraph","sibling","listItemWithTaskListItem","checkable","checkbox","wwwPrefix","wwwPrefixInside","wwwPrefixAfter","underscoreInLastSegment","underscoreInLastLastSegment","domainInside","domainAfter","domainAtPunctuation","sizeClose","pathInside","pathAtPunctuation","trailCharacterReferenceStart","trailBracketAfter","trailCharacterReferenceInside","emailDomainDotTrail","wwwAutolink","previousWww","previousUnbalanced","wwwAfter","protocolAutolink","previousProtocol","protocolPrefixInside","protocolSlashesInside","afterProtocol","protocolAfter","emailAutolink","dot","gfmAtext","previousEmail","emailDomain","emailDomainAfter","emailDomainDot","_gfmAutolinkLiteralWalkedInto","indent","tokenizePotentialGfmFootnoteCall","gfmFootnotes","resolveToPotentialGfmFootnoteCall","replacement","tokenizeGfmFootnoteCall","callStart","callData","callEscape","tokenizeDefinitionStart","labelAtMarker","whitespaceAfter","tokenizeDefinitionContinuation","gfmFootnoteDefinitionEnd","gfmStrikethrough","single","singleTilde","strikethrough","EditMap","editMap","at","addImplementation","sort","a","b","vecs","element","gfmTableAlign","inDelimiterRow","alignIndex","tokenizeTable","sizeB","bodyRowStart","headRowBefore","headRowBreak","headRowStart","headDelimiterStart","headRowData","headRowEscape","headDelimiterBefore","headDelimiterValueBefore","headDelimiterCellBefore","headDelimiterNok","headDelimiterLeftAlignmentAfter","headDelimiterCellAfter","headDelimiterFiller","headDelimiterRightAlignmentAfter","bodyRowBreak","bodyRowData","bodyRowEscape","resolveTable","currentTable","currentBody","currentCell","inFirstCellAwaitingPipe","rowKind","lastCell","afterHeadAwaitingFirstBodyRow","lastTableEnd","flushTableEnd","flushCell","range","rowEnd","previousCell","groupName","getPoint","relatedStart","relatedEnd","valueToken","tableBody","exits","related","tasklistCheck","spaceThenNonSpace","remarkGfm","micromarkExtensions","fromMarkdownExtensions","toMarkdownExtensions","gfm","literalAutolink","literalAutolinkEmail","literalAutolinkHttp","literalAutolinkWww","gfmFootnoteCallString","gfmFootnoteCall","gfmFootnoteDefinitionLabelString","gfmFootnoteDefinition","tableData","tableHeader","taskListCheckValueChecked","taskListCheckValueUnchecked","gfmToMarkdown","blockStyle","TagList","_ref","tags","clickable","_jsxs","_jsx","tag","Tag","tagSlug","createTagSlug","tokens","createH","defaultTagName","caseSensitive","createAdjustMap","selector","subvalue","parseSelector","lower","adjusted","record","isChild","addProperty","addChild","parsePrimitive","styles","finalResult","h","s","cr","lf","webNamespaces","mathml","nodeName","quirksMode","childNodes","location","loc","indices","toOffset","eol","toPoint","namespaceURI","attrs","sourceCodeLocation","startTag","endTag","verbose","opening","closing","createLocation","startLine","startCol","endLine","endCol","endOffset","zwitch","invalid","currentSchema","parentNode","publicId","systemId","htmlVoidElements","UNDEFINED_CODE_POINTS","REPLACEMENT_CHARACTER","CODE_POINTS","SEQUENCES","isSurrogate","cp","isControlCodePoint","isUndefinedCodePoint","ERR","Preprocessor","lastGapPos","gapStack","skipNextNewLine","lastChunkWritten","endOfChunkHit","bufferWaterline","isEol","lineStartPos","droppedBufferSize","lastErrOffset","col","getError","cpOffset","_err","onParseError","_addGap","_processSurrogate","nextCp","isSurrogatePair","EOF","surrogateInInputStream","willDropParsedChunk","dropParsedChunk","isLastChunk","insertHtmlAtCurrentPos","startsWith","CARRIAGE_RETURN","LINE_FEED","advance","_checkForProblematicCharacters","controlCharacterInInputStream","noncharacterInInputStream","retreat","TokenType","getTokenAttr","attrName","Uint16Array","_a","decodeMap","replaceCodePoint","codePoint","CharCodes","BinTrieFlags","EntityDecoderState","DecodingMode","isNumber","ZERO","NINE","isHexadecimalCharacter","UPPER_A","UPPER_F","LOWER_A","LOWER_F","isEntityInAttributeInvalidEnd","EQUALS","UPPER_Z","LOWER_Z","isAsciiAlphaNumeric","EntityDecoder","decodeTree","emitCodePoint","errors","EntityStart","treeIndex","excess","decodeMode","Strict","startEntity","NUM","NumericStart","stateNumericStart","NamedEntity","stateNamedEntity","NumericDecimal","stateNumericDecimal","NumericHex","stateNumericHex","LOWER_X","addToNumericResult","digitCount","pow","substr","emitNumericEntity","lastCp","expectedLength","absenceOfDigitsInNumericCharacterReference","SEMI","missingSemicolonAfterCharacterReference","validateNumericCharacterReference","valueLength","VALUE_LENGTH","determineBranch","Attribute","emitNotTerminatedNamedEntity","emitNamedEntityData","nodeIndex","branchCount","BRANCH_LENGTH","jumpOffset","JUMP_TABLE","lo","hi","mid","midValue","ATTRS","DOCUMENT_MODE","TAG_NAMES","TAG_ID","NS","TAG_NAME_TO_ID","A","ADDRESS","ANNOTATION_XML","APPLET","AREA","ARTICLE","ASIDE","B","BASE","BASEFONT","BGSOUND","BIG","BLOCKQUOTE","BODY","BR","BUTTON","CAPTION","CENTER","CODE","COL","COLGROUP","DD","DESC","DETAILS","DIALOG","DIR","DIV","DL","DT","EM","EMBED","FIELDSET","FIGCAPTION","FIGURE","FONT","FOOTER","FOREIGN_OBJECT","FORM","FRAME","FRAMESET","H1","H2","H3","H4","H5","H6","HEAD","HEADER","HGROUP","HR","HTML","I","IMG","IMAGE","INPUT","IFRAME","KEYGEN","LABEL","LI","LINK","LISTING","MAIN","MALIGNMARK","MARQUEE","MATH","MENU","META","MGLYPH","MI","MO","MN","MS","MTEXT","NAV","NOBR","NOFRAMES","NOEMBED","NOSCRIPT","OBJECT","OL","OPTGROUP","OPTION","P","PARAM","PLAINTEXT","PRE","RB","RP","RT","RTC","RUBY","S","SCRIPT","SEARCH","SECTION","SELECT","SOURCE","SMALL","SPAN","STRIKE","STRONG","STYLE","SUB","SUMMARY","SUP","TABLE","TBODY","TEMPLATE","TEXTAREA","TFOOT","TD","TH","THEAD","TITLE","TR","TRACK","TT","U","UL","SVG","VAR","WBR","XMP","getTagID","UNKNOWN","SPECIAL_ELEMENTS","MATHML","XLINK","XML","XMLNS","NUMBERED_HEADERS","State","TokenizerMode","DATA","RCDATA","RAWTEXT","SCRIPT_DATA","CDATA_SECTION","isAsciiUpper","LATIN_CAPITAL_A","LATIN_CAPITAL_Z","isAsciiLetter","LATIN_SMALL_A","LATIN_SMALL_Z","isAsciiLower","DIGIT_0","DIGIT_9","isAsciiDigit","toAsciiLower","isWhitespace","SPACE","TABULATION","FORM_FEED","isScriptDataDoubleEscapeSequenceEnd","SOLIDUS","GREATER_THAN_SIGN","Tokenizer","paused","inLoop","inForeignNode","lastStartTagName","active","entityStartPos","consumedAfterSnapshot","currentCharacterToken","currentToken","currentAttr","preprocessor","currentLocation","getCurrentLocation","entityDecoder","_flushCodePointConsumedAsCharacterReference","NULL","nullCharacterReference","characterReferenceOutsideUnicodeRange","surrogateCharacterReference","noncharacterCharacterReference","controlCharacterReference","getErrorForNumericCharacterReference","_b","sourceCodeLocationInfo","_runParsingLoop","_consume","_ensureHibernation","_callState","pause","writeCallback","_advanceBy","_consumeSequenceIfMatch","_createStartTagToken","START_TAG","tagID","selfClosing","ackSelfClosing","_createEndTagToken","END_TAG","_createCommentToken","COMMENT","_createDoctypeToken","initialName","DOCTYPE","forceQuirks","_createCharacterToken","chars","_createAttr","attrNameFirstCh","_leaveAttrName","_leaveAttrValue","duplicateAttribute","prepareToken","ct","_emitCurrentCharacterToken","emitCurrentTagToken","onStartTag","endTagWithAttributes","endTagWithTrailingSolidus","onEndTag","emitCurrentComment","onComment","emitCurrentDoctype","onDoctype","nextLocation","CHARACTER","onCharacter","NULL_CHARACTER","onNullCharacter","WHITESPACE_CHARACTER","onWhitespaceCharacter","_emitEOFToken","onEof","_appendCharToCurrentCharacterToken","ch","_emitCodePoint","_emitChars","_startCharacterReference","CHARACTER_REFERENCE","_isCharacterReferenceInAttribute","Legacy","ATTRIBUTE_VALUE_DOUBLE_QUOTED","ATTRIBUTE_VALUE_SINGLE_QUOTED","ATTRIBUTE_VALUE_UNQUOTED","_stateData","_stateRcdata","_stateRawtext","_stateScriptData","_statePlaintext","TAG_OPEN","_stateTagOpen","END_TAG_OPEN","_stateEndTagOpen","TAG_NAME","_stateTagName","RCDATA_LESS_THAN_SIGN","_stateRcdataLessThanSign","RCDATA_END_TAG_OPEN","_stateRcdataEndTagOpen","RCDATA_END_TAG_NAME","_stateRcdataEndTagName","RAWTEXT_LESS_THAN_SIGN","_stateRawtextLessThanSign","RAWTEXT_END_TAG_OPEN","_stateRawtextEndTagOpen","RAWTEXT_END_TAG_NAME","_stateRawtextEndTagName","SCRIPT_DATA_LESS_THAN_SIGN","_stateScriptDataLessThanSign","SCRIPT_DATA_END_TAG_OPEN","_stateScriptDataEndTagOpen","SCRIPT_DATA_END_TAG_NAME","_stateScriptDataEndTagName","SCRIPT_DATA_ESCAPE_START","_stateScriptDataEscapeStart","SCRIPT_DATA_ESCAPE_START_DASH","_stateScriptDataEscapeStartDash","SCRIPT_DATA_ESCAPED","_stateScriptDataEscaped","SCRIPT_DATA_ESCAPED_DASH","_stateScriptDataEscapedDash","SCRIPT_DATA_ESCAPED_DASH_DASH","_stateScriptDataEscapedDashDash","SCRIPT_DATA_ESCAPED_LESS_THAN_SIGN","_stateScriptDataEscapedLessThanSign","SCRIPT_DATA_ESCAPED_END_TAG_OPEN","_stateScriptDataEscapedEndTagOpen","SCRIPT_DATA_ESCAPED_END_TAG_NAME","_stateScriptDataEscapedEndTagName","SCRIPT_DATA_DOUBLE_ESCAPE_START","_stateScriptDataDoubleEscapeStart","SCRIPT_DATA_DOUBLE_ESCAPED","_stateScriptDataDoubleEscaped","SCRIPT_DATA_DOUBLE_ESCAPED_DASH","_stateScriptDataDoubleEscapedDash","SCRIPT_DATA_DOUBLE_ESCAPED_DASH_DASH","_stateScriptDataDoubleEscapedDashDash","SCRIPT_DATA_DOUBLE_ESCAPED_LESS_THAN_SIGN","_stateScriptDataDoubleEscapedLessThanSign","SCRIPT_DATA_DOUBLE_ESCAPE_END","_stateScriptDataDoubleEscapeEnd","BEFORE_ATTRIBUTE_NAME","_stateBeforeAttributeName","ATTRIBUTE_NAME","_stateAttributeName","AFTER_ATTRIBUTE_NAME","_stateAfterAttributeName","BEFORE_ATTRIBUTE_VALUE","_stateBeforeAttributeValue","_stateAttributeValueDoubleQuoted","_stateAttributeValueSingleQuoted","_stateAttributeValueUnquoted","AFTER_ATTRIBUTE_VALUE_QUOTED","_stateAfterAttributeValueQuoted","SELF_CLOSING_START_TAG","_stateSelfClosingStartTag","BOGUS_COMMENT","_stateBogusComment","MARKUP_DECLARATION_OPEN","_stateMarkupDeclarationOpen","COMMENT_START","_stateCommentStart","COMMENT_START_DASH","_stateCommentStartDash","_stateComment","COMMENT_LESS_THAN_SIGN","_stateCommentLessThanSign","COMMENT_LESS_THAN_SIGN_BANG","_stateCommentLessThanSignBang","COMMENT_LESS_THAN_SIGN_BANG_DASH","_stateCommentLessThanSignBangDash","COMMENT_LESS_THAN_SIGN_BANG_DASH_DASH","_stateCommentLessThanSignBangDashDash","COMMENT_END_DASH","_stateCommentEndDash","COMMENT_END","_stateCommentEnd","COMMENT_END_BANG","_stateCommentEndBang","_stateDoctype","BEFORE_DOCTYPE_NAME","_stateBeforeDoctypeName","DOCTYPE_NAME","_stateDoctypeName","AFTER_DOCTYPE_NAME","_stateAfterDoctypeName","AFTER_DOCTYPE_PUBLIC_KEYWORD","_stateAfterDoctypePublicKeyword","BEFORE_DOCTYPE_PUBLIC_IDENTIFIER","_stateBeforeDoctypePublicIdentifier","DOCTYPE_PUBLIC_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypePublicIdentifierDoubleQuoted","DOCTYPE_PUBLIC_IDENTIFIER_SINGLE_QUOTED","_stateDoctypePublicIdentifierSingleQuoted","AFTER_DOCTYPE_PUBLIC_IDENTIFIER","_stateAfterDoctypePublicIdentifier","BETWEEN_DOCTYPE_PUBLIC_AND_SYSTEM_IDENTIFIERS","_stateBetweenDoctypePublicAndSystemIdentifiers","AFTER_DOCTYPE_SYSTEM_KEYWORD","_stateAfterDoctypeSystemKeyword","BEFORE_DOCTYPE_SYSTEM_IDENTIFIER","_stateBeforeDoctypeSystemIdentifier","DOCTYPE_SYSTEM_IDENTIFIER_DOUBLE_QUOTED","_stateDoctypeSystemIdentifierDoubleQuoted","DOCTYPE_SYSTEM_IDENTIFIER_SINGLE_QUOTED","_stateDoctypeSystemIdentifierSingleQuoted","AFTER_DOCTYPE_SYSTEM_IDENTIFIER","_stateAfterDoctypeSystemIdentifier","BOGUS_DOCTYPE","_stateBogusDoctype","_stateCdataSection","CDATA_SECTION_BRACKET","_stateCdataSectionBracket","CDATA_SECTION_END","_stateCdataSectionEnd","_stateCharacterReference","AMBIGUOUS_AMPERSAND","_stateAmbiguousAmpersand","LESS_THAN_SIGN","AMPERSAND","unexpectedNullCharacter","EXCLAMATION_MARK","QUESTION_MARK","unexpectedQuestionMarkInsteadOfTagName","eofBeforeTagName","invalidFirstCharacterOfTagName","missingEndTagName","eofInTag","handleSpecialEndTag","_cp","HYPHEN_MINUS","eofInScriptHtmlCommentLikeText","EQUALS_SIGN","unexpectedEqualsSignBeforeAttributeName","QUOTATION_MARK","APOSTROPHE","unexpectedCharacterInAttributeName","missingAttributeValue","GRAVE_ACCENT","unexpectedCharacterInUnquotedAttributeValue","missingWhitespaceBetweenAttributes","unexpectedSolidusInTag","cdataInHtmlContent","incorrectlyOpenedComment","abruptClosingOfEmptyComment","eofInComment","nestedComment","incorrectlyClosedComment","eofInDoctype","missingWhitespaceBeforeDoctypeName","missingDoctypeName","invalidCharacterSequenceAfterDoctypeName","missingWhitespaceAfterDoctypePublicKeyword","missingDoctypePublicIdentifier","missingQuoteBeforeDoctypePublicIdentifier","abruptDoctypePublicIdentifier","missingWhitespaceBetweenDoctypePublicAndSystemIdentifiers","missingQuoteBeforeDoctypeSystemIdentifier","missingWhitespaceAfterDoctypeSystemKeyword","missingDoctypeSystemIdentifier","abruptDoctypeSystemIdentifier","unexpectedCharacterAfterDoctypeSystemIdentifier","RIGHT_SQUARE_BRACKET","eofInCdata","SEMICOLON","unknownNamedCharacterReference","IMPLICIT_END_TAG_REQUIRED","IMPLICIT_END_TAG_REQUIRED_THOROUGHLY","SCOPING_ELEMENTS_HTML","SCOPING_ELEMENTS_HTML_LIST","SCOPING_ELEMENTS_HTML_BUTTON","SCOPING_ELEMENTS_MATHML","SCOPING_ELEMENTS_SVG","TABLE_ROW_CONTEXT","TABLE_BODY_CONTEXT","TABLE_CONTEXT","TABLE_CELLS","OpenElementStack","currentTmplContentOrNode","_isInTemplate","treeAdapter","getTemplateContent","tagIDs","stackTop","tmplCount","currentTagId","_indexOf","getNamespaceURI","_updateCurrentElement","onItemPush","popped","onItemPop","oldElement","newElement","idx","insertAfter","referenceElement","newElementID","insertionIdx","popUntilTagNamePopped","targetIdx","shortenToLength","popUntilElementPopped","popUntilPopped","tagNames","targetNS","_indexOfTagNames","popUntilNumberedHeaderPopped","popUntilTableCellPopped","popAllUpToHtmlElement","clearBackTo","clearBackToTableContext","clearBackToTableBodyContext","clearBackToTableRowContext","tryPeekProperlyNestedBodyElement","contains","getCommonAncestor","elementIdx","isRootHtmlElementCurrent","hasInDynamicScope","htmlScope","tn","hasInScope","hasInListItemScope","hasInButtonScope","hasNumberedHeaderInScope","hasInTableScope","hasTableBodyContextInTableScope","hasInSelectScope","generateImpliedEndTags","generateImpliedEndTagsThoroughly","generateImpliedEndTagsWithExclusion","exclusionId","EntryType","MARKER","Marker","FormattingElementList","bookmark","_getNoahArkConditionCandidates","neAttrs","candidates","neAttrsLength","neTagName","getTagName","neNamespaceURI","elementAttrs","getAttrList","_ensureNoahArkCondition","neAttrsMap","neAttr","validCandidates","candidate","every","cAttr","insertMarker","pushElement","Element","insertElementAfterBookmark","bookmarkIdx","removeEntry","clearToLastMarker","markerIdx","getElementEntryInScopeWithTagName","getElementEntry","defaultTreeAdapter","createDocument","NO_QUIRKS","createDocumentFragment","createCommentNode","createTextNode","appendChild","newNode","insertBefore","referenceNode","setTemplateContent","templateElement","contentElement","setDocumentType","doctypeNode","setDocumentMode","getDocumentMode","detachNode","insertText","prevNode","isTextNode","insertTextBefore","adoptAttributes","recipient","recipientAttrsMap","attr","j","getFirstChild","getChildNodes","getParentNode","getTextNodeContent","textNode","getCommentNodeContent","commentNode","getDocumentTypeNodeName","getDocumentTypeNodePublicId","getDocumentTypeNodeSystemId","isCommentNode","isDocumentTypeNode","isElementNode","setNodeSourceCodeLocation","getNodeSourceCodeLocation","updateNodeSourceCodeLocation","endLocation","VALID_DOCTYPE_NAME","QUIRKS_MODE_PUBLIC_ID_PREFIXES","QUIRKS_MODE_NO_SYSTEM_ID_PUBLIC_ID_PREFIXES","QUIRKS_MODE_PUBLIC_IDS","LIMITED_QUIRKS_PUBLIC_ID_PREFIXES","LIMITED_QUIRKS_WITH_SYSTEM_ID_PUBLIC_ID_PREFIXES","hasPrefix","prefixes","MIME_TYPES","SVG_ATTRS_ADJUSTMENT_MAP","XML_ATTRS_ADJUSTMENT_MAP","SVG_TAG_NAMES_ADJUSTMENT_MAP","EXITS_FOREIGN_CONTENT","adjustTokenMathMLAttrs","adjustTokenSVGAttrs","adjustedAttrName","adjustTokenXMLAttrs","adjustedAttrEntry","isIntegrationPoint","ns","foreignNS","ENCODING","isHtmlIntegrationPoint","isMathMLTextIntegrationPoint","InsertionMode","BASE_LOC","TABLE_STRUCTURE_TAGS","defaultParserOptions","scriptingEnabled","fragmentContext","scriptHandler","stopped","insertionMode","INITIAL","originalInsertionMode","headElement","formElement","currentNotInHTML","tmplInsertionModeStack","pendingCharacterTokens","hasNonWhitespacePendingCharacterToken","framesetOk","fosterParentingEnabled","activeFormattingElements","fragmentContextID","_setContextModes","openElements","getFragmentParser","opts","documentMock","IN_TEMPLATE","_initTokenizerForFragmentParsing","_insertFakeRootElement","_resetInsertionMode","_findFormInFragmentContext","getFragment","rootElement","_adoptNodes","beforeToken","tid","isTop","_setEndLocation","isHTML","_isIntegrationPoint","_switchToTextParsing","nextTokenizerState","_insertElement","TEXT","switchToPlaintextParsing","IN_BODY","_getAdjustedCurrentElement","_setDocumentType","docTypeNode","_attachElementToTree","_shouldFosterParentOnInsertion","_fosterParentElement","_appendElement","_insertFakeElement","_insertTemplate","tmpl","_appendCommentNode","_insertCharacters","beforeElement","_findFosterParentingLocation","textNodeIdx","donor","closingToken","ctLoc","endLoc","shouldProcessStartTagTokenInForeignContent","_processToken","_processStartTag","_reconstructActiveFormattingElements","listLength","findIndex","_closeTableCell","IN_ROW","_closePElement","IN_TABLE_BODY","IN_CAPTION","IN_COLUMN_GROUP","IN_TABLE","IN_FRAMESET","_resetInsertionModeForSelect","AFTER_HEAD","BEFORE_HEAD","IN_CELL","IN_HEAD","selectIdx","IN_SELECT_IN_TABLE","IN_SELECT","_isElementCausesFosterParenting","openElement","_isSpecialElement","p","characterInForeignContent","tokenInInitialMode","BEFORE_HTML","tokenBeforeHtml","tokenBeforeHead","tokenInHead","IN_HEAD_NO_SCRIPT","tokenInHeadNoScript","tokenAfterHead","characterInBody","characterInTable","IN_TABLE_TEXT","characterInTableText","tokenInColumnGroup","AFTER_BODY","tokenAfterBody","AFTER_AFTER_BODY","tokenAfterAfterBody","nullCharacterInForeignContent","appendComment","AFTER_FRAMESET","tokenInTableText","appendCommentToRootHtmlElement","AFTER_AFTER_FRAMESET","appendCommentToDocument","QUIRKS","LIMITED_QUIRKS","nonConformingDoctype","doctypeInInitialMode","misplacedDoctype","nonVoidHtmlElementStartTagWithTrailingSolidus","startTagToken","COLOR","SIZE","FACE","popUntilHtmlOrIntegrationPoint","_startTagOutsideForeignContent","currentNs","adjustedTagName","startTagInForeignContent","startTagBeforeHtml","startTagInBody","startTagBeforeHead","startTagInHead","nestedNoscriptInHead","startTagInHeadNoScript","abandonedHeadElementChild","misplacedStartTagForHeadElement","startTagAfterHead","startTagInTable","TABLE_VOID_ELEMENTS","startTagInCaption","startTagInColumnGroup","startTagInTableBody","startTagInRow","startTagInCell","startTagInSelect","startTagInSelectInTable","startTagInTemplate","startTagAfterBody","startTagInFrameset","startTagAfterFrameset","startTagAfterAfterBody","startTagAfterAfterFrameset","_endTagOutsideForeignContent","endTagInForeignContent","endTagBeforeHtml","endTagWithoutMatchingOpenElement","endTagBeforeHead","templateEndTagInHead","endTagInHead","endTagInHeadNoScript","endTagAfterHead","endTagInBody","endTagInText","endTagInTable","endTagInCaption","endTagInColumnGroup","endTagInTableBody","endTagInRow","endTagInCell","endTagInSelect","endTagInSelectInTable","endTagInTemplate","endTagAfterBody","endTagInFrameset","endTagAfterFrameset","eofInBody","eofInElementThatCanContainOnlyText","eofInText","eofInTemplate","stopParsing","whitespaceCharacterInBody","whitespaceCharacterInTableText","aaObtainFormattingElementEntry","formattingElementEntry","genericEndTagInBody","aaObtainFurthestBlock","furthestBlock","aaInnerLoop","formattingElement","lastElement","nextElement","elementEntry","counterOverflow","aaRecreateElementFromEntry","aaInsertLastNodeInCommonAncestor","commonAncestor","aaReplaceFormattingElement","callAdoptionAgency","htmlElement","htmlLocation","bodyElement","bodyLocation","missingDoctype","closingOfElementWithOpenChildElements","errCode","openElementsLeftAfterEof","disallowedContentInNoscriptInHead","modeInBody","areaStartTagInBody","isHiddenInput","inputType","rawTextStartTagInBody","genericStartTagInBody","bStartTagInBody","activeElementEntry","aStartTagInBody","numberedHeaderStartTagInBody","addressStartTagInBody","elementId","listItemStartTagInBody","hrStartTagInBody","rbStartTagInBody","rtStartTagInBody","preStartTagInBody","xmpStartTagInBody","svgStartTagInBody","htmlStartTagInBody","bodyStartTagInBody","inTemplate","formStartTagInBody","nobrStartTagInBody","mathStartTagInBody","tableStartTagInBody","inputStartTagInBody","paramStartTagInBody","imageStartTagInBody","buttonStartTagInBody","appletStartTagInBody","iframeStartTagInBody","selectStartTagInBody","optgroupStartTagInBody","framesetStartTagInBody","textareaStartTagInBody","plaintextStartTagInBody","pEndTagInBody","addressEndTagInBody","liEndTagInBody","ddEndTagInBody","numberedHeaderEndTagInBody","brEndTagInBody","bodyEndTagInBody","htmlEndTagInBody","formEndTagInBody","appletEndTagInBody","tokenInTable","tdStartTagInTable","colStartTagInTable","formStartTagInTable","tableStartTagInTable","tbodyStartTagInTable","inputStartTagInTable","captionStartTagInTable","colgroupStartTagInTable","savedFosterParentingState","getEscaper","gfmTagfilterExpression","knownMdxNames","parseOptions","documentMode","stitches","resetTokenizer","fromParse5","stitch","toParse5","createParse5Location","cloneWithoutChildren","fakeRoot","handleRaw","setPoint","tagfilter","node_","extra","charRefCode","rehypeRaw","MarkdownRenderer","markdown","date","_frontmatter$title","_frontmatter$date","_frontmatter$tags","markdownRemark","_Fragment","frontmatter","rawMarkdownBody","draft","Template","frontmatterSchema","slug","nullable","siteMetadataSchema","description","siteUrl","querySchema","site","siteMetadata","Head","parseResult","safeParse","toPlainText","CommonHead","CUSTOM_PROPERTY_REGEX","HYPHEN_REGEX","NO_HYPHEN_REGEX","VENDOR_PREFIX_REGEX","MS_VENDOR_PREFIX_REGEX","capitalize","trimHyphen","skipCamelCase"],"sourceRoot":""}